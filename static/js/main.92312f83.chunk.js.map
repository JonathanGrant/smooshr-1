{"version":3,"sources":["components/Social.js","components/Nav.js","components/Header.js","components/TwoSigmaLogo.js","components/Footer.js","utils/file_parsing.js","utils/python_file.js","components/ProgressBar.js","components/FileSnapshot.js","components/Tabs.js","components/SearchBar.js","components/OpenDataSearcher.js","components/FileLoader.js","contexts/app_context.js","components/UploadModal.js","components/ProjectModal.js","utils/calc_embedings.js","contexts/actions.js","components/LoadProjectModal.js","components/GHPagesRedirect.js","components/ApplyMapping.js","components/ApplyMappingsModal.js","components/CodeExportModal.js","components/TablePreview.js","pages/DatasetPage.js","components/EntryCard.js","components/OrderBySelector.js","components/EntryPill.js","components/SelectedEntriesList.js","components/EntryTable.js","components/EditableText.js","components/MappingFocus.js","components/MappingsMenu.js","components/MappingsArea.js","utils/text_clustering.js","pages/ColumnPage.js","components/ProjectCard.js","pages/WelcomePage.js","components/ColumnCard.js","pages/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["Social","className","href","target","rel","icon","faTwitter","faMedium","faGithub","Nav","useState","showMenu","setShowMenu","toggleMenu","faBars","onClick","faTimes","to","Header","history","match","style","display","alignItems","alt","src","process","TwoSigmaLogo","width","height","viewBox","xmlns","id","d","fill","fill-rule","transform","Footer","uuidv1","require","exportPythonCode","project","datasets","meta_columns","columns","mappings","settings","output_file","recipe_name","slugify","name","output_data_name","recipy","createJSONMapping","python_code","zip","JSZip","folder","file","JSON","stringify","generateAsync","type","then","content","saveAs","saveProject","entries","projectJSON","output_name","blob","Blob","description","make_col_mappings","col_renames","forEach","mc","map","cID","find","c","filter","dataset_id","rc","datasetsJSON","ref","rows","column_renames","mappingsJSON","applicableMappings","m","column_id","mapping","ProgressBar","total","value","toPrecision","FileSnapshot","onAddDataset","setColumns","dataset","setDataset","setEntries","includedCols","setIncludedCols","progress","setProgress","status","setStatus","displayEntries","useMemo","reduce","res","col","colEntries","e","slice","extra","length","useEffect","onProgress","report_progress_every","sample_rows","max_unique","Promise","resolve","reject","no_rows","set_dict","sample","exceded","columnCounts","fileSize","size","split","Papa","parse","worker","header","download","step","row","push","data","meta","fields","f","rows_read","bytes_read","cursor","total_size","val","includes","error","console","log","complete","Object","keys","field","unique","key","count","row_count","parseFileForPreview","result","Fragment","toLocaleString","column","class","checked","onChange","columnID","join","cols","focusCol","ents","Tabs","options","selected","onSelected","option","SearchBar","prompt","faSearch","placeholder","OpneDataSearcher","onDataset","searchTerm","setSearchTerm","searchResults","setSearchResults","domain","fetch","json","results","catch","err","marginBottom","text","resource","permalink","faExternalLinkAlt","onSelect","faDownload","FileLoader","filesPreview","setFilesPreview","setError","url","setURL","columnSelections","setColumnSelections","selectedTab","setSelectedTab","submitFromURL","submitFromOpenData","onDrop","useCallback","files","every","useDropzone","getRootProps","getInputProps","isDragActive","classname","tab","disabled","faFile","accept","tabContent","defaultProps","StateContext","createContext","db","Dexie","version","stores","state","initalState","projects","embeddings","metaColumns","showUploadModal","showApplyMappingsModal","cache_loaded","storage_stats","persisting","add_or_replace","candidate","collection","id_col","item","reducer","action","payload","col_id","project_id","p","entry","meta_column","useStateValue","useContext","useProject","projectID","dispatch","metaColumnIds","colIDs","ids","columnIds","deleteProject","useMetaColumn","metaColumn","embeggins","entryNames","Array","from","Set","mergedEntry","ec","embed","useProjectStats","stats","project_datasets","project_columns","project_meta_columns","useStorage","quota","usage","useDataset","datasetID","columnIDs","UploadModal","params","onClose","goBack","overlay","backgroundColor","isOpen","onRequestClose","newDataset","ProjectModal","setName","setDescription","norm_vec","vec","mag","Math","sqrt","v","vec_mag","most_similar_to_category_mean","negativeEntries","search_entries","mean","entry_embeddings","emb","a","negative_embeddings","total_vec","concat","weight","i","category_mean","v1","v2","embeding","dist","index","suggestion","sort","b","combined_word_embedings_for_entry","word_embedings","norm","full_embed","word","word_embed","we","toLocaleLowerCase","rep","embedding","calc_embedings","unique_words","add","all","toLowerCase","replace","r","get_embedings_from_server","createMapping","selection","negative_examples","addEntriesToMapping","setProject","reader","FileReader","readAsText","onload","flexDirection","faDatabase","marginRight","faColumns","projectDetails","loadProject","GHPagesRedirect","redirect","setRedirect","sessionStorage","window","location","ApplyMapping","props","addColumns","setAddColumns","fileStream","streamSaver","createWriteStream","Response","body","pipeTo","ApplyMappingsModal","setFiles","CodeExportModal","changeNonMapped","setChangeNonMapped","createNewColumns","setCreateNewColumns","combineDatasets","setCombineDatasets","valueForNonMapped","setValueForNonMapped","TablePreview","k","setRows","rowGetter","rowsCount","onGridSort","sortColumn","sortDirection","initalRows","sortRows","DatasetPage","columnsForDataset","justifyContent","marginTop","EntryCard","onToggleSelect","OrderBySelector","show","setShowDropdown","setSelected","faSortDown","o","EntryPill","onRemove","SelectedEntriesList","onRemoveSelection","onClearAll","reverse","EntryTable","onToggleSelection","onClearSelection","order","setOrder","toggleSelection","orderKey","Alphabetically","Occurances","orderedEntries","faGlassCheers","EditableText","onUpdate","localText","setLocalText","editing","setEditing","onBlur","faEdit","MappingFocus","onRemoveEntryFromMapping","onRenameMapping","onClearMapping","onDeleteMapping","onAddSuggestionToMapping","onAddNegativeExampleToMapping","suggestions","suggestionType","setSuggestionType","suggestionsByType","removeEntryFromMapping","fontWeight","addSuggestionToMapping","faCheck","addNegativeExampleToMapping","MappingsMenu","onMappingSelected","mappingSelected","MappingsArea","onAddEntryToMapping","meaningSuggestions","textSuggestions","cacheSimilarities","suggestForMapping","mapping_entry","cacheKey","score","lev","ColumnPage","selectedMappingID","setSelectedMappingID","entrySelection","setEntrySelection","selectedMapping","requestEmbedingsForEntries","non_mapped_entries","some","useFuse","shouldSort","findAllMatches","caseSensitive","search","filteredEntries","clearSelection","onAddEntriesToMapping","entriesToAdd","shouldClearSelection","updateSearch","suggestionsAvaliable","meaning","total_rows","total_mapped_rows","total_entries_in_mappings","gridArea","justifySelf","onClear","overflowY","entryName","s","newName","renameMapping","deleteMapping","clearMapping","syle","ProjectCard","EmptyProjectCard","WelcomePage","faPlus","faUpload","ColumnCard","fromColumns","onUnmerge","link","totalUnique","tot","ProjectPage","selectedDatasetName","setSelectedDatasetName","selectedDataset","selectedColumns","setSelectedColumns","seperateMetaDataColumn","unMergeMetaColumn","dereferenceColumn","colID","faFistRaised","faInfoCircle","new_col","mergeMetaColumns","cid","changes","updateMetaColumn","changeMCName","App","basename","path","exact","component","LoadProjectModal","ShowApplyMappingsModal","Boolean","hostname","ReactDOM","render","children","useReducer","put","navigator","storage","estimate","estimation","get","cachedState","persist","persistResult","Provider","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92312f83.chunk.js","sourcesContent":["import React from 'react'\n\nimport {\n    faTwitter,\n    faMedium,\n    faGithub,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function Social() {\n\n    return (\n        <div className=\"social\">\n            <a href=\"https://twitter.com/tsdataclinic?lang=en\" target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faTwitter} />\n            </a>\n            <a href=\"https://medium.com/dataclinic\" target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faMedium} />\n            </a>\n            <a href=\"https://github.com/tsdataclinic\" target=\"blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faGithub} />\n            </a>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport Social from './Social'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport {\n    faBars,\n    faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nexport default function Nav() {\n    const [showMenu, setShowMenu] = useState(false)\n    const toggleMenu = () => setShowMenu(!showMenu)\n    return (\n        <div className=\"top-menu\">\n            <FontAwesomeIcon className='hamburger-menu' icon={faBars}\n                onClick={toggleMenu}\n            />\n            <div className={`menu-links ${showMenu ? '' : 'hidden'}`}>\n                <FontAwesomeIcon className='menu-close-icon' icon={faTimes} onClick={toggleMenu} />\n                <Link onClick={toggleMenu} to=\"/\">Projects</Link>\n                <Link onClick={toggleMenu} to=\"/about\">About</Link>\n                <a onClick={toggleMenu} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n                    Feedback\n                </a>\n\n                <Social />\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from './Nav'\n\nexport default function Header({ history, match }) {\n  return (\n    <div className=\"header\">\n      <div className=\"logos\">\n        <Link style={{ display: 'flex', alignItems: 'center' }} to={'/'}>\n          <img alt={\"Data Clinic Modal\"} src={`${process.env.PUBLIC_URL}/DataClinicLogo.png`} />{' '}\n          <span className=\"data-clinic\">Data Clinic</span>{' '}\n        </Link>\n        <span className=\"project-name\">smooshr (beta)</span>\n      </div>\n      <div className=\"spacer\" />\n      <Nav />\n\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TwoSigmaLogo() {\n  return (\n    <svg\n      width=\"116\"\n      height=\"21\"\n      viewBox=\"0 0 230 42\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      {' '}\n      <title>Two Sigma</title>\n      <defs>\n        <path id=\"a\" d=\"M19.436 21.668V1.025H0v20.643h19.435z\"></path>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          fill=\"#FFFFFF\"\n          d=\"M59.06 13.464h-7.137v-3.155h17.811v3.155H62.6V30.95h-3.54zm14.01-3.155h3.745l4.747 15.66h.06l4.483-15.66h3.301l4.454 15.66h.059l4.777-15.66h3.716L95.895 30.95H92.09l-4.335-15.127h-.059L83.361 30.95h-3.804zm41.214-.355c5.986 0 10.527 4.158 10.527 10.556 0 6.55-4.541 10.794-10.527 10.794-5.985 0-10.558-4.245-10.558-10.794 0-6.398 4.573-10.556 10.558-10.556m0 18.285c3.892 0 6.93-2.89 6.93-7.729 0-4.658-3.007-7.518-6.93-7.518-3.922 0-6.93 2.86-6.93 7.518 0 4.839 3.038 7.73 6.93 7.73m40.846-17.931h3.539V30.95h-3.54V19.41zm18.744-.355c2.832 0 5.222.885 7.313 2.33 0 0-2.026 2.374-2.128 2.311-1.56-1-3.21-1.574-5.096-1.574-4.247 0-7.048 3.068-7.048 7.433 0 4.746 2.624 7.785 7.048 7.785 1.534 0 3.067-.385 4.13-1.003v-4.897h-5.19v-2.623h8.462v9.347c-2.007 1.416-4.63 2.24-7.49 2.24-6.46 0-10.587-4.363-10.587-10.85 0-6.075 4.187-10.499 10.586-10.499m12.506.355h3.57l6.812 9.701 6.811-9.701h3.541V30.95h-3.421V15.558l-6.962 9.73-6.958-9.73V30.95h-3.392z\"></path>\n        <g transform=\"translate(210.418 9.283)\">\n          <path\n            d=\"M7.639 1.025h4.158l7.64 20.643H15.63l-1.561-4.454H5.368l-1.533 4.454H0L7.639 1.025zM6.34 14.354h6.725L9.734 4.74h-.06L6.34 14.354z\"\n            fill=\"#FFFFFF\"></path>\n        </g>\n        <path\n          d=\"M136.826 26.498c1.861 1.007 3.618 1.68 5.887 1.68 2.715 0 4.069-1.18 4.069-2.83 0-4.66-11.616-1.594-11.616-9.466 0-3.303 2.74-5.928 7.37-5.928 2.714 0 5.443.653 7.579 1.902l-2.314 2.361c-1.68-.72-3.11-1.137-5.146-1.137-2.389 0-3.806 1.21-3.806 2.744 0 4.63 11.62 1.473 11.62 9.494 0 3.393-2.567 5.985-7.756 5.985-3.035 0-6.33-1.076-8.273-2.419l2.386-2.386z\"\n          fill=\"#FFFFFF\"></path>\n        <path\n          fill=\"#009AA6\"\n          d=\"M20.625 0L0 20.63l20.625 20.628 20.63-20.628z\"></path>\n        <path\n          d=\"M9.748 26.478c-.16-6.605 7.789-5.746 7.789-9.13 0-1.1-.863-2.041-2.784-2.041-1.401 0-2.743.701-3.724 1.602l-1.46-1.463c1.259-1.18 3.223-2.14 5.284-2.14 3.304 0 4.986 1.842 4.986 4.003 0 4.986-7.728 4.104-7.728 8.27h7.607v1.98h-9.95l-.02-1.081zm15.937-.5c-1.521 0-2.423-.98-2.423-2.862 0-2.404 1.602-4.566 3.525-4.566 1.5 0 2.402.981 2.402 2.883 0 2.401-1.582 4.545-3.504 4.545zm9.713-9.25h-8.444v.003c-3.437.005-6.033 2.745-6.033 6.403 0 2.905 1.881 4.666 4.544 4.666 3.464 0 6.067-2.743 6.067-6.386 0-1.182-.313-2.173-.856-2.935h2.947l1.775-1.75z\"\n          fill=\"#FFF\"></path>\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport TwoSigmaLogo from './TwoSigmaLogo';\nimport Social from './Social'\n\nexport default function Footer() {\n  return (\n    <footer>\n      <TwoSigmaLogo />\n      <p className=\"copyright\">\n        © 2019 Two Sigma Investments, LP. All rights reserved.\n      </p>\n      <Social />\n    </footer>\n  );\n}\n","import Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\nimport slugify from 'slugify';\nimport python_template from './python_file';\nimport JSZip from 'jszip';\n\nconst uuidv1 = require('uuid/v1');\n\n// Takes a file handle and returns the summary stats for that file\nexport function parseFileForPreview(\n  file,\n  onProgress = null,\n  report_progress_every = 200,\n  sample_rows = 10,\n  max_unique = 500,\n) {\n  return new Promise((resolve, reject) => {\n    let no_rows = 0;\n    let set_dict = {};\n    let sample = [];\n    let exceded = [];\n    let columnCounts = {};\n\n    let ref = file.ref;\n    let fileSize = ref.size;\n\n    if (file.type !== 'file') {\n      ref = ref.split('?')[0];\n      ref = `${process.env.REACT_APP_API_URL}/proxy?url=${ref}`;\n    }\n\n    Papa.parse(ref, {\n      worker: true,\n      header: true,\n      download: file.type !== 'file',\n      step: function (row) {\n        if (no_rows < sample_rows) {\n          sample.push(row.data);\n        }\n\n        if (no_rows === 0) {\n          row.meta.fields.forEach(f => {\n            set_dict[f] = {};\n            columnCounts[f] = 0;\n          });\n        }\n\n        no_rows = no_rows + 1;\n\n        if (no_rows % report_progress_every === 0 && onProgress) {\n          onProgress({\n            rows_read: no_rows,\n            bytes_read: row.meta.cursor,\n            total_size: fileSize,\n          });\n        }\n\n        row.meta.fields.forEach(f => {\n          let val = row.data[f];\n\n          if (val === f) {\n            return;\n          }\n          if (val in set_dict[f]) {\n            set_dict[f][val] += 1;\n          } else {\n            if (columnCounts[f] < max_unique) {\n              set_dict[f][val] = 1;\n              columnCounts[f] += 1;\n            } else if (!exceded.includes(f)) {\n              exceded.push(f);\n            }\n          }\n        });\n      },\n      error: error => {\n        console.log('something bad happened ', error);\n      },\n      complete: () => {\n        let columns = [];\n        let entries = [];\n        const dataset_id = uuidv1();\n        Object.keys(set_dict).forEach(field => {\n          let column_id = uuidv1();\n\n          columns.push({\n            unique: Object.keys(set_dict[field]).length,\n            id: column_id,\n            name: field,\n            key: field,\n            dataset_id: dataset_id,\n            type: 'text',\n            exceded: exceded.includes(field),\n          });\n\n          Object.entries(set_dict[field]).forEach(([field, count]) =>\n            entries.push({ column_id, name: field, count }),\n          );\n        });\n\n        resolve({\n          dataset: {\n            id: dataset_id,\n            name: file.type === 'url' ? file.ref.split('?')[0] : file.ref.name,\n            file: file,\n            row_count: no_rows,\n            sample: sample,\n          },\n          columns: columns,\n          entries: entries,\n        });\n      },\n    });\n  });\n}\n\nexport const exportPythonCode = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  const recipe_name = slugify(project.name) + '.json';\n  const output_data_name = slugify(project.name) + 'csv';\n\n  const recipy = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    settings,\n  );\n  const python_code = python_template(recipe_name, output_data_name);\n\n  let zip = new JSZip();\n  let folder = zip.folder(project.name);\n  zip.folder(`${project.name}/put_your_datasets_in_here`);\n  zip.folder(`${project.name}/results`);\n  folder.file(recipe_name, JSON.stringify(recipy));\n  folder.file('process.py', python_code);\n  zip.generateAsync({ type: 'blob' }).then(content => {\n    saveAs(content, slugify(project.name) + 'zip');\n  });\n};\n\nexport const saveProject = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  entries,\n  settings,\n) => {\n  let projectJSON = {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n  };\n\n  const output_name = `${project.name}.json`;\n  var blob = new Blob([JSON.stringify(projectJSON)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\nexport const createJSONMapping = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  let projectJSON = {\n    name: project.name,\n    description: project.description,\n    id: project.id,\n  };\n\n  const make_col_mappings = d => {\n    const col_renames = {};\n    meta_columns.forEach(mc => {\n      const resolved_columns = mc.columns\n        .map(cID => columns.find(c => c.id === cID))\n        .filter(c => c.dataset_id === d.id);\n      resolved_columns.forEach(rc => {\n        col_renames[rc.name] = mc.name;\n      });\n    });\n    return col_renames;\n  };\n\n  let datasetsJSON = datasets.map(d => ({\n    type: d.file.type,\n    ref: d.file.ref,\n    rows: d.rows,\n    column_renames: make_col_mappings(d),\n  }));\n\n  const mappingsJSON = {};\n  meta_columns.forEach(mc => {\n    const applicableMappings = mappings.filter(m => m.column_id === mc.id);\n    mappingsJSON[mc.name] = {};\n    applicableMappings.forEach(mapping => {\n      mappingsJSON[mc.name][mapping.name] = mapping.entries;\n    });\n  });\n\n  const jsonOutput = {\n    project: projectJSON,\n    datasets: datasetsJSON,\n    mappings: mappingsJSON,\n    settings: settings ? settings : {},\n  };\n  return jsonOutput;\n};\n\nexport const saveMappingsJSON = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n) => {\n  const output_name = slugify(project.name) + '.json';\n  var jsonOutput = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n  );\n\n  var blob = new Blob([JSON.stringify(jsonOutput)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\n\nexport const saveMappingsCSV = (columns, mappings, output_name) => {\n  const csvMapping = columns.reduce((result, column) => {\n    const column_mappings = mappings.filter(m => m.column_id === column.id);\n    if (column_mappings.length > 0) {\n      column_mappings.forEach(mapping => {\n        mapping.entries.forEach(entry => {\n          result = result + [column.name, mapping.name, entry].join(',') + '\\n';\n        });\n      });\n    }\n    return result;\n  }, 'column,entry,mapped_entry\\n');\n  var blob = new Blob([csvMapping], { type: 'text/plain;charset=utf-8' });\n  saveAs(blob, `mappings_for_${output_name}.csv`);\n};\n\nexport const exportData = (project, outfile) => {\n  //   project.datasets.first.file\n};\n\nexport const applyAndSave = () => { };\nexport const applyMappingToFile = (columns, mappings, file) => { };\n","\nexport default function python_template(project_file,output_file){\n    var template = `\nimport pandas as pd \nimport json\nimport sys\n\nwith open('${project_file}', 'r') as f:\n    project = json.load(f)\n    datasets = project['datasets']\n\n    all_data = pd.DataFrame()\n\nfor dataset in datasets:\n    dataset_type = dataset['type']\n    dataset_name = dataset['ref']['path']\n    if(dataset_type=='file'):\n        file_path = 'put_your_datasets_in_here/{}'.format(dataset_name)\n        try:\n           print('Raeding {}'.format(dataset_name))\n           data = pd.read_csv(file_path)\n        except:\n           print(\"Place the file {} in the folder put_your_datasets_in_here\".format(file_path))\n           sys.exit()\n    elif(dataset_type['type'] == 'url'):\n        data = pd.read_csv(data['ref']['url'])\n    elif(dataset_Type['type'] == 'open_data'):\n        data = pd.read_csv(data['ref']['url'])\n        \n    print(\"Renaming columns\")\n    column_renames  = dataset['column_renames']\n    data = data.rename(columns=column_renames)\n\n    all_data = all_data.append(data, ignore_index=True)\n\nprint('Applying column mappings')\nfor column,mapping in project['mappings'].items():\n    map_dict = {}\n    for key, values in mapping.items():\n        for value in values:\n            map_dict[value] = key \n            \n    all_data[column] = all_data[column].map(lambda x: map_dict[x] if x in mapping else 'unknown')\n\nprint('Writing out results')\nall_data.to_csv('results/${output_file}')\nprint('Datasets have been smooshed')\n    `\n    return template\n}\n","import React from 'react'\n\nexport default function ProgressBar({ total, value, style }) {\n    return (\n        <div className='progress-bar' style={style}>\n            <div className='progress-bar-outer'>\n                <div className={'progress-bar-inner'} style={{ width: `${value * 100.0 / total}%` }}>\n                </div>\n            </div>\n            <p className='progress-bar-pc'>{value ? (value * 100 / total).toPrecision(3) : 0} %</p>\n        </div>\n    )\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport { parseFileForPreview } from '../utils/file_parsing';\nimport ProgressBar from './ProgressBar'\n\nexport default function FileSnapshot({ file, onAddDataset }) {\n  const [columns, setColumns] = useState([]);\n  const [dataset, setDataset] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [includedCols, setIncludedCols] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [status, setStatus] = useState('loading');\n\n  const submit = () => {\n    const cols = columns.map(c => ({\n      ...c,\n      focusCol: includedCols.includes(c.id),\n    }));\n    const ents = entries.filter(e => includedCols.includes(e.column_id));\n\n    onAddDataset(dataset, cols, ents);\n\n    setStatus('saved');\n  };\n\n  const skip = () => {\n    setStatus('skipping');\n  };\n\n  const toggleSelect = columnID => {\n    if (includedCols.includes(columnID)) {\n      setIncludedCols(includedCols.filter(id => id !== columnID));\n    } else {\n      setIncludedCols([...includedCols, columnID]);\n    }\n  };\n\n  const displayEntries = useMemo(\n    () =>\n      columns.reduce((res, col) => {\n        const colEntries = entries.filter(e => e.column_id === col.id);\n        res[col.id] = {\n          entries: colEntries.slice(0, 5).map(e => e.name),\n          extra: colEntries.length - 5,\n        };\n\n        return res;\n      }, {}),\n    [entries, columns],\n  );\n\n  useEffect(() => {\n    parseFileForPreview(file, progress => setProgress(progress)).then(\n      result => {\n        setStatus('selecting');\n        setDataset(result.dataset);\n        setColumns(result.columns);\n        setEntries(result.entries);\n      },\n    );\n  }, [file]);\n\n\n  return (\n    <div className=\"file-snapshot\">\n      <div className='file-snapshot-header'>\n        <h3>{file.type === 'url' ? file.ref : file.ref.name}</h3>\n        {status === 'loading' &&\n          <React.Fragment>\n            <p>Loading, parsed {progress.rows_read ? progress.rows_read.toLocaleString() : 0} rows</p>\n            <ProgressBar total={progress.total_size ? progress.total_size : 0} value={progress.bytes_read} style={{ width: '500px' }} />\n          </React.Fragment>\n        }\n        {status === 'selecting' &&\n          <p>\n            Has a total of {dataset.row_count} rows and {columns.length}{' '}\n            columns. Select the columns you want to work with\n          </p>}\n      </div>\n      {status === 'selecting' && (\n        <React.Fragment>\n          <ul className=\"column-summary-list \">\n            {columns.map(column => (\n              <li className='column-preview-card card' key={column.id}>\n                <div>\n                  <div class=\"summary-list-header\">\n                    <h3>\n                      {column.name} <span>{`${column.exceded ? '>' : ''} ${column.unique}`}</span>\n                    </h3>\n                    <input\n                      type=\"checkbox\"\n                      checked={includedCols.includes(column.id)}\n                      onChange={() => toggleSelect(column.id)}\n                    />\n                  </div>\n                  <p>\n                    {displayEntries[column.id].entries.join(', ') +\n                      ` and ${displayEntries[column.id].extra} more`}\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n\n          <div className='column-summary-buttons'>\n            <button onClick={submit}>Load</button>\n            <button onClick={skip}>Skip</button>\n          </div>\n        </React.Fragment>\n      )}\n\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Tabs({ options, selected, onSelected }) {\n  return (\n    <div className=\"tabs\">\n      {options.map(option => (\n        <p\n          className={`tab ${selected === option ? 'selected' : ''} `}\n          key={option}\n          onClick={() => onSelected(option)}>\n          {option}\n        </p>\n      ))}\n    </div>\n  );\n}","import React from 'react'\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function SearchBar({ value, onChange, prompt, style }) {\n\n  return (\n    <div className='search-bar-container' style={style}>\n      <FontAwesomeIcon className='search-icon' icon={faSearch} />\n      <input type='text'\n        className='search-bar'\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={prompt}\n        value={value}\n      />\n      <FontAwesomeIcon className='clear-icon' onClick={() => onChange('')} icon={faTimes} />\n    </div>\n  )\n}\n\n\nSearchBar.defaultProps = {\n  style: {}\n}\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport { faExternalLinkAlt, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function OpneDataSearcher({ onDataset }) {\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const domain = 'data.cityofnewyork.us';\n  const onSelect = dataset => {\n    onDataset({\n      type: 'opendata',\n      ref: `https://data.cityofnewyork.us/api/views/${dataset.resource.id}/rows.csv?accessType=DOWNLOAD`,\n    });\n  };\n\n  useEffect(() => {\n    const base = 'https://api.us.socrata.com/api/catalog/v1?';\n    fetch(\n      `${base}domains=${domain}&search_context=${domain}&limit=20&only=datasets&q=${searchTerm}`,\n    )\n      .then(res => res.json())\n      .then(res => {\n        setSearchResults(res.results);\n      })\n      .catch(err => console.log(err));\n  }, [searchTerm]);\n\n  return (\n    <div className=\"open-data-search\">\n      <SearchBar\n        style={{ marginBottom: '30px' }}\n        text={searchTerm}\n        onChange={setSearchTerm}\n      />\n      {searchResults.map(dataset => (\n        <p>\n          {dataset.resource.name}{' '}\n          <span className=\"open-data-result-controls\">\n            {' '}\n            <a href={dataset.permalink} target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n            </a>{' '}\n            <FontAwesomeIcon\n              onClick={() => onSelect(dataset)}\n              icon={faDownload}\n            />\n          </span>{' '}\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport FileSnapshot from './FileSnapshot';\nimport Tabs from './Tabs';\nimport OpenDataSearcher from './OpenDataSearcher';\n\nimport { faFile, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function FileLoader({ onAddDataset }) {\n  const [filesPreview, setFilesPreview] = useState(null);\n  const [error, setError] = useState(null);\n  const [url, setURL] = useState(null);\n\n  const [columnSelections, setColumnSelections] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('file');\n\n  const submitFromURL = () => {\n    setFilesPreview([{ type: 'url', ref: url }]);\n  };\n\n  const submitFromOpenData = dataset => {\n    setFilesPreview([dataset]);\n  };\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFilesPreview(files.map(f => ({ type: 'file', ref: f })));\n      setColumnSelections({ ...columnSelections, [files[0].name]: {} });\n      setError(null);\n    } else {\n      setError('Some files are not CSVs, We only support CSVs for now');\n    }\n  }, [columnSelections]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const renderURL = () => {\n    return (\n      <div className=\"url-tab\">\n        <FontAwesomeIcon icon={faDownload} />\n        <div>\n          <input\n            placeholder=\"dataseturl\"\n            value={url}\n            onChange={e => setURL(e.target.value)}\n          />\n          <button disabled={!url} onClick={submitFromURL}>\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderOpenDataPortal = () => {\n    return <OpenDataSearcher onDataset={submitFromOpenData} />;\n  };\n\n  const renderFile = () => {\n    return (\n      <div {...getRootProps()}>\n        <div className=\"file-tab\" style={{ cursor: 'p' }}>\n          <FontAwesomeIcon icon={faFile} />\n          <input\n            {...getInputProps({\n              accept: ['text/csv', 'application/vnd.ms-excel'],\n            })}\n          />\n          {isDragActive ? (\n            <p>Drop the files here ... </p>\n          ) : (\n              <p>Drag 'n' drop files here or click to load dataset</p>\n            )}\n        </div>\n        {error && <p>{error}</p>}\n      </div>\n    );\n  };\n\n  const tabContent = () => {\n    switch (selectedTab) {\n      case 'url':\n        return renderURL();\n      case 'open data portal':\n        return renderOpenDataPortal();\n      default:\n        return renderFile();\n    }\n  };\n\n  return (\n    <div classname=\"file-uploader\">\n      <Tabs\n        options={['file', 'url', 'open data portal']}\n        selected={selectedTab}\n        onSelected={tab => setSelectedTab(tab)}\n      />\n\n      {filesPreview ? (\n        <div>\n          {filesPreview.map(file => (\n            <FileSnapshot file={file} onAddDataset={onAddDataset} />\n          ))}\n        </div>\n      ) : (\n          <div className=\"content\">{tabContent()}</div>\n        )}\n    </div>\n  );\n}\n","import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport Dexie from 'dexie';\n\nconst uuidv1 = require('uuid/v1');\n\nexport const StateContext = createContext();\n\nconst db = new Dexie('state');\n\ndb.version(1).stores({\n  state: 'id',\n});\n\nconst initalState = {\n  datasets: [],\n  columns: [],\n  entries: [],\n  projects: [],\n  mappings: [],\n  embeddings: [],\n  metaColumns: [],\n  showUploadModal: false,\n  showApplyMappingsModal: false,\n  cache_loaded: false,\n  storage_stats: null,\n  persisting: false,\n};\n\n// Helper function\nconst add_or_replace = (candidate, collection, id_col = 'id') => {\n  if (collection.find(item => item[id_col] === candidate[id_col])) {\n    return collection.map(item =>\n      item[id_col] === candidate[id_col] ? candidate : item,\n    );\n  } else {\n    return [...collection, candidate];\n  }\n};\n\n// Main Reducer for the project\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'LOAD_CACHED_STATE':\n      return payload;\n\n    case 'ADD_DATASETS':\n      return { ...state, datasets: [...state.datasets, ...payload] };\n\n    case 'ADD_OR_REPLACE_DATASET':\n      return {\n        ...state,\n        datasets: add_or_replace(payload, state.datasets),\n      };\n    case 'ADD_OR_REPLACE_ENTRY':\n      return {\n        ...state,\n        entries: add_or_replace(payload, state.entries, 'name'),\n      };\n    case 'ADD_OR_REPLACE_MAPPING':\n      return {\n        ...state,\n        mappings: add_or_replace(payload, state.mappings),\n      };\n    case 'ADD_OR_REPLACE_METACOLUMN':\n      return {\n        ...state,\n        metaColumns: add_or_replace(payload, state.metaColumns),\n      };\n    case 'ADD_OR_REPLACE_PROJECT':\n      return {\n        ...state,\n        projects: add_or_replace(payload, state.projects),\n      };\n    case 'ADD_OR_REPLACE_COLUMN':\n      return {\n        ...state,\n        columns: add_or_replace(payload, state.columns),\n      };\n    case 'REMOVE DATASET':\n      return {\n        ...state,\n        datasets: state.datasets.filter(d => d.id !== payload),\n      };\n\n    case 'ADD_EMBEDINGS':\n      return {\n        ...state,\n        embeddings: payload,\n      };\n    case 'ADD_COLUMNS':\n      return { ...state, columns: [...state.columns, ...payload] };\n\n    case 'REMOVE_COLUMN':\n      return {\n        ...state,\n        columns: state.datasets.filter(c => c.id !== payload),\n      };\n\n    case 'ADD_ENTRIES':\n      return { ...state, entries: [...state.entries, ...payload] };\n\n    case 'REMOVE ENTRY':\n      return {\n        ...state,\n        entries: state.entries.filter(e => e.id !== payload),\n      };\n\n    case 'CREATE_META_COLUMN_FROM_COL_ID':\n      return {\n        ...state,\n        metaColumns: [\n          ...state.metaColumns,\n          {\n            id: payload.id,\n            name: state.columns.find(c => c.id === payload.col_id).name,\n            description: state.columns.find(c => c.id === payload.col_id)\n              .description,\n            project_id: payload.project_id,\n            columns: [payload.col_id],\n          },\n        ],\n      };\n\n    case 'REMOVE_MAPPINGS_FOR_METACOLUMN':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.column_id !== payload),\n      };\n\n    case 'REMOVE_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: state.metaColumns.filter(mc => !payload.includes(mc.id)),\n      };\n    case 'ADD_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: [...state.metaColumns, ...payload],\n      };\n\n    case 'REMOVE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.id !== payload),\n      };\n\n    case 'ADD_MAPPINGS':\n      return {\n        ...state,\n        mappings: [...state.mappings, ...payload],\n      };\n\n\n    case 'ADD_MAPPING':\n      return {\n        ...state,\n        mappings: [...state.mappings, payload],\n      };\n\n    case 'ADD_PROJECT':\n      return {\n        ...state,\n        projects: [...state.projects, { id: uuidv1(), ...payload }],\n      };\n\n    case 'REMOVE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.filter(p => p.id !== payload),\n      };\n\n    case 'UPDATE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.map(p =>\n          p.id === payload.id ? { ...p, ...payload } : p,\n        ),\n      };\n\n    case 'ADD ENTRY TO MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id\n            ? { ...m, entries: [...m.entries, payload.entry] }\n            : m,\n        ),\n      };\n    case 'UPDATE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id ? { ...m, ...payload.mapping } : m,\n        ),\n      };\n    case 'REMOVE_ENTRIES_FOR_COLUMN':\n      return {\n        ...state,\n        entries: state.entries.filter(entry => entry.columnID === payload),\n      };\n\n    case 'REMOVE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.filter(mc => mc.id !== payload),\n      };\n\n    case 'UPDATE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.map(mc =>\n          mc.id === payload.id ? { ...mc, ...payload.meta_column } : mc,\n        ),\n      };\n\n    case 'SET_PERSISTING':\n      return {\n        ...state,\n        persisting: payload,\n      };\n    case 'UPDATE_STORAGE_QUOTA':\n      return {\n        ...state,\n        storage_stats: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const {\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded\n  } = state;\n\n\n  // Effect used to persist the state values that we care about preserving\n  // to our cache \n  // TODO move this function to it's own hook section\n  useEffect(() => {\n    if (cache_loaded) {\n\n      db.state.put({\n        data: JSON.stringify({\n          datasets,\n          columns,\n          entries,\n          projects,\n          mappings,\n          metaColumns,\n          showUploadModal,\n          showApplyMappingsModal,\n        }), id: 1\n      });\n\n      if (navigator.storage && navigator.storage.estimate) {\n        navigator.storage.estimate().then(estimation => {\n          const { quota, usage } = estimation;\n          dispatch({\n            type: 'UPDATE_STORAGE_QUOTA',\n            payload: { quota, usage },\n          });\n        });\n      } else {\n        console.error('StorageManager not found');\n      }\n    }\n  }, [\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded\n  ]);\n\n  // Use this to restore the state\n  useEffect(() => {\n    db.state.get(1).then(result => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: { ...initalState, ...cachedState, cache_loaded: true },\n        });\n      } else {\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: { ...initalState, cache_loaded: true },\n        });\n      }\n    });\n  }, []);\n\n\n  // Record if we are able to reliably persist the \n  // cached local state\n  useEffect(() => {\n    if (navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(persistResult => {\n        dispatch({\n          type: 'SET_PERSISTING',\n          payload: persistResult,\n        });\n      });\n    }\n  }, []);\n\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\n\nexport const useStateValue = () => useContext(StateContext);\n\nexport const useProject = projectID => {\n  const [state, dispatch] = useStateValue();\n  const project = state.projects.find(p => p.id === projectID);\n  const datasets = state.datasets.filter(d => d.project_id === projectID);\n  const metaColumns = state.metaColumns.filter(\n    mc => mc.project_id === projectID,\n  );\n  const metaColumnIds = metaColumns.map(mc => mc.id);\n\n  const colIDs = metaColumns.reduce((ids, mc) => [...ids, ...mc.columns], []);\n  const mappings = state.mappings.filter(m =>\n    metaColumnIds.includes(m.column_id),\n  );\n  const columns = state.columns.filter(c => colIDs.includes(c.id));\n  const columnIds = columns.map(c => c.id);\n  const entries = state.entries.filter(e => columnIds.includes(e.column_id));\n\n  const deleteProject = () => {\n    columns.forEach(c => {\n      dispatch({\n        type: 'DELETE_ENTRIES_FOR_COLUMN',\n        payload: c.id,\n      });\n      dispatch({\n        type: 'REMOVE_COLUMN',\n        payload: c.id,\n      });\n    });\n\n    mappings.forEach(m => {\n      dispatch({\n        type: 'REMOVE_MAPPING',\n        payload: m.id,\n      });\n    });\n\n    metaColumns.forEach(m => {\n      dispatch({\n        type: 'REMOVE_META_COLUMN',\n        payload: m.id,\n      });\n    });\n\n    datasets.forEach(d => {\n      dispatch({\n        type: 'REMOVE_DATASET',\n        payload: d.id,\n      });\n    });\n\n    dispatch({\n      type: 'REMOVE_PROJECT',\n      payload: project.id,\n    });\n  };\n\n  return {\n    project,\n    datasets,\n    metaColumns,\n    columns,\n    mappings,\n    deleteProject,\n    entries,\n  };\n};\n\nexport const useColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const column = state.columns.find(c => c.id === columnID);\n  const entries = state.entries.filter(e => e.column_id === columnID);\n  const mappings = state.mappings.filter(m => m.column_id === columnID);\n  const entryNames = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entryNames.includes(embed.entry),\n  );\n  return { column, entries, mappings, embeddings, dispatch };\n};\n\nexport const useMetaColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const metaColumn = state.metaColumns.find(c => c.id === columnID);\n  if (!metaColumn) {\n    return {\n      metaColumn: null,\n      entries: [],\n      mappings: [],\n      embeggins: [],\n      dispatch,\n    };\n  }\n  const entries = state.entries.filter(e =>\n    metaColumn.columns.includes(e.column_id),\n  );\n\n  // Need to consolidate the entries down to as single space.\n  const entryNames = Array.from(new Set(entries.map(e => e.name)));\n  const mergedEntry = entryNames.map(name => {\n    const entry_collection = entries.filter(e => e.name === name);\n    const total = entry_collection.reduce((total, ec) => total + ec.count, 0);\n    return {\n      name,\n      count: total,\n    };\n  });\n\n  const mappings = state.mappings.filter(m => m.column_id === metaColumn.id);\n  const embeddings = state.embeddings.filter(embed =>\n    entryNames.includes(embed.entry),\n  );\n  return { metaColumn, entries: mergedEntry, mappings, embeddings, dispatch };\n};\n\nexport const useProjectStats = () => {\n  const [state,] = useStateValue();\n  const { projects, datasets, columns } = state;\n  const project_stats = projects.reduce((stats, project) => {\n    const project_datasets = datasets\n      .filter(d => d.project_id === project.id)\n      .map(d => d.id);\n    const project_columns = columns.filter(c =>\n      project_datasets.includes(c.id),\n    );\n    const project_meta_columns = columns.filter(\n      mc => mc.project_id === project.id,\n    );\n    return [\n      ...stats,\n      {\n        project: project,\n        stats: {\n          datasets: datasets.length,\n          columns: project_columns.length,\n          meta_columns: project_meta_columns.length,\n        },\n      },\n    ];\n  }, []);\n  return project_stats;\n};\n\nexport const useStorage = () => {\n  const [{ storage_stats, persisting },] = useStateValue();\n  if (storage_stats) {\n    return {\n      persisting,\n      quota: storage_stats.quota / 1e6,\n      usage: storage_stats.usage / 1e6,\n    };\n  } else {\n    return {};\n  }\n};\n\nexport const useDataset = datasetID => {\n  const [state,] = useStateValue();\n  const dataset = state.datasets.find(d => d.id === datasetID);\n  const columns = state.columns.filter(d => d.dataset_id === datasetID);\n  const columnIDs = columns.map(c => c.id);\n  const mappings = state.mappings.filter(m => columnIDs.includes(m.columnID));\n  return { dataset, columns, mappings };\n};\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport FileLoader from './FileLoader';\nimport { useStateValue } from '../contexts/app_context';\nconst uuidv1 = require('uuid/v1');\n\nexport default function UploadModal({ match, history }) {\n  const { projectID } = match.params;\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const addDatasetToStore = (newDataset, columns, entries) => {\n    const metaColumns = columns\n      .filter(c => c.focusCol)\n      .map(column => ({\n        columns: [column.id],\n        name: column.name,\n        description: '',\n        project_id: projectID,\n        id: uuidv1(),\n      }));\n\n    dispatch({\n      type: 'ADD_DATASETS',\n      payload: [{ ...newDataset, project_id: projectID }],\n    });\n\n    dispatch({\n      type: 'ADD_COLUMNS',\n      payload: columns,\n    });\n\n    dispatch({\n      type: 'ADD_ENTRIES',\n      payload: entries,\n    });\n\n    dispatch({\n      type: 'ADD_META_COLUMNS',\n      payload: metaColumns,\n    });\n\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '60%', width: '80%', transform: 'translate(10%,15%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <FileLoader onAddDataset={addDatasetToStore} onClose={onClose} />\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function ProjectModal({ match, history }) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n\n  const createProject = () => {\n    dispatch({\n      type: 'ADD_PROJECT',\n      payload: { name, description },\n    });\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '35%', width: '50%', transform: 'translate(40%,40%)' },\n\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"new-project-modal\">\n        <h1>New Project</h1>\n        <p>Project Name</p>\n        <input\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"name\"\n        />\n        <p>Description</p>\n        <textarea\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n          placeholder=\"description\"\n        />\n        <div className=\"buttons\">\n          <button onClick={createProject}>Create</button>\n          <button className=\"cancel-button\" onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","const get_embedings_from_server = entries => {\n  let unique_words = new Set();\n  entries.forEach(entry => {\n    entry.name.split(' ').forEach(word => {\n      unique_words.add(word);\n    });\n  });\n\n  return Promise.all(\n    Array.from(unique_words).map(entry =>\n      fetch(\n        `${\n        process.env.REACT_APP_API_URL\n        }/embedding/${entry.toLowerCase().replace(/[\\W_]+/g, '')}`,\n      )\n        .then(r => r.json())\n        .then(r => r[0]),\n    ),\n  );\n};\n\nconst vec_mag = vec => Math.sqrt(vec.reduce((mag, v) => mag + v * v, 0));\n\nconst norm_vec = vec => {\n  const mag = vec_mag(vec);\n  return vec.map(v => v / mag);\n};\n\nconst category_mean = (entries, negativeEntries, embeddings) => {\n  const entry_embeddings = entries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, 1]);\n\n  const negative_embeddings = negativeEntries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, -1]);\n\n  const all_entry_contributions = entry_embeddings.concat(negative_embeddings);\n\n  const total_vec = all_entry_contributions.reduce((total, embed) => {\n    const weight = embed[1];\n    const vec = embed[0].map(v => v * weight);\n\n    if (total.length === 0) {\n      total = vec;\n    } else {\n      total = vec.map((v, i) => v + total[i]);\n    }\n    return total;\n  }, []);\n\n  return norm_vec(total_vec);\n};\n\nconst vec_dist2 = (v1, v2) =>\n  v1.reduce((total, v, index) => total + (v - v2[index]) * (v - v2[index]), 0);\n\nexport const most_similar_to_category_mean = (\n  entries,\n  negativeEntries,\n  search_entries,\n  embeddings,\n) => {\n  const mean = category_mean(entries, negativeEntries, embeddings);\n\n  const distances = search_entries.map(entry => {\n    const embeding = embeddings.find(e => e.entry === entry.name);\n    if (embeding) {\n      const dist = vec_dist2(norm_vec(embeding.embed), mean);\n      return { suggestion: entry.name, dist: dist };\n    } else {\n      return { suggestion: entry.name, dist: 2000000 };\n    }\n  });\n  return distances\n    .filter(a => a.dist > 0)\n    .filter(a => !entries.includes(a.suggestion))\n    .filter(a => !negativeEntries.includes(a.suggestion))\n    .sort((a, b) => (a.dist > b.dist ? 1 : -1))\n    .slice(0, 8);\n};\n\nconst combined_word_embedings_for_entry = (\n  entry,\n  word_embedings,\n  norm = false,\n) =>\n  entry.name.split(' ').reduce((full_embed, word) => {\n    const word_embed = word_embedings\n      .filter(embed => embed)\n      .find(we => we.key === word.toLocaleLowerCase());\n\n    if (word_embed) {\n      let rep = word_embed.embedding;\n      if (norm) {\n        rep = norm_vec(rep);\n      }\n\n      if (full_embed.length === 0) {\n        full_embed = rep;\n      } else {\n        full_embed = full_embed.map((v, i) => v + rep[i]);\n      }\n    }\n    return full_embed;\n  }, []);\n\nexport const calc_embedings = entries =>\n  get_embedings_from_server(entries).then(word_embedings =>\n    entries.map(entry => ({\n      entry: entry.name,\n      embed: combined_word_embedings_for_entry(entry, word_embedings),\n    })),\n  );\n","import { calc_embedings } from '../utils/calc_embedings';\nconst uuidv1 = require('uuid/v1');\n\nexport function createMapping(selection, columnID, name, dispatch) {\n  const id = uuidv1();\n  dispatch({\n    type: 'ADD_MAPPING',\n    payload: {\n      name: name,\n      entries: selection,\n      negative_examples: [],\n      column_id: columnID,\n      id,\n    },\n  });\n  return id;\n}\n\nexport function renameMapping(mapping, newName, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      mapping: {\n        name: newName,\n      },\n      id: mapping.id,\n    },\n  });\n}\n\nexport function loadProject(projectDetails, dispatch) {\n  const {\n    project,\n    datasets,\n    entries,\n    columns,\n    mappings,\n    meta_columns,\n  } = projectDetails;\n\n  dispatch({\n    type: 'ADD_OR_REPLACE_PROJECT',\n    payload: project,\n  });\n\n  datasets.forEach(dataset => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_DATASET',\n      payload: dataset,\n    });\n  });\n\n  columns.forEach(column => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_COLUMN',\n      payload: column,\n    });\n  });\n\n  mappings.forEach(mapping => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_MAPPING',\n      payload: mapping,\n    });\n  });\n\n  meta_columns.forEach(mc => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_METACOLUMN',\n      payload: mc,\n    });\n  });\n\n  entries.forEach(entry => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_ENTRY',\n      payload: entry,\n    });\n  });\n}\n\nexport function removeEntryFromMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: mapping.entries.filter(e => e !== entry),\n      },\n    },\n  });\n}\n\nexport function deleteMapping(mapping, dispatch) {\n  dispatch({\n    type: 'REMOVE_MAPPING',\n    payload: mapping.id,\n  });\n}\n\nexport function clearMapping(mapping, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [],\n      },\n    },\n  });\n}\n\nexport function requestEmbedingsForEntries(entries, dispatch) {\n  calc_embedings(entries).then(embeddings => {\n    dispatch({\n      type: 'ADD_EMBEDINGS',\n      payload: embeddings,\n    });\n  });\n}\n\nexport function addNegativeExampleToMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        negative_examples: [...mapping.negative_examples, entry],\n      },\n    },\n  });\n}\nexport function addEntriesToMapping(mapping, entries, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [...mapping.entries, ...entries],\n      },\n    },\n  });\n}\n\nexport function updateMetaColumn(id, changes, dispatch) {\n  dispatch({\n    type: 'UPDATE_META_COLUMN',\n    payload: {\n      id,\n      meta_column: changes,\n    },\n  });\n}\n\nexport function unMergeMetaColumn(meta_column, dispatch) {\n  meta_column.columns.forEach(col_id => {\n    dispatch({\n      type: 'CREATE_META_COLUMN_FROM_COL_ID',\n      payload: {\n        col_id,\n        id: uuidv1(),\n        project_id: meta_column.project_id,\n      },\n    });\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: [meta_column.id],\n  });\n\n  dispatch({\n    type: 'REMOVE_MAPPINGS_FOR_METACOLUMN',\n    payload: meta_column.id,\n  });\n}\n\nexport function mergeMetaColumns(meta_columns, dispatch) {\n  const new_col = meta_columns[0];\n  const ids = meta_columns.map(mc => mc.id);\n\n  meta_columns.slice(1).forEach(mc => {\n    new_col.columns = [...new_col.columns, ...mc.columns];\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: ids,\n  });\n\n  dispatch({\n    type: 'ADD_META_COLUMNS',\n    payload: [new_col],\n  });\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { useStateValue } from '../contexts/app_context';\nimport { useDropzone } from 'react-dropzone';\nimport { faFile } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { loadProject } from '../contexts/actions';\n\nimport {\n  faColumns,\n  faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ProjectModal({ match, history }) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n  const [error,] = useState(null);\n\n  const [project, setProject] = useState(null);\n\n  const onDrop = useCallback(files => {\n    const file = files[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = f => {\n      setProject(JSON.parse(reader.result));\n    };\n  }, []);\n\n  const loadIt = () => {\n    loadProject(project, dispatch);\n    history.goBack();\n  };\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  return (\n    <ReactModal\n      isOpen={true}\n      onRequestClose={onClose}\n      style={{\n        content: { height: '50%', width: '60%', transform: 'translate(25%,15%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}>\n      <div className=\"load-project-modal\">\n        <h1>Load Project</h1>\n        <div className=\"content\">\n          {project ? (\n            <div>\n              <h1>{project.project.name}</h1>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faDatabase}\n                    style={{ marginRight: '20px' }}\n                  />\n                  <h2>Datasets</h2>\n                </header>\n                <p>{project.project.description}</p>\n                {project.datasets.map(d => (\n                  <p>{d.name}</p>\n                ))}\n              </section>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faColumns}\n                    style={{ marginRight: '20px' }}\n                  />\n                  <h2>Coumns</h2>\n                </header>\n                {project.meta_columns.map(mc => (\n                  <p>{mc.name}</p>\n                ))}\n              </section>\n              <button onClick={loadIt}>Load</button>\n            </div>\n          ) : (\n              <div {...getRootProps()}>\n                <div className=\"file-tab\" style={{ cursor: 'p' }}>\n                  <FontAwesomeIcon icon={faFile} />\n                  <input\n                    {...getInputProps({\n                      accept: ['text/csv', 'application/vnd.ms-excel'],\n                    })}\n                  />\n                  {isDragActive ? (\n                    <p>Drop the files here ... </p>\n                  ) : (\n                      <p>\n                        Drag 'n' drop project file here or click to load project\n                  </p>\n                    )}\n                </div>\n                {error && <p>{error}</p>}\n              </div>\n            )}\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function GHPagesRedirect() {\n  const [redirect, setRedirect] = useState(null);\n  useEffect(() => {\n    // This is for dealing with the 404 redirect issue on gh pages\n    var target = sessionStorage.redirect;\n    delete sessionStorage.redirect;\n\n    if (target && target !== window.location.href) {\n      let to = target;\n      if (process.env.PUBLIC_URL) {\n        to =\n          '/' +\n          to\n            .split('/')\n            .slice(4)\n            .join('/');\n      }\n      setRedirect(to);\n    }\n  }, []);\n\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  } else {\n    return <React.Fragment />;\n  }\n}\n","import React, { useState } from 'react';\nimport streamSaver from 'streamsaver';\n\nexport default function ApplyMapping(props) {\n  const { file, columns } = props;\n\n  const [addColumns, setAddColumns] = useState(true);\n  const [status, setStatus] = useState('pending');\n\n  const startProcessing = () => {\n    setStatus('running');\n    const fileStream = streamSaver.createWriteStream('processed.txt', {\n      size: 22,\n    });\n    new Response('StreamSaver is awesome').body.pipeTo(fileStream).then(\n      () => {\n        console.log('SAVED');\n      },\n      () => {\n        console.log('ERROR');\n      },\n    );\n  };\n\n  return (\n    <div className=\"apply-mapping\">\n      {status === 'pending' && (\n        <React.Fragment>\n          <p id={file.name}>{file.name}</p>\n          <div className=\"options\">\n            <p>Applying mappings to {columns.length} columns</p>\n            Add Columns:{' '}\n            <input\n              type=\"checkbox\"\n              checked={addColumns}\n              onChange={e => setAddColumns(e.target.checked)}\n            />\n            Treat Unmapped as Unknown: <input type=\"checkbox\" />\n            <button onClick={startProcessing}>Apply Mapping</button>\n          </div>\n        </React.Fragment>\n      )}\n      {status === 'running' && <h2>Running</h2>}\n      {status === 'done' && <h2>Done</h2>}\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport ApplyMapping from './ApplyMapping'\nimport { useDataset } from '../contexts/app_context'\n\nimport { useDropzone } from 'react-dropzone';\n\nexport default function ApplyMappingsModal({ match, history }) {\n\n  const [files, setFiles] = useState(null);\n  const [error, setError] = useState(null);\n  const { datasetID } = match.params\n\n  const onClose = () => {\n    history.goBack()\n  }\n\n  const { columns, mappings } = useDataset(datasetID);\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFiles(files);\n    } else {\n      setError(\n        \"Smoosher currently only supports CSV's please just upload those!\",\n      );\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <ReactModal isOpen={true} onRequestClose={onClose}>\n      {error && <h1>{error}</h1>}\n\n      {files ? (\n        <div>\n          {files.map(file => (\n            <ApplyMapping\n              file={file}\n              columns={columns}\n              mappings={mappings}\n            />\n\n          ))}\n        </div>\n      ) : (\n          <React.Fragment>\n            <h1>Select files to apply mapping to</h1>\n            <div className=\"file-uploader\">\n              <div {...getRootProps()}>\n                <input\n                  {...getInputProps({\n                    accept: ['text/csv', 'application/vnd.ms-excel'],\n                  })}\n                />\n\n                {isDragActive ? (\n                  <p>Drop the files here ... </p>\n                ) : (\n                    <p>Drag 'n' drop files to apply mapping</p>\n                  )}\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useProject } from '../contexts/app_context';\nimport { exportPythonCode } from '../utils/file_parsing';\n\nexport default function CodeExportModal({ match, history }) {\n  const onClose = () => history.goBack();\n  // const [_, dispatch] = useStateValue();\n  const { projectID } = match.params;\n  const { project, datasets, metaColumns, columns, mappings } = useProject(\n    projectID,\n  );\n\n  const [changeNonMapped, setChangeNonMapped] = useState(false);\n  const [createNewColumns, setCreateNewColumns] = useState(false);\n  const [combineDatasets, setCombineDatasets] = useState(true);\n  const [valueForNonMapped, setValueForNonMapped] = useState('unknown');\n\n  const doExport = () => {\n    const settings = {\n      changeNonMapped,\n      createNewColumns,\n      combineDatasets,\n      valueForNonMapped,\n    };\n\n    exportPythonCode(\n      project,\n      datasets,\n      metaColumns,\n      columns,\n      mappings,\n      settings,\n    );\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '35%', transform: 'translate(0,40%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"code-export-modal\">\n        {project && (\n          <React.Fragment>\n            <div>\n              <h1>{project.name}</h1>\n              <p>Export Code</p>\n            </div>\n            <div className='code-export-options'>\n              <span>\n                Change non mapped entries?\n                <input\n                  type=\"checkbox\"\n                  value={changeNonMapped}\n                  onChange={e => setChangeNonMapped(e.target.checked)}\n                />\n              </span>\n              {changeNonMapped && (\n                <span>\n                  Value for non mapped entries?\n                  <input\n                    type=\"text\"\n                    value={valueForNonMapped}\n                    onChange={e => setValueForNonMapped(e.target.value)}\n                  />{' '}\n                </span>\n              )}\n              <span>\n                Create new columns?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={createNewColumns}\n                  onChange={e => setCreateNewColumns(e.target.checked)}\n                />{' '}\n              </span>\n              <span>\n                Combine datasets in to single file?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={combineDatasets}\n                  onChange={e => setCombineDatasets(e.target.checked)}\n                />{' '}\n              </span>\n            </div>\n\n            <div className={'export-instructions'}>\n              <p>\n                Click export to download a zip file with everything you need to\n                apply your mapping.\n              </p>\n              <p>The code will do the following:</p>\n              <ul>\n                <li>\n                  Load the files you worked on from the \"put_your_files_in_here\"\n                  folder\n                </li>\n                <li>\n                  Combine and rename columns from each dataset as you indicated\n                </li>\n                <li>Apply the new taxonomies you produced to those columns</li>\n                <li>Export the results to the \"results\" folder</li>\n              </ul>\n              <p>\n                The script that does all this is called \"process.py\" you can\n                tweak it to suit your needs\n              </p>\n            </div>\n            <div className=\"buttons\">\n              <button onClick={doExport}>Export</button>\n              <button onClick={onClose}>Cancel</button>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nexport default function TablePreview(props) {\n  const { data } = props;\n\n  const columns = Object.keys(data[0]).map(k => ({ key: k, name: k }));\n  const [rows, setRows] = useState(data);\n\n  const sortRows = (initalRows, sortColumn, sortDirection) => rows => {\n    const comp = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === 'DESC') {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    return sortDirection === 'NONE' ? initalRows : [...rows].sort(comp);\n  };\n\n  if (data.length === 0) {\n    return <h1> No data to show</h1>;\n  }\n\n  return (\n    <ReactDataGrid\n      columns={columns}\n      rowGetter={i => rows[i]}\n      rowsCount={data.length}\n      onGridSort={(sortColumn, sortDirection) =>\n        setRows(sortRows(data, sortColumn, sortDirection))\n      }\n    />\n  );\n}\n\nTablePreview.defaultProps = {\n  data: [],\n  columns: [],\n};\n","import React from 'react';\nimport TablePreview from '../components/TablePreview';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function DatasetPage({ match }) {\n  const datasetID = match.params.datasetID;\n\n  const [{ datasets, columns },] = useStateValue();\n  const dataset = datasets.find(d => d.id === datasetID);\n\n  const columnsForDataset = columns.filter(c => c.dataset_id === datasetID);\n  return dataset ? (\n    <React.Fragment>\n      <div className=\"datatable full_card\">\n        <TablePreview data={dataset.sample} columns={columnsForDataset} />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginTop: '20px',\n          }}>\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n      <h2>Could not find dataset</h2>\n    );\n}\n\n","import React from 'react';\n\nexport default function EntryCard({ entry, selected = false, onToggleSelect }) {\n  return (\n    <div\n      className={`entry-card card ${selected ? 'selected' : ''}`}\n      onClick={() => onToggleSelect(entry)}>\n      <h3>{entry.name}</h3>\n      <p>{entry.count} occurrences</p>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\nimport { faSortDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nexport default function OrderBySelector({ onChange }) {\n  const showDropDown = () => {\n    setShowDropdown(true)\n  }\n\n  const selectOption = (option) => {\n    setShowDropdown(false)\n    setSelected(option)\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  const [show, setShowDropdown] = useState(false)\n  const [selected, setSelected] = useState(\"Alphabetically\")\n\n  const options = [\"Alphabetically\", \"Occurances\"]\n\n  return (\n    <div className=\"order-by\">\n      <p>Order By: </p>\n      <ul>\n        <li onClick={showDropDown}>{selected} <FontAwesomeIcon icon={faSortDown} /> </li>\n        {options.filter(o => o !== selected && show).map(o => <li\n          onClick={() => selectOption(o)}\n        >{o}</li>)}\n      </ul>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function EntryPill({entry, onRemove}) {\n  return (\n    <span className=\"entry-pill\">\n      <span>{entry}</span>\n      <FontAwesomeIcon icon={faTimes} onClick={() => onRemove(entry)} />\n    </span>\n  );\n}","import React from 'react'\nimport EntryPill from './EntryPill'\n\nexport default function SelectedEntriesList({ selection, onRemoveSelection, onClearAll }) {\n    return (\n        <div className='selected-entry-list'>\n            {selection.length === 0 ?\n                <span>Click on entries to select them</span>\n                :\n                <span>Selections ({selection.length}):</span>\n            }\n            <ul >\n                {selection.reverse().map(entry => <li><EntryPill onRemove={onRemoveSelection} entry={entry} /> </li>)}\n            </ul>\n            {(selection.length > 0) &&\n                <button className='clear-all text-button' onClick={onClearAll}>Clear All</button>\n            }\n        </div>\n    )\n}\n\nSelectedEntriesList.defaultProps = {\n    selection: []\n}\n\n","import React, { useState } from 'react';\nimport EntryCard from './EntryCard';\nimport OrderBySelector from './OrderBySelector';\nimport { faGlassCheers } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SelectedEntriesList from './SelectedEntriesList'\n\nexport default function EntryTable({\n  entries,\n  style,\n  onToggleSelection,\n  onClearSelection,\n  selection,\n}) {\n  const [order, setOrder] = useState('Occurances');\n\n  const toggleSelection = entry => {\n    if (onToggleSelection) {\n      onToggleSelection(entry);\n    }\n  };\n\n  const orderKey = { Alphabetically: 'name', Occurances: 'count' }[order];\n\n  let orderedEntries = entries.sort((a, b) =>\n    a[orderKey] > b[orderKey] ? 1 : -1,\n  );\n\n  if (orderKey === 'count') {\n    orderedEntries.reverse();\n  }\n\n  return (\n    <div style={style} className=\"entry-table\">\n      <div className=\"entry-table-filters\">\n        <SelectedEntriesList selection={selection} onRemoveSelection={toggleSelection} onClearAll={onClearSelection} />\n        <OrderBySelector onChange={order => setOrder(order)} />\n\n      </div>\n      <div className=\"entry-table-entries\">\n        {orderedEntries.length > 0 ? (\n          orderedEntries.map(entry => (\n            <EntryCard\n              key={entry.name}\n              entry={entry}\n              selected={selection.includes(entry.name)}\n              onToggleSelect={toggleSelection}\n            />\n          ))\n        ) : (\n            <div className=\"all-done\">\n              <h1>You really smooshed the crap out of that column.</h1>\n              <h1>\n                {[...Array(5)].map(() => (\n                  <FontAwesomeIcon icon={faGlassCheers} />\n                ))}\n              </h1>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\nEntryTable.defaultProps = {\n  style: {},\n};\n","import React, {useState,useEffect} from 'react'\n\nimport {faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n\nexport default function EditableText({text, onUpdate}){\n  const [localText, setLocalText] = useState(text)\n  const [editing, setEditing] = useState(false)\n\n  useEffect(()=>{\n     setLocalText(text)\n  },[text])\n\n  return  editing ? \n      <input onChange={(e)=>setLocalText(e.target.value)} onBlur={()=> { setEditing(false); onUpdate(localText)  } } value={localText} /> \n    : \n    \n      <h3>\n          {localText} <FontAwesomeIcon onClick={()=>setEditing(true)} icon={faEdit} />\n      </h3>\n    \n    \n}\n","import React, { useState } from 'react';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport EditableText from './EditableText';\n\nexport default function MappingFocus({\n  mapping,\n  onRemoveEntryFromMapping,\n  onRenameMapping,\n  onClearMapping,\n  onDeleteMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  const [suggestionType, setSuggestionType] = useState('text');\n\n  const removeEntryFromMapping = entry => {\n    if (onRemoveEntryFromMapping) {\n      onRemoveEntryFromMapping(entry, mapping);\n    }\n  };\n\n  const addSuggestionToMapping = entry => {\n    if (onAddSuggestionToMapping) {\n      onAddSuggestionToMapping(entry.suggestion);\n    }\n  };\n\n  const updateMappingName = name => {\n    if (onRenameMapping) {\n      onRenameMapping(mapping, name);\n    }\n  };\n\n  const clearMapping = name => {\n    if (onClearMapping) {\n      onClearMapping(mapping);\n    }\n  };\n\n  const deleteMapping = name => {\n    if (onDeleteMapping) {\n      onDeleteMapping(mapping);\n    }\n  };\n\n  const addNegativeExampleToMapping = (entry) => {\n\n    if (onAddNegativeExampleToMapping) {\n      onAddNegativeExampleToMapping(entry.suggestion)\n    }\n  }\n\n  const suggestionsByType = suggestions[suggestionType];\n\n  return (\n    <div className=\"mapping-focus\" style={style}>\n      <EditableText text={mapping.name} onUpdate={updateMappingName} />\n      <div className=\"include-list\">\n        <h4>Includes</h4>\n        <ul>\n          {mapping.entries.map(entry => (\n            <li>\n              {entry}{' '}\n              <button\n                onClick={() => removeEntryFromMapping(entry)}\n                className={'small-button round-button'}>\n                <FontAwesomeIcon icon={faTimes} />{' '}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"keyword-match\">\n        <h4>\n          Suggestions by:{' '}\n          <span\n            style={\n              suggestionType === 'text'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('text')}>\n            text\n          </span>{' '}\n          /{' '}\n          <span\n            style={\n              suggestionType === 'meaning'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('meaning')}>\n            meaning\n          </span>\n        </h4>\n        <ul>\n          {suggestionsByType.map(entry => (\n            <li>\n              {entry.suggestion}{' '}\n              <div className=\"SuggestionActionButtons\">\n                <button\n                  className={'small-button round-button'}\n                  onClick={() => addSuggestionToMapping(entry)}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </button>\n                <button className={'small-button round-button'}\n                  onClick={() => addNegativeExampleToMapping(entry)}\n                >\n                  <FontAwesomeIcon\n                    icon={faTimes} />\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className={'ActionButtons'}>\n        <button onClick={clearMapping} className={'mid-button'}>\n          Clear Mapping\n        </button>\n        <button onClick={deleteMapping} className={'mid-button'}>\n          Delete Mapping\n        </button>\n      </div>\n    </div>\n  );\n}\n\nMappingFocus.defaultProps = {\n  style: {},\n  meaningSuggestions: [],\n  textSuggestions: [],\n};\n","import React from 'react';\n\nexport default function MappingsMenu({\n  mappings = [],\n  selected,\n  onMappingSelected,\n  style\n}) {\n\n  const mappingSelected = (mapping) => {\n    if (onMappingSelected) {\n      onMappingSelected(mapping)\n    }\n  }\n\n  return (\n    <div class=\"mappings-menu\" style={style}>\n      <h3>\n        Merged Groups <span class=\"Pill\">{mappings.length}</span>{' '}\n      </h3>\n      <ul>\n        {mappings.map(mapping => (\n          <li\n            className={\n              selected && mapping.name === selected.name ? 'selected' : ''\n            }\n            onClick={() => mappingSelected(mapping)}>\n            {mapping.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nMappingsMenu.defaultProps = {\n  mappings: [],\n  style: {},\n};\n","import React from 'react';\nimport MappingFocus from './MappingFocus';\nimport MappingsMenu from './MappingsMenu';\n\nexport default function MappingsArea({\n  mappings,\n  selection,\n  onMappingSelected,\n  onRenameMapping,\n  onRemoveEntryFromMapping,\n  onDeleteMapping,\n  onClearMapping,\n  onAddEntryToMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  return (\n    <div className=\"mappings-area\" style={style}>\n      <MappingsMenu\n        mappings={mappings}\n        selected={selection}\n        onMappingSelected={onMappingSelected}\n      />\n      {selection && (\n        <MappingFocus\n          mapping={selection}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onRenameMapping={onRenameMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          onAddEntryToMapping={onAddEntryToMapping}\n          onAddSuggestionToMapping={onAddSuggestionToMapping}\n          suggestions={suggestions}\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n        />\n      )}\n    </div>\n  );\n}\n\nMappingsArea.defaultProps = {\n  style: {},\n};\n","import * as lev from 'fast-levenshtein';\n\n\nconst cacheSimilarities = {};\n\nexport const suggestForMapping = (mapping, entries) => {\n  const res = [];\n  mapping.forEach(mapping_entry => {\n    entries.forEach(entry => {\n      const cacheKey = [mapping_entry, entry.name].join('_');\n\n      if (!mapping.includes(entry)) {\n        if (cacheSimilarities[cacheKey]) {\n          res.push({\n            suggestion: entry.name,\n            score: cacheSimilarities[cacheKey],\n          });\n        } else {\n          const dist = lev.get(mapping_entry, entry.name);\n          cacheSimilarities[cacheKey] = dist;\n          res.push({ suggestion: entry.name, score: dist });\n        }\n      }\n    });\n  });\n  return res.sort((a, b) => (a.score > b.score ? 1 : -1)).slice(0, 5);\n};\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport EntryTable from '../components/EntryTable';\nimport MappingsArea from '../components/MappingsArea';\nimport useFuse from 'react-use-fuse';\nimport { suggestForMapping } from '../utils/text_clustering';\nimport { most_similar_to_category_mean } from '../utils/calc_embedings';\n\nimport {\n  createMapping,\n  renameMapping,\n  addEntriesToMapping,\n  addNegativeExampleToMapping,\n  removeEntryFromMapping,\n  deleteMapping,\n  clearMapping,\n  requestEmbedingsForEntries,\n} from '../contexts/actions';\nimport { useStateValue, useMetaColumn } from '../contexts/app_context';\n\nexport default function ColumnPage({ match }) {\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [selectedMappingID, setSelectedMappingID] = useState(null);\n  const [entrySelection, setEntrySelection] = useState([]);\n  const { columnID } = match.params;\n\n  const { entries, mappings, embeddings, dispatch } = useMetaColumn(columnID);\n  const selectedMapping = mappings.find(m => m.id === selectedMappingID);\n\n  useEffect(() => {\n    if (entries) {\n      requestEmbedingsForEntries(entries, dispatch);\n    }\n  }, [JSON.stringify(entries)]);\n\n  const non_mapped_entries = entries.filter(\n    entry => !mappings.some(m => m.entries.includes(entry.name)),\n  );\n\n  const { result, search } = useFuse({\n    data: non_mapped_entries,\n    options: {\n      shouldSort: true,\n      findAllMatches: true,\n      keys: ['name'],\n      caseSensitive: false,\n    },\n  });\n\n  const filteredEntries = result;\n\n  const toggleEnrtySelection = entry => {\n    const entryName = typeof entry == 'string' ? entry : entry.name;\n\n    if (entrySelection.includes(entryName)) {\n      setEntrySelection(entrySelection.filter(s => s !== entryName));\n    } else {\n      setEntrySelection([...entrySelection, entryName]);\n    }\n  };\n\n  const onCreateMapping = () => {\n    const id = createMapping(\n      entrySelection,\n      columnID,\n      entrySelection[0],\n      dispatch,\n    );\n    setEntrySelection([]);\n    setSelectedMappingID(id);\n  };\n\n  const onRenameMapping = (mapping, name) => {\n    renameMapping(mapping, name, dispatch);\n  };\n\n  const onRemoveEntryFromMapping = (entry, mapping) => {\n    removeEntryFromMapping(mapping, entry, dispatch);\n  };\n\n  const onClearMapping = mapping => {\n    clearMapping(mapping, dispatch);\n  };\n\n  const onDeleteMapping = mapping => {\n    deleteMapping(mapping, dispatch);\n  };\n\n  const clearSelection = () => {\n    setEntrySelection([]);\n  };\n\n  const onAddEntriesToMapping = (\n    entriesToAdd,\n    shouldClearSelection = false,\n  ) => {\n    addEntriesToMapping(selectedMapping, entriesToAdd, dispatch);\n    if (shouldClearSelection) {\n      clearSelection();\n    }\n  };\n\n  const onAddNegativeExampleToMapping = entry => {\n    addNegativeExampleToMapping(selectedMapping, entry, dispatch);\n  };\n\n  //Remove any entries that are already in a mapping\n\n  const updateSearch = text => {\n    setSearchTerm(text);\n    search(text);\n  };\n\n  const suggestionsAvaliable = embeddings && selectedMapping;\n\n  const meaningSuggestions = suggestionsAvaliable\n    ? most_similar_to_category_mean(\n      selectedMapping.entries,\n      selectedMapping.negative_examples,\n      non_mapped_entries,\n      embeddings,\n    )\n    : [];\n\n  const textSuggestions = suggestionsAvaliable\n    ? suggestForMapping(selectedMapping.entries, non_mapped_entries)\n    : [];\n\n  const suggestions = { text: textSuggestions, meaning: meaningSuggestions };\n\n  const { cache_loaded } = useStateValue();\n\n  const stats = {\n    mappings: mappings.length,\n    total_rows: entries.reduce((total, e) => total + e.count, 0),\n    total_mapped_rows: mappings\n      .map(m =>\n        m.entries.reduce(\n          (total, entry) => total + entries.find(e => e.name === entry).count,\n          0,\n        ),\n      )\n      .reduce((total, map) => total + map, 0),\n    total_entries_in_mappings: mappings.reduce(\n      (total, m) => total + m.entries.length,\n      0,\n    ),\n  };\n\n  if (!cache_loaded) {\n    return (\n      <div className=\"column-page\">\n        <SearchBar\n          style={{ gridArea: 'header', width: '50%', justifySelf: 'center' }}\n          onChange={updateSearch}\n          onClear={() => updateSearch('')}\n          value={searchTerm}\n          prompt=\"Search for entries by typing here...\"\n        />\n        <EntryTable\n          entries={filteredEntries}\n          style={{\n            gridArea: 'table',\n            overflowY: 'hidden',\n            width: '100%',\n            height: '100%',\n          }}\n          onToggleSelection={toggleEnrtySelection}\n          selection={entrySelection}\n          onClearSelection={clearSelection}\n          {...entries}\n        />\n        <div className=\"stats-and-actions\">\n          <div className=\"stats\">\n            <p>\n              <span>{stats.total_entries_in_mappings}</span> /{' '}\n              <span>{entries.length}</span> entries |{' '}\n              <span>{stats.total_mapped_rows}</span> /{' '}\n              <span>{stats.total_rows}</span> rows\n            </p>\n          </div>\n          <div className=\"entry-action-buttons\">\n            <button\n              disabled={entrySelection.length === 0}\n              onClick={onCreateMapping}>\n              New Mapping {entrySelection.length}\n            </button>\n            <button\n              disabled={!(entrySelection.length > 0 && selectedMappingID)}\n              onClick={() => onAddEntriesToMapping(entrySelection, true)}>\n              Add to Mapping\n            </button>\n            <button\n              onClick={() =>\n                createMapping(non_mapped_entries, columnID, 'Other', dispatch)\n              }>\n              Map Remaining To Other\n            </button>\n          </div>\n        </div>\n        <MappingsArea\n          mappings={mappings}\n          selection={mappings.find(m => m.id === selectedMappingID)}\n          style={{ gridArea: 'mappings' }}\n          onMappingSelected={s => setSelectedMappingID(s.id)}\n          onRenameMapping={onRenameMapping}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          suggestions={suggestions}\n          onAddSuggestionToMapping={suggestion =>\n            onAddEntriesToMapping([suggestion])\n          }\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n          {...mappings}\n          syle={{ height: '300px' }}\n        />\n      </div>\n    );\n  } else {\n    return <h1>Loading</h1>;\n  }\n}\n","import React from 'react';\nimport {\n  faColumns,\n  faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectCard({ project, stats }) {\n  return (\n    <div className=\"project-card card\">\n      <h2 className=\"title\">{project.name}</h2>\n      <p className=\"description\">{project.description}</p>\n      <div className=\"project-card-stats\">\n        <span>\n          {stats.columns} <FontAwesomeIcon icon={faColumns} />\n        </span>\n        <span>\n          {stats.datasets} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n        <span>\n          {stats.meta_columns} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport const EmptyProjectCard = ({ prompt, icon }) => (\n  <div className=\"project-card card new-project-card\">\n    <h2 className=\"title\">{prompt}</h2>\n    <FontAwesomeIcon icon={icon} size={'3x'} />\n  </div>\n);\n","import React from 'react';\nimport ProjectCard, { EmptyProjectCard } from '../components/ProjectCard';\nimport { useProjectStats, useStorage } from '../contexts/app_context';\nimport { Link } from 'react-router-dom';\n\nimport { faPlus, faUpload } from '@fortawesome/free-solid-svg-icons';\n\nexport default function WelcomePage() {\n  const projects = useProjectStats();\n  const { quota, usage } = useStorage();\n\n  return (\n    <div className=\"welcome-page page\">\n      <header className=\"welcome-page-header\">\n        <h1 className=\"large-title-header\">smooshr</h1>\n        <p>Wrangle those messy datasets</p>\n        <p className=\"feedback\">\n          We need your help to make smooshr better! Try out our{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://docs.google.com/document/d/1ANrFqNZKCYR4LogOKPvYVHZAbp1iiK3gpknPlNZF6Lw/\">\n            tutorial\n          </a>{' '}\n          and leave your thoughts on our{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n            feedback form\n          </a>\n        </p>\n      </header>\n      {projects && (\n        <div className=\"projects-area\">\n          <div className=\"\">\n            <div className=\"region-header\">\n              <h2>local projects</h2>\n            </div>\n            <div className=\"region-list\">\n              {projects.map(p => (\n                <Link to={`/project/${p.project.id}`}>\n                  <ProjectCard project={p.project} stats={p.stats} />\n                </Link>\n              ))}\n              <Link to={'/new_project'}>\n                <EmptyProjectCard prompt={'New Project'} icon={faPlus} />\n              </Link>\n              <Link to={'/load_project'}>\n                <EmptyProjectCard prompt={'Load Project'} icon={faUpload} />\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"storage\">\n        <p>smooshr processes and stores all data locally on your machine.</p>\n        {quota && (\n          <p>\n            It is currently using {usage.toLocaleString()} Mb of{' '}\n            {quota.toLocaleString()} Mb.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditableText from './EditableText';\nimport { Link } from 'react-router-dom';\n\nexport default function ColumnCard({\n  name,\n  description,\n  fromColumns,\n  selected,\n  onClick,\n  onUpdate,\n  onUnmerge,\n  link,\n}) {\n  const totalUnique = fromColumns.reduce((tot, c) => tot + c.unique, 0);\n  return (\n    <div\n      onClick={onClick}\n      className={`column-card card ${selected ? 'selected' : ''}`}>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}>\n        <EditableText text={name} onUpdate={onUpdate} />\n        <h2>{totalUnique}</h2>\n      </div>\n      <p className=\"description\">{description}</p>\n\n      {fromColumns.map(c => (\n        <p key={c.name}>\n          {c.name} | {c.dataset.name}\n        </p>\n      ))}\n      <div className=\"column-action-buttons\">\n        {fromColumns.length > 1 && (\n          <button onClick={onUnmerge}>Split Column</button>\n        )}\n        <Link className=\"work-on-taxonomy-button\" to={link}>\n          <button>Work on taxonomy</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useStateValue, useProject } from '../contexts/app_context';\nimport { Link } from 'react-router-dom';\nimport ColumnCard from '../components/ColumnCard';\nimport TablePreview from '../components/TablePreview';\nimport {\n  mergeMetaColumns,\n  updateMetaColumn,\n  unMergeMetaColumn,\n} from '../contexts/actions';\nimport {\n  saveProject,\n} from '../utils/file_parsing';\n\nimport {\n  faColumns,\n  faDatabase,\n  faFistRaised,\n  faInfoCircle,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectPage(props) {\n  const { match, history } = props;\n  const { projectID } = match.params;\n  const {\n    project,\n    datasets,\n    metaColumns,\n    columns,\n    mappings,\n    entries,\n    deleteProject,\n  } = useProject(projectID);\n\n  const [selectedDatasetName, setSelectedDatasetName] = useState(\n    datasets && datasets.length > 0 ? datasets[0].name : null,\n  );\n\n  // Used to set the selected dataset to the first one on inital load\n  useEffect(() => {\n    if (datasets.length > 0 && !selectedDatasetName) {\n      setSelectedDatasetName(datasets[0].name);\n    }\n  }, [datasets, selectedDatasetName]);\n\n  const selectedDataset = datasets.find(d => d.name === selectedDatasetName);\n\n  const [, dispatch] = useStateValue();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n\n  const onSaveProject = () => {\n    saveProject(\n      project,\n      datasets,\n      metaColumns,\n      columns,\n      mappings,\n      entries,\n      {},\n    );\n  };\n\n  const changeMCName = (mc, name) => {\n    updateMetaColumn(mc.id, { name }, dispatch);\n  };\n  const deleteThisProject = () => {\n    deleteProject();\n    history.push('/');\n  };\n\n  const toggleSelectedColumn = id => {\n    if (selectedColumns.includes(id)) {\n      setSelectedColumns(selectedColumns.filter(cid => cid !== id));\n    } else {\n      setSelectedColumns([...selectedColumns, id]);\n    }\n  };\n\n  const seperateMetaDataColumn = id => {\n    unMergeMetaColumn(metaColumns.find(mc => mc.id === id), dispatch);\n  };\n\n  const dereferenceColumn = colID => {\n    const column = columns.find(c => c.id === colID);\n    return {\n      dataset: datasets.find(d => d.id === column.dataset_id),\n      name: column.name,\n      id: column.id,\n      unique: column.unique,\n    };\n  };\n\n  const mergeColumns = () => {\n    const toMerge = metaColumns.filter(mc => selectedColumns.includes(mc.id));\n    mergeMetaColumns(toMerge, dispatch);\n    setSelectedColumns([]);\n  };\n\n  return (\n    <div className=\"project-page page\">\n      {project ? (\n        <React.Fragment>\n          <div className=\"actions\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faFistRaised}\n                  style={{ marginRight: '20px' }}\n                />\n                Actions\n              </h2>\n\n              <div className=\"\">\n                <button onClick={onSaveProject}>Export Project</button>\n                <Link to={`/project/${projectID}/export`}>\n                  <button>Export Python code</button>\n                </Link>\n                <button onClick={deleteThisProject}>Delete Project</button>\n              </div>\n            </div>\n          </div>\n\n\n\n          <div className=\"metadata\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faInfoCircle}\n                  style={{ marginRight: '20px' }}\n                />\n                Metadata\n              </h2>\n              <div className=\"properties\">\n                <p>Name: {project.name}</p>\n                <p>Description: {project.description}</p>\n\n              </div>\n            </div>\n          </div>\n\n          <div className=\"columns region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faColumns}\n                  style={{ marginRight: '20px' }}\n                />\n                Columns\n              </h2>\n              {selectedColumns.length > 0 ? (\n                <button\n                  onClick={\n                    mergeColumns\n                  }>{`Merge ${selectedColumns.length} columns`}</button>\n              ) : (\n                  ''\n                )}\n            </div>\n            <div className=\"region-list column-list\">\n              {metaColumns.map(mc => (\n                <ColumnCard\n                  name={mc.name}\n                  description={mc.description}\n                  fromColumns={mc.columns.map(dereferenceColumn)}\n                  selected={selectedColumns.includes(mc.id)}\n                  onClick={() => toggleSelectedColumn(mc.id)}\n                  onUpdate={newName => changeMCName(mc, newName)}\n                  onUnmerge={() => seperateMetaDataColumn(mc.id)}\n                  link={`/project/${project.id}/column/${mc.id}`}\n                  key={mc.id}\n                />\n              ))}\n            </div>\n          </div>\n\n          <div className=\"datasets region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faDatabase}\n                  style={{ marginRight: '20px' }}\n                />\n                Datasets\n              </h2>\n            </div>\n            <div className='dataset-table-view'>\n              <div className=\"dataset-tabs\">\n                {datasets.map((dataset, index) => (\n                  <p\n                    key={dataset.name}\n                    className={\n                      selectedDatasetName === dataset.name\n                        ? 'selected-dataset dataset-tab'\n                        : 'dataset-tab'\n                    }\n                    onClick={() => setSelectedDatasetName(dataset.name)}>\n                    <span className='dataset-number'>{index + 1}</span> <span className='dataset-name'>{dataset.name}</span>\n                  </p>\n                ))}\n                <p className=\"final-dataset dataset-tab\">Result</p>\n                <div className=\"spacer\" />\n                <Link\n                  to={`/project/${projectID}/add_datasets`}\n                  className=\"add-dataset dataset-tab\">\n                  <FontAwesomeIcon icon={faPlus} />\n                  <span className='dataset-name'>Add Dataset</span>\n                </Link>\n              </div>\n              <div className='table'>\n                {datasets.length > 0 && selectedDataset && (\n                  <TablePreview\n                    data={selectedDataset.sample}\n                    columns={selectedDataset.columns}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n        </React.Fragment>\n      ) : (\n          <h1>Project not found</h1>\n        )}\n    </div>\n  );\n}\n","import React from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer';\nimport UploadModal from './components/UploadModal';\nimport ProjectModal from './components/ProjectModal';\nimport LoadProjectModal from './components/LoadProjectModal';\nimport GHPagesRedirect from './components/GHPagesRedirect';\nimport ShowApplyMappingsModal from './components/ApplyMappingsModal';\nimport CodeExportModal from './components/CodeExportModal';\nimport DatasetPage from './pages/DatasetPage';\nimport ColumnPage from './pages/ColumnPage';\nimport WelcomePage from './pages/WelcomePage';\nimport ProjectPage from './pages/ProjectPage';\nimport 'typeface-lato';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.scss';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <GHPagesRedirect />\n      <div className=\"App\">\n        <div className=\"main\">\n          <Route\n            path=\"/project/:projectID/dataset/:datasetID\"\n            exact={true}\n            component={DatasetPage}\n          />\n          <Route\n            path=\"/project/:projectID/column/:columnID\"\n            exact={true}\n            component={ColumnPage}\n          />\n          <Route\n            path=\"/project/:projectID\"\n            exact={true}\n            component={ProjectPage}\n          />\n          <Route path=\"/\" exact={true} component={WelcomePage} />\n        </div>\n        <Footer />\n\n        <Route path=\"/\" component={Header} />\n\n        <Route path=\"/new_project\" component={ProjectModal} />\n        <Route path=\"/load_project\" component={LoadProjectModal} />\n\n        <Route path=\"/project/:projectID/export\" component={CodeExportModal} />\n        <Route\n          path=\"/project/:projectID/add_datasets\"\n          component={UploadModal}\n        />\n\n        <Route\n          path=\"/dataset/:datasetID/apply\"\n          component={ShowApplyMappingsModal}\n        />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './contexts/app_context'\n\nReactDOM.render(\n<StateProvider>\n  <App />\n</StateProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
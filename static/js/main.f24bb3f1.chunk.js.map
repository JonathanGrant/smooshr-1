{"version":3,"sources":["components/Social.js","components/Nav.js","components/Header.js","components/TwoSigmaLogo.js","components/Footer.js","utils/file_parsing.js","components/ProgressBar.js","components/FileSnapshot.js","components/Tabs.js","components/SearchBar.js","components/OpenDataSearcher.js","components/FileLoader.js","contexts/app_context.js","components/UploadModal.js","components/ProjectModal.js","utils/calc_embedings.js","contexts/actions.js","components/LoadProjectModal.js","components/GHPagesRedirect.js","components/ApplyMapping.js","components/ApplyMappingsModal.js","components/CodeExportModal.js","utils/python_file.js","components/TablePreview.js","pages/DatasetPage.js","components/EntryCard.js","components/OrderBySelector.js","components/EntryPill.js","components/SelectedEntriesList.js","components/EntryTable.js","components/EditableText.js","components/MappingFocus.js","components/MappingsMenu.js","components/MappingsArea.js","utils/text_clustering.js","pages/ColumnPage.js","components/ProjectCard.js","pages/WelcomePage.js","pages/AboutPage.js","components/ColumnCard.js","pages/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["Social","className","href","target","rel","icon","faTwitter","faMedium","faGithub","Nav","useState","showMenu","setShowMenu","toggleMenu","faBars","onClick","faTimes","to","Header","history","match","style","display","alignItems","alt","src","process","TwoSigmaLogo","width","height","viewBox","xmlns","id","d","fill","fill-rule","transform","Footer","uuidv1","require","createJSONMapping","project","datasets","meta_columns","columns","mappings","settings","projectJSON","name","description","make_col_mappings","col_renames","forEach","mc","map","cID","find","c","filter","dataset_id","rc","datasetsJSON","type","file","ref","rows","column_renames","mappingsJSON","applicableMappings","m","column_id","mapping","entries","ProgressBar","total","value","toPrecision","FileSnapshot","onAddDataset","setColumns","dataset","setDataset","setEntries","includedCols","setIncludedCols","progress","setProgress","status","setStatus","displayEntries","useMemo","reduce","res","col","colEntries","e","slice","extra","length","useEffect","onProgress","report_progress_every","sample_rows","max_unique","Promise","resolve","reject","no_rows","set_dict","sample","exceded","columnCounts","fileSize","size","split","Papa","parse","worker","header","download","step","row","push","data","meta","fields","f","rows_read","bytes_read","cursor","total_size","val","includes","error","console","log","complete","Object","keys","field","unique","key","count","row_count","parseFileForPreview","then","result","Fragment","toLocaleString","column","checked","onChange","columnID","join","cols","focusCol","ents","Tabs","options","selected","onSelected","option","SearchBar","prompt","faSearch","placeholder","OpneDataSearcher","onDataset","searchTerm","setSearchTerm","searchResults","setSearchResults","domain","fetch","json","results","catch","err","marginBottom","text","resource","permalink","faExternalLinkAlt","onSelect","faDownload","FileLoader","filesPreview","setFilesPreview","setError","url","setURL","columnSelections","setColumnSelections","selectedTab","setSelectedTab","submitFromURL","submitFromOpenData","onDrop","useCallback","files","every","useDropzone","getRootProps","getInputProps","isDragActive","tab","disabled","faFile","accept","tabContent","defaultProps","StateContext","createContext","db","Dexie","version","stores","state","initalState","projects","embeddings","metaColumns","showUploadModal","showApplyMappingsModal","cache_loaded","storage_stats","persisting","add_or_replace","candidate","collection","id_col","item","reducer","action","payload","col_id","project_id","p","entry","meta_column","StateProvider","children","useReducer","dispatch","put","JSON","stringify","navigator","storage","estimate","estimation","quota","usage","get","cachedState","persist","persistResult","Provider","useStateValue","useContext","useProject","projectID","metaColumnIds","colIDs","ids","columnIds","deleteProject","UploadModal","params","onClose","goBack","overlayClassName","isOpen","onRequestClose","newDataset","ProjectModal","setName","setDescription","norm_vec","vec","mag","Math","sqrt","v","vec_mag","most_similar_to_category_mean","negativeEntries","search_entries","mean","entry_embeddings","emb","a","embed","negative_embeddings","total_vec","concat","weight","i","category_mean","v1","v2","embeding","dist","index","suggestion","sort","b","combined_word_embedings_for_entry","word_embedings","norm","full_embed","word","word_embed","we","toLocaleLowerCase","rep","embedding","calc_embedings","unique_words","Set","add","method","body","Array","from","w","toLowerCase","replace","headers","r","get_embedings_from_server","createMapping","selection","negative_examples","addEntriesToMapping","setProject","reader","FileReader","readAsText","onload","flexDirection","faDatabase","marginRight","faColumns","projectDetails","loadProject","GHPagesRedirect","redirect","setRedirect","sessionStorage","window","location","ApplyMapping","props","addColumns","setAddColumns","fileStream","streamSaver","createWriteStream","Response","pipeTo","ApplyMappingsModal","setFiles","datasetID","columnIDs","useDataset","CodeExportModal","changeNonMapped","setChangeNonMapped","createNewColumns","setCreateNewColumns","combineDatasets","setCombineDatasets","valueForNonMapped","setValueForNonMapped","output_file","recipe_name","slugify","output_data_name","recipy","python_code","zip","JSZip","folder","generateAsync","content","saveAs","exportPythonCode","TablePreview","k","setRows","rowGetter","rowsCount","onGridSort","sortColumn","sortDirection","initalRows","sortRows","DatasetPage","columnsForDataset","justifyContent","marginTop","EntryCard","onToggleSelect","OrderBySelector","show","setShowDropdown","setSelected","faSortDown","o","EntryPill","onRemove","SelectedEntriesList","onRemoveSelection","onClearAll","reverse","EntryTable","onToggleSelection","onClearSelection","order","setOrder","toggleSelection","orderKey","Alphabetically","Occurances","orderedEntries","faGlassCheers","EditableText","onUpdate","localText","setLocalText","editing","setEditing","onBlur","faEdit","MappingFocus","onRemoveEntryFromMapping","onRenameMapping","onClearMapping","onDeleteMapping","onAddSuggestionToMapping","onAddNegativeExampleToMapping","suggestions","suggestionType","setSuggestionType","suggestionsByType","removeEntryFromMapping","fontWeight","addSuggestionToMapping","faCheck","addNegativeExampleToMapping","MappingsMenu","onMappingSelected","class","mappingSelected","MappingsArea","onAddEntryToMapping","meaningSuggestions","textSuggestions","cacheSimilarities","ColumnPage","selectedMappingID","setSelectedMappingID","entrySelection","setEntrySelection","metaColumn","embeggins","entryNames","mergedEntry","ec","useMetaColumn","selectedMapping","requestEmbedingsForEntries","non_mapped_entries","some","useFuse","shouldSort","findAllMatches","caseSensitive","search","filteredEntries","clearSelection","onAddEntriesToMapping","entriesToAdd","shouldClearSelection","updateSearch","suggestionsAvaliable","mapping_entry","cacheKey","score","lev","suggestForMapping","meaning","stats","total_rows","total_mapped_rows","total_entries_in_mappings","gridArea","justifySelf","onClear","overflowY","entryName","s","newName","renameMapping","deleteMapping","clearMapping","syle","ProjectCard","EmptyProjectCard","WelcomePage","project_datasets","project_columns","project_meta_columns","useProjectStats","useStorage","faPlus","faUpload","AboutPage","ColumnCard","fromColumns","onUnmerge","link","totalUnique","tot","ProjectPage","selectedDatasetName","setSelectedDatasetName","selectedDataset","selectedColumns","setSelectedColumns","seperateMetaDataColumn","unMergeMetaColumn","dereferenceColumn","colID","faFistRaised","output_name","blob","Blob","saveProject","faInfoCircle","new_col","mergeMetaColumns","cid","changes","updateMetaColumn","changeMCName","App","basename","path","exact","component","LoadProjectModal","ShowApplyMappingsModal","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oQAUe,SAASA,IAEpB,OACI,yBAAKC,UAAU,UACX,uBAAGC,KAAK,2CAA2CC,OAAO,SACtDC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAMC,OAE3B,uBAAGJ,KAAK,gCAAgCC,OAAO,SAC3CC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAME,OAE3B,uBAAGL,KAAK,kCAAkCC,OAAO,QAC7CC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAMG,Q,WChBxB,SAASC,IAAO,IAAD,EACMC,oBAAS,GADf,mBACnBC,EADmB,KACTC,EADS,KAEpBC,EAAa,kBAAMD,GAAaD,IACtC,OACI,yBAAKV,UAAU,YACX,kBAAC,IAAD,CAAiBA,UAAU,iBAAiBI,KAAMS,IAC9CC,QAASF,IAEb,yBAAKZ,UAAS,qBAAgBU,EAAW,GAAK,WAC1C,kBAAC,IAAD,CAAiBV,UAAU,kBAAkBI,KAAMW,IAASD,QAASF,IACrE,kBAAC,IAAD,CAAME,QAASF,EAAYI,GAAG,KAA9B,YACA,kBAAC,IAAD,CAAMF,QAASF,EAAYI,GAAG,UAA9B,SACA,uBAAGF,QAASF,EAAYV,OAAO,SAASC,IAAI,sBAAsBF,KAAK,0CAAvE,YAIA,kBAACF,EAAD,QCvBD,SAASkB,EAAT,GAAoC,EAAlBC,QAAkB,EAATC,MACxC,OACE,yBAAKnB,UAAU,UACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAMoB,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAYN,GAAI,KAC1D,yBAAKO,IAAK,oBAAqBC,IAAG,UAAKC,WAAL,yBAAqD,IACvF,0BAAMzB,UAAU,eAAhB,eAAiD,KAEnD,0BAAMA,UAAU,gBAAhB,mBAEF,yBAAKA,UAAU,WACf,kBAACQ,EAAD,OCbS,SAASkB,IACtB,OACE,yBACEC,MAAM,MACNC,OAAO,KACPC,QAAQ,aACRC,MAAM,8BACL,IACD,4CACA,8BACE,0BAAMC,GAAG,IAAIC,EAAE,2CAEjB,uBAAGC,KAAK,OAAOC,YAAU,WACvB,0BACED,KAAK,UACLD,EAAE,47BACJ,uBAAGG,UAAU,4BACX,0BACEH,EAAE,qIACFC,KAAK,aAET,0BACED,EAAE,uWACFC,KAAK,YACP,0BACEA,KAAK,UACLD,EAAE,kDACJ,0BACEA,EAAE,siBACFC,KAAK,WC3BA,SAASG,IACtB,OACE,gCACE,kBAACV,EAAD,MACA,uBAAG1B,UAAU,aAAb,6DAGA,kBAACD,EAAD,O,kHCLAsC,EAASC,EAAQ,IA8GhB,IAyDMC,EAAoB,SAC/BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAc,CAChBC,KAAMP,EAAQO,KACdC,YAAaR,EAAQQ,YACrBjB,GAAIS,EAAQT,IAGRkB,EAAoB,SAAAjB,GACxB,IAAMkB,EAAc,GASpB,OARAR,EAAaS,SAAQ,SAAAC,GACMA,EAAGT,QACzBU,KAAI,SAAAC,GAAG,OAAIX,EAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOuB,QACtCG,QAAO,SAAAD,GAAC,OAAIA,EAAEE,aAAe1B,EAAED,MACjBoB,SAAQ,SAAAQ,GACvBT,EAAYS,EAAGZ,MAAQK,EAAGL,WAGvBG,GAGLU,EAAenB,EAASY,KAAI,SAAArB,GAAC,MAAK,CACpC6B,KAAM7B,EAAE8B,KAAKD,KACbE,IAAK/B,EAAE8B,KAAKC,IACZC,KAAMhC,EAAEgC,KACRC,eAAgBhB,EAAkBjB,OAG9BkC,EAAe,GAerB,OAdAxB,EAAaS,SAAQ,SAAAC,GACnB,IAAMe,EAAqBvB,EAASa,QAAO,SAAAW,GAAC,OAAIA,EAAEC,YAAcjB,EAAGrB,MACnEmC,EAAad,EAAGL,MAAQ,GACxBoB,EAAmBhB,SAAQ,SAAAmB,GACzBJ,EAAad,EAAGL,MAAMuB,EAAQvB,MAAQuB,EAAQC,cAI/B,CACjB/B,QAASM,EACTL,SAAUmB,EACVhB,SAAUsB,EACVrB,SAAUA,GAAsB,KC1NrB,SAAS2B,EAAT,GAA+C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,MAAOtD,EAAS,EAATA,MAChD,OACI,yBAAKpB,UAAU,eAAeoB,MAAOA,GACjC,yBAAKpB,UAAU,sBACX,yBAAKA,UAAW,qBAAsBoB,MAAO,CAAEO,MAAM,GAAD,OAAa,IAAR+C,EAAgBD,EAArB,SAGxD,uBAAGzE,UAAU,mBAAmB0E,GAAiB,IAARA,EAAcD,GAAOE,YAAY,GAAK,EAA/E,OCLG,SAASC,EAAT,GAA6C,IAAtBd,EAAqB,EAArBA,KAAMe,EAAe,EAAfA,aAAe,EAC3BpE,mBAAS,IADkB,mBAClDkC,EADkD,KACzCmC,EADyC,OAE3BrE,mBAAS,IAFkB,mBAElDsE,EAFkD,KAEzCC,EAFyC,OAG3BvE,mBAAS,IAHkB,mBAGlD8D,EAHkD,KAGzCU,EAHyC,OAIjBxE,mBAAS,IAJQ,mBAIlDyE,EAJkD,KAIpCC,EAJoC,OAKzB1E,mBAAS,IALgB,mBAKlD2E,EALkD,KAKxCC,EALwC,OAM7B5E,mBAAS,WANoB,mBAMlD6E,EANkD,KAM1CC,EAN0C,KAgCnDC,EAAiBC,mBACrB,kBACE9C,EAAQ+C,QAAO,SAACC,EAAKC,GACnB,IAAMC,EAAatB,EAAQd,QAAO,SAAAqC,GAAC,OAAIA,EAAEzB,YAAcuB,EAAI7D,MAM3D,OALA4D,EAAIC,EAAI7D,IAAM,CACZwC,QAASsB,EAAWE,MAAM,EAAG,GAAG1C,KAAI,SAAAyC,GAAC,OAAIA,EAAE/C,QAC3CiD,MAAOH,EAAWI,OAAS,GAGtBN,IACN,MACL,CAACpB,EAAS5B,IAcZ,OAXAuD,qBAAU,YFzCL,SACLpC,GAKC,IAJDqC,EAIA,uDAJa,KACbC,EAGA,uDAHwB,IACxBC,EAEA,uDAFc,GACdC,EACA,uDADa,IAEb,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAU,EACVC,EAAW,GACXC,EAAS,GACTC,EAAU,GACVC,EAAe,GAEf/C,EAAMD,EAAKC,IACXgD,EAAWhD,EAAIiD,KAED,SAAdlD,EAAKD,OACPE,EAAMA,EAAIkD,MAAM,KAAK,GACrBlD,EAAG,UAAMtC,gCAAN,sBAAiDsC,IAGtDmD,IAAKC,MAAMpD,EAAK,CACdqD,QAAQ,EACRC,QAAQ,EACRC,SAAwB,SAAdxD,EAAKD,KACf0D,KAAM,SAAUC,GACVd,EAAUL,GACZO,EAAOa,KAAKD,EAAIE,MAGF,IAAZhB,GACFc,EAAIG,KAAKC,OAAOzE,SAAQ,SAAA0E,GACtBlB,EAASkB,GAAK,GACdf,EAAae,GAAK,MAItBnB,GAAoB,GAENN,IAA0B,GAAKD,GAC3CA,EAAW,CACT2B,UAAWpB,EACXqB,WAAYP,EAAIG,KAAKK,OACrBC,WAAYlB,IAIhBS,EAAIG,KAAKC,OAAOzE,SAAQ,SAAA0E,GACtB,IAAIK,EAAMV,EAAIE,KAAKG,GAEfK,IAAQL,IAGRK,KAAOvB,EAASkB,GAClBlB,EAASkB,GAAGK,IAAQ,EAEhBpB,EAAae,GAAKvB,GACpBK,EAASkB,GAAGK,GAAO,EACnBpB,EAAae,IAAM,GACThB,EAAQsB,SAASN,IAC3BhB,EAAQY,KAAKI,QAKrBO,MAAO,SAAAA,GACLC,QAAQC,IAAI,0BAA2BF,IAEzCG,SAAU,WACR,IAAI5F,EAAU,GACV4B,EAAU,GACRb,EAAarB,IACnBmG,OAAOC,KAAK9B,GAAUxD,SAAQ,SAAAuF,GAC5B,IAAIrE,EAAYhC,IAEhBM,EAAQ8E,KAAK,CACXkB,OAAQH,OAAOC,KAAK9B,EAAS+B,IAAQzC,OACrClE,GAAIsC,EACJtB,KAAM2F,EACNE,IAAKF,EACLhF,WAAYA,EACZG,KAAM,OACNgD,QAASA,EAAQsB,SAASO,KAG5BF,OAAOjE,QAAQoC,EAAS+B,IAAQvF,SAAQ,mCAAEuF,EAAF,KAASG,EAAT,YACtCtE,EAAQkD,KAAK,CAAEpD,YAAWtB,KAAM2F,EAAOG,gBAI3CrC,EAAQ,CACNzB,QAAS,CACPhD,GAAI2B,EACJX,KAAoB,QAAde,EAAKD,KAAiBC,EAAKC,IAAIkD,MAAM,KAAK,GAAKnD,EAAKC,IAAIhB,KAC9De,KAAMA,EACNgF,UAAWpC,EACXE,OAAQA,GAEVjE,QAASA,EACT4B,QAASA,WE1DfwE,CAAoBjF,GAAM,SAAAsB,GAAQ,OAAIC,EAAYD,MAAW4D,MAC3D,SAAAC,GACE1D,EAAU,aACVP,EAAWiE,EAAOlE,SAClBD,EAAWmE,EAAOtG,SAClBsC,EAAWgE,EAAO1E,cAGrB,CAACT,IAGF,yBAAK9D,UAAU,iBACb,yBAAKA,UAAU,wBACb,4BAAmB,QAAd8D,EAAKD,KAAiBC,EAAKC,IAAMD,EAAKC,IAAIhB,MACnC,YAAXuC,GACC,kBAAC,IAAM4D,SAAP,KACE,6CACkB,IACf9D,EAAS0C,UAAY1C,EAAS0C,UAAUqB,iBAAmB,EAAG,IAFjE,QAKA,kBAAC3E,EAAD,CACEC,MAAOW,EAAS6C,WAAa7C,EAAS6C,WAAa,EACnDvD,MAAOU,EAAS2C,WAChB3G,MAAO,CAACO,MAAO,YAIT,cAAX2D,GACC,6CACkBP,EAAQ+D,UAD1B,aAC+CnG,EAAQsD,OAAQ,IAD/D,sDAMQ,cAAXX,GACC,kBAAC,IAAM4D,SAAP,KACE,wBAAIlJ,UAAU,wBACX2C,EAAQU,KAAI,SAAA+F,GAAM,OACjB,wBAAIpJ,UAAU,2BAA2B4I,IAAKQ,EAAOrH,IACnD,6BACE,yBAAK/B,UAAU,uBACb,4BACGoJ,EAAOrG,KAAM,IACd,wCAAUqG,EAAOvC,QAAU,IAAM,GAAjC,YACEuC,EAAOT,UAGX,2BACE9E,KAAK,WACLwF,QAASnE,EAAaiD,SAASiB,EAAOrH,IACtCuH,SAAU,kBA1ETC,EA0E4BH,EAAOrH,QAzElDmD,EAAaiD,SAASoB,GACxBpE,EAAgBD,EAAazB,QAAO,SAAA1B,GAAE,OAAIA,IAAOwH,MAEjDpE,EAAgB,GAAD,mBAAKD,GAAL,CAAmBqE,MAJjB,IAAAA,MA6EL,2BACG/D,EAAe4D,EAAOrH,IAAIwC,QAAQiF,KAAK,MAAvC,eACShE,EAAe4D,EAAOrH,IAAIiE,MADnC,gBAQX,yBAAKhG,UAAU,0BACb,4BAAQc,QAvGH,WACb,IAAM2I,EAAO9G,EAAQU,KAAI,SAAAG,GAAC,sBACrBA,EADqB,CAExBkG,SAAUxE,EAAaiD,SAAS3E,EAAEzB,SAE9B4H,EAAOpF,EAAQd,QAAO,SAAAqC,GAAC,OAAIZ,EAAaiD,SAASrC,EAAEzB,cAEzDQ,EAAaE,EAAS0E,EAAME,GAE5BpE,EAAU,WA8FF,QACA,4BAAQzE,QA5FL,WACXyE,EAAU,cA2FF,aClHG,SAASqE,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAChD,OACE,yBAAK/J,UAAU,QACZ6J,EAAQxG,KAAI,SAAA2G,GAAM,OACjB,uBACEhK,UAAS,cAAS8J,IAAaE,EAAS,WAAa,GAA5C,KACTpB,IAAKoB,EACLlJ,QAAS,kBAAMiJ,EAAWC,KACzBA,OCNI,SAASC,EAAT,GAAwD,IAAnCvF,EAAkC,EAAlCA,MAAO4E,EAA2B,EAA3BA,SAAUY,EAAiB,EAAjBA,OAAQ9I,EAAS,EAATA,MAE3D,OACE,yBAAKpB,UAAU,uBAAuBoB,MAAOA,GAC3C,kBAAC,IAAD,CAAiBpB,UAAU,cAAcI,KAAM+J,MAC/C,2BAAOtG,KAAK,OACV7D,UAAU,aACVsJ,SAAU,SAACxD,GAAD,OAAOwD,EAASxD,EAAE5F,OAAOwE,QACnC0F,YAAaF,EACbxF,MAAOA,IAET,kBAAC,IAAD,CAAiB1E,UAAU,aAAac,QAAS,kBAAMwI,EAAS,KAAKlJ,KAAMW,OCVlE,SAASsJ,EAAT,GAA0C,IAAdC,EAAa,EAAbA,UAAa,EAElB7J,mBAAS,IAFS,mBAE/C8J,EAF+C,KAEnCC,EAFmC,OAGZ/J,mBAAS,IAHG,mBAG/CgK,EAH+C,KAGhCC,EAHgC,KAKhDC,EAAS,wBAoBf,OAZAzE,qBAAU,WAER0E,MAAM,GAAD,OADQ,6CACR,mBACeD,EADf,2BACwCA,EADxC,qCAC2EJ,IAE7EvB,MAAK,SAAArD,GAAG,OAAIA,EAAIkF,UAChB7B,MAAK,SAAArD,GACJ+E,EAAiB/E,EAAImF,YAEtBC,OAAM,SAAAC,GAAG,OAAI3C,QAAQC,IAAI0C,QAC3B,CAACT,IAGF,yBAAKvK,UAAU,oBACb,kBAACiK,EAAD,CACE7I,MAAO,CAAE6J,aAAc,QACvBC,KAAMX,EACNjB,SAAUkB,IAEXC,EAAcpH,KAAI,SAAA0B,GAAO,OACxB,2BACGA,EAAQoG,SAASpI,KAAM,IACxB,0BAAM/C,UAAU,6BACb,IACD,uBAAGC,KAAM8E,EAAQqG,UAAWlL,OAAO,SACjCC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAMiL,OACpB,IACL,kBAAC,IAAD,CACEvK,QAAS,kBArCJ,SAAAiE,GACfuF,EAAU,CACRzG,KAAM,WACNE,IAAI,2CAAD,OAA6CgB,EAAQoG,SAASpJ,GAA9D,mCAkCoBuJ,CAASvG,IACxB3E,KAAMmL,OAEF,SC1CH,SAASC,EAAT,GAAqC,IAAhB3G,EAAe,EAAfA,aAAe,EACTpE,mBAAS,MADA,mBAC1CgL,EAD0C,KAC5BC,EAD4B,OAEvBjL,mBAAS,MAFc,mBAE1C2H,EAF0C,KAEnCuD,EAFmC,OAG3BlL,mBAAS,MAHkB,mBAG1CmL,EAH0C,KAGrCC,EAHqC,OAKDpL,mBAAS,IALR,mBAK1CqL,EAL0C,KAKxBC,EALwB,OAMXtL,mBAAS,QANE,mBAM1CuL,EAN0C,KAM7BC,EAN6B,KAQ3CC,EAAgB,WACpBR,EAAgB,CAAC,CAAC7H,KAAM,MAAOE,IAAK6H,MAGhCO,EAAqB,SAAApH,GACzB2G,EAAgB,CAAC3G,KAGbqH,EAASC,uBACb,SAAAC,GACMA,EAAMC,OAAM,SAAAzI,GAAI,OAAIA,EAAKf,KAAKkE,MAAM,KAAKkB,SAAS,WACpDuD,EAAgBY,EAAMjJ,KAAI,SAAAwE,GAAC,MAAK,CAAChE,KAAM,OAAQE,IAAK8D,OACpDkE,EAAoB,eAAID,EAAL,eAAwBQ,EAAM,GAAGvJ,KAAO,MAC3D4I,EAAS,OAETA,EAAS,2DAGb,CAACG,IA1B8C,EA6BGU,YAAY,CAACJ,WAA1DK,EA7B0C,EA6B1CA,aAAcC,EA7B4B,EA6B5BA,cAAeC,EA7Ba,EA6BbA,aAwDpC,OACE,yBAAK3M,UAAU,iBACZyL,EACCA,EAAapI,KAAI,SAAAS,GAAI,OACnB,kBAACc,EAAD,CAAcd,KAAMA,EAAMe,aAAcA,OAG1C,kBAAC,IAAMqE,SAAP,KACE,kBAACU,EAAD,CACEC,QAAS,CAAC,OAAQ,MAAO,oBACzBC,SAAUkC,EACVjC,WAAY,SAAA6C,GAAG,OAAIX,EAAeW,MAEpC,yBAAK5M,UAAU,WAxBJ,WACjB,OAAQgM,GACN,IAAK,MACH,OA5CF,yBAAKhM,UAAU,WACb,kBAAC,IAAD,CAAiBI,KAAMmL,MACvB,6BACE,2BACEnB,YAAY,aACZ1F,MAAOkH,EACPtC,SAAU,SAAAxD,GAAC,OAAI+F,EAAO/F,EAAE5F,OAAOwE,UAEjC,4BAAQmI,UAAWjB,EAAK9K,QAASoL,GAAjC,YAqCJ,IAAK,mBACH,OA7BG,kBAAC,EAAD,CAAkB5B,UAAW6B,IA8BlC,QACE,OA1BF,wBAASM,IACP,yBAAKzM,UAAU,WAAWoB,MAAO,CAAC4G,OAAQ,MACxC,kBAAC,IAAD,CAAiB5H,KAAM0M,MACvB,0BACMJ,EAAc,CAChBK,OAAQ,CAAC,WAAY,+BAGxBJ,EACC,uDAEA,iFAGHvE,GAAS,2BAAIA,KA6Bc4E,MFtFpC/C,EAAUgD,aAAe,CACvB7L,MAAO,I,YGnBHiB,EAASC,EAAQ,IAEV4K,EAAeC,0BAEtBC,EAAK,IAAIC,IAAM,SAErBD,EAAGE,QAAQ,GAAGC,OAAO,CACnBC,MAAO,OAGT,IAAMC,EAAc,CAClBhL,SAAU,GACVE,QAAS,GACT4B,QAAS,GACTmJ,SAAU,GACV9K,SAAU,GACV+K,WAAY,GACZC,YAAa,GACbC,iBAAiB,EACjBC,wBAAwB,EACxBC,cAAc,EACdC,cAAe,KACfC,YAAY,GAIRC,EAAiB,SAACC,EAAWC,GAA+B,IAAnBC,EAAkB,uDAAT,KACtD,OAAID,EAAW7K,MAAK,SAAA+K,GAAI,OAAIA,EAAKD,KAAYF,EAAUE,MAC9CD,EAAW/K,KAAI,SAAAiL,GAAI,OACxBA,EAAKD,KAAYF,EAAUE,GAAUF,EAAYG,KAG7C,GAAN,mBAAWF,GAAX,CAAuBD,KAKrBI,EAAU,SAACf,EAAOgB,GAAY,IAC3B3K,EAAiB2K,EAAjB3K,KAAM4K,EAAWD,EAAXC,QACb,OAAQ5K,GACN,IAAK,oBACH,OAAO4K,EAET,IAAK,eACH,OAAO,eAAIjB,EAAX,CAAkB/K,SAAS,GAAD,mBAAM+K,EAAM/K,UAAZ,YAAyBgM,MAErD,IAAK,yBACH,OAAO,eACFjB,EADL,CAEE/K,SAAUyL,EAAeO,EAASjB,EAAM/K,YAE5C,IAAK,uBACH,OAAO,eACF+K,EADL,CAEEjJ,QAAS2J,EAAeO,EAASjB,EAAMjJ,QAAS,UAEpD,IAAK,yBACH,OAAO,eACFiJ,EADL,CAEE5K,SAAUsL,EAAeO,EAASjB,EAAM5K,YAE5C,IAAK,4BACH,OAAO,eACF4K,EADL,CAEEI,YAAaM,EAAeO,EAASjB,EAAMI,eAE/C,IAAK,yBACH,OAAO,eACFJ,EADL,CAEEE,SAAUQ,EAAeO,EAASjB,EAAME,YAE5C,IAAK,wBACH,OAAO,eACFF,EADL,CAEE7K,QAASuL,EAAeO,EAASjB,EAAM7K,WAE3C,IAAK,iBACH,OAAO,eACF6K,EADL,CAEE/K,SAAU+K,EAAM/K,SAASgB,QAAO,SAAAzB,GAAC,OAAIA,EAAED,KAAO0M,OAGlD,IAAK,gBACH,OAAO,eACFjB,EADL,CAEEG,WAAYc,IAEhB,IAAK,cACH,OAAO,eAAIjB,EAAX,CAAkB7K,QAAQ,GAAD,mBAAM6K,EAAM7K,SAAZ,YAAwB8L,MAEnD,IAAK,gBACH,OAAO,eACFjB,EADL,CAEE7K,QAAS6K,EAAM/K,SAASgB,QAAO,SAAAD,GAAC,OAAIA,EAAEzB,KAAO0M,OAGjD,IAAK,cACH,OAAO,eAAIjB,EAAX,CAAkBjJ,QAAQ,GAAD,mBAAMiJ,EAAMjJ,SAAZ,YAAwBkK,MAEnD,IAAK,eACH,OAAO,eACFjB,EADL,CAEEjJ,QAASiJ,EAAMjJ,QAAQd,QAAO,SAAAqC,GAAC,OAAIA,EAAE/D,KAAO0M,OAGhD,IAAK,iCACH,OAAO,eACFjB,EADL,CAEEI,YAAY,GAAD,mBACNJ,EAAMI,aADA,CAET,CACE7L,GAAI0M,EAAQ1M,GACZgB,KAAMyK,EAAM7K,QAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAO0M,EAAQC,UAAQ3L,KACvDC,YAAawK,EAAM7K,QAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAO0M,EAAQC,UACnD1L,YACH2L,WAAYF,EAAQE,WACpBhM,QAAS,CAAC8L,EAAQC,aAK1B,IAAK,iCACH,OAAO,eACFlB,EADL,CAEE5K,SAAU4K,EAAM5K,SAASa,QAAO,SAAAW,GAAC,OAAIA,EAAEC,YAAcoK,OAGzD,IAAK,sBACH,OAAO,eACFjB,EADL,CAEEI,YAAaJ,EAAMI,YAAYnK,QAAO,SAAAL,GAAE,OAAKqL,EAAQtG,SAAS/E,EAAGrB,SAErE,IAAK,mBACH,OAAO,eACFyL,EADL,CAEEI,YAAY,GAAD,mBAAMJ,EAAMI,aAAZ,YAA4Ba,MAG3C,IAAK,iBACH,OAAO,eACFjB,EADL,CAEE5K,SAAU4K,EAAM5K,SAASa,QAAO,SAAAW,GAAC,OAAIA,EAAErC,KAAO0M,OAGlD,IAAK,eACH,OAAO,eACFjB,EADL,CAEE5K,SAAS,GAAD,mBAAM4K,EAAM5K,UAAZ,YAAyB6L,MAGrC,IAAK,cACH,OAAO,eACFjB,EADL,CAEE5K,SAAS,GAAD,mBAAM4K,EAAM5K,UAAZ,CAAsB6L,MAGlC,IAAK,cACH,OAAO,eACFjB,EADL,CAEEE,SAAS,GAAD,mBAAMF,EAAME,UAAZ,cAAuB3L,GAAIM,KAAaoM,OAGpD,IAAK,iBACH,OAAO,eACFjB,EADL,CAEEE,SAAUF,EAAME,SAASjK,QAAO,SAAAmL,GAAC,OAAIA,EAAE7M,KAAO0M,OAGlD,IAAK,iBACH,OAAO,eACFjB,EADL,CAEEE,SAAUF,EAAME,SAASrK,KAAI,SAAAuL,GAAC,OAC5BA,EAAE7M,KAAO0M,EAAQ1M,GAAjB,eAA0B6M,EAA1B,GAAgCH,GAAWG,OAIjD,IAAK,uBACH,OAAO,eACFpB,EADL,CAEE5K,SAAU4K,EAAM5K,SAASS,KAAI,SAAAe,GAAC,OAC5BA,EAAErC,KAAO0M,EAAQ1M,GAAjB,eACQqC,EADR,CACWG,QAAQ,GAAD,mBAAMH,EAAEG,SAAR,CAAiBkK,EAAQI,UACvCzK,OAGV,IAAK,iBACH,OAAO,eACFoJ,EADL,CAEE5K,SAAU4K,EAAM5K,SAASS,KAAI,SAAAe,GAAC,OAC5BA,EAAErC,KAAO0M,EAAQ1M,GAAjB,eAA0BqC,EAA1B,GAAgCqK,EAAQnK,SAAWF,OAGzD,IAAK,4BACH,OAAO,eACFoJ,EADL,CAEEjJ,QAASiJ,EAAMjJ,QAAQd,QAAO,SAAAoL,GAAK,OAAIA,EAAMtF,WAAakF,OAG9D,IAAK,qBACH,OAAO,eACFjB,EADL,CAEE9K,aAAc8K,EAAMI,YAAYnK,QAAO,SAAAL,GAAE,OAAIA,EAAGrB,KAAO0M,OAG3D,IAAK,qBACH,OAAO,eACFjB,EADL,CAEE9K,aAAc8K,EAAMI,YAAYvK,KAAI,SAAAD,GAAE,OACpCA,EAAGrB,KAAO0M,EAAQ1M,GAAlB,eAA2BqB,EAA3B,GAAkCqL,EAAQK,aAAe1L,OAI/D,IAAK,iBACH,OAAO,eACFoK,EADL,CAEES,WAAYQ,IAEhB,IAAK,uBACH,OAAO,eACFjB,EADL,CAEEQ,cAAeS,IAEnB,QACE,OAAOjB,IAIAuB,EAAgB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACjBC,qBAAWV,EAASd,GADH,mBACpCD,EADoC,KAC7B0B,EAD6B,KAGzCzM,EASE+K,EATF/K,SACAE,EAQE6K,EARF7K,QACA4B,EAOEiJ,EAPFjJ,QACAmJ,EAMEF,EANFE,SACA9K,EAKE4K,EALF5K,SACAgL,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,gBACAC,EAEEN,EAFFM,uBACAC,EACEP,EADFO,aA6EF,OAvEA7H,qBAAU,WACJ6H,IACFX,EAAGI,MAAM2B,IAAI,CACXzH,KAAM0H,KAAKC,UAAU,CACnB5M,WACAE,UACA4B,UACAmJ,WACA9K,WACAgL,cACAC,kBACAC,2BAEF/L,GAAI,IAGFuN,UAAUC,SAAWD,UAAUC,QAAQC,SACzCF,UAAUC,QAAQC,WAAWxG,MAAK,SAAAyG,GAAe,IACxCC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,MACdT,EAAS,CACPrL,KAAM,uBACN4K,QAAS,CAACiB,QAAOC,cAIrBtH,QAAQD,MAAM,+BAGjB,CACD3F,EACAE,EACA4B,EACAmJ,EACA9K,EACAgL,EACAC,EACAC,EACAC,IAIF7H,qBAAU,WACRkH,EAAGI,MAAMoC,IAAI,GAAG5G,MAAK,SAAAC,GACnB,GAAIA,EAAQ,CACV,IAAM4G,EAAcT,KAAKjI,MAAM8B,EAAOvB,MACtCwH,EAAS,CACPrL,KAAM,oBACN4K,QAAQ,eAAKhB,EAAN,GAAsBoC,EAAtB,CAAmC9B,cAAc,WAG1DmB,EAAS,CACPrL,KAAM,oBACN4K,QAAQ,eAAKhB,EAAN,CAAmBM,cAAc,WAI7C,IAIH7H,qBAAU,WACJoJ,UAAUC,SAAWD,UAAUC,QAAQO,SACzCR,UAAUC,QAAQO,UAAU9G,MAAK,SAAA+G,GAC/Bb,EAAS,CACPrL,KAAM,iBACN4K,QAASsB,SAId,IAGD,kBAAC7C,EAAa8C,SAAd,CAAuBtL,MAAO,CAAC8I,EAAO0B,IACnCF,IAKMiB,EAAgB,kBAAMC,qBAAWhD,IAEjCiD,EAAa,SAAAC,GAAc,IAAD,EACXH,IADW,mBAC9BzC,EAD8B,KACvB0B,EADuB,KAE/B1M,EAAUgL,EAAME,SAASnK,MAAK,SAAAqL,GAAC,OAAIA,EAAE7M,KAAOqO,KAC5C3N,EAAW+K,EAAM/K,SAASgB,QAAO,SAAAzB,GAAC,OAAIA,EAAE2M,aAAeyB,KACvDxC,EAAcJ,EAAMI,YAAYnK,QACpC,SAAAL,GAAE,OAAIA,EAAGuL,aAAeyB,KAEpBC,EAAgBzC,EAAYvK,KAAI,SAAAD,GAAE,OAAIA,EAAGrB,MAEzCuO,EAAS1C,EAAYlI,QAAO,SAAC6K,EAAKnN,GAAN,4BAAiBmN,GAAjB,YAAyBnN,EAAGT,YAAU,IAClEC,EAAW4K,EAAM5K,SAASa,QAAO,SAAAW,GAAC,OACtCiM,EAAclI,SAAS/D,EAAEC,cAErB1B,EAAU6K,EAAM7K,QAAQc,QAAO,SAAAD,GAAC,OAAI8M,EAAOnI,SAAS3E,EAAEzB,OACtDyO,EAAY7N,EAAQU,KAAI,SAAAG,GAAC,OAAIA,EAAEzB,MAC/BwC,EAAUiJ,EAAMjJ,QAAQd,QAAO,SAAAqC,GAAC,OAAI0K,EAAUrI,SAASrC,EAAEzB,cAyC/D,MAAO,CACL7B,UACAC,WACAmL,cACAjL,UACAC,WACA6N,cA7CoB,WACpB9N,EAAQQ,SAAQ,SAAAK,GACd0L,EAAS,CACPrL,KAAM,4BACN4K,QAASjL,EAAEzB,KAEbmN,EAAS,CACPrL,KAAM,gBACN4K,QAASjL,EAAEzB,QAIfa,EAASO,SAAQ,SAAAiB,GACf8K,EAAS,CACPrL,KAAM,iBACN4K,QAASrK,EAAErC,QAIf6L,EAAYzK,SAAQ,SAAAiB,GAClB8K,EAAS,CACPrL,KAAM,qBACN4K,QAASrK,EAAErC,QAIfU,EAASU,SAAQ,SAAAnB,GACfkN,EAAS,CACPrL,KAAM,iBACN4K,QAASzM,EAAED,QAIfmN,EAAS,CACPrL,KAAM,iBACN4K,QAASjM,EAAQT,MAWnBwC,YClYElC,EAASC,EAAQ,IAER,SAASoO,EAAT,GAA0C,IAAnBvP,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,QACnCkP,EAAcjP,EAAMwP,OAApBP,UACFQ,EAAU,kBAAM1P,EAAQ2P,UAFwB,EAGjCZ,IAAZf,EAH6C,oBAuCtD,OACE,kBAAC,IAAD,CACElP,UAAU,QACV8Q,iBAAiB,UACjBC,QAAQ,EACRC,eAAgBJ,GAChB,kBAACpF,EAAD,CAAY3G,aAxCU,SAACoM,EAAYtO,EAAS4B,GAC9C,IAAMqJ,EAAcjL,EACjBc,QAAO,SAAAD,GAAC,OAAIA,EAAEkG,YACdrG,KAAI,SAAA+F,GAAM,MAAK,CACdzG,QAAS,CAACyG,EAAOrH,IACjBgB,KAAMqG,EAAOrG,KACbC,YAAa,GACb2L,WAAYyB,EACZrO,GAAIM,QAGR6M,EAAS,CACPrL,KAAM,eACN4K,QAAS,CAAC,eAAKwC,EAAN,CAAkBtC,WAAYyB,OAGzClB,EAAS,CACPrL,KAAM,cACN4K,QAAS9L,IAGXuM,EAAS,CACPrL,KAAM,cACN4K,QAASlK,IAGX2K,EAAS,CACPrL,KAAM,mBACN4K,QAASb,IAGXgD,KAS+CA,QAASA,KC/C7C,SAASM,EAAT,GAA0C,EAAlB/P,MAAmB,IAAZD,EAAW,EAAXA,QACtC0P,EAAU,kBAAM1P,EAAQ2P,UADyB,EAElCZ,IAAZf,EAF8C,sBAI/BzO,qBAJ+B,mBAIhDsC,EAJgD,KAI1CoO,EAJ0C,OAKjB1Q,qBALiB,mBAKhDuC,EALgD,KAKnCoO,EALmC,KAevD,OACE,kBAAC,IAAD,CAEEL,QAAQ,EAER/Q,UAAU,QACV8Q,iBAAiB,UACjBE,eAAgBJ,GAChB,yBAAK5Q,UAAU,qBACb,2CACA,2CACA,2BACE0E,MAAO3B,EACPuG,SAAU,SAAAxD,GAAC,OAAIqL,EAAQrL,EAAE5F,OAAOwE,QAChC0F,YAAY,SAEd,0CACA,8BACE1F,MAAO1B,EACPsG,SAAU,SAAAxD,GAAC,OAAIsL,EAAetL,EAAE5F,OAAOwE,QACvC0F,YAAY,gBAEd,yBAAKpK,UAAU,WACb,4BAAQc,QA/BM,WACpBoO,EAAS,CACPrL,KAAM,cACN4K,QAAS,CAAE1L,OAAMC,iBAEnB4N,MA0BM,UACA,4BAAQ5Q,UAAU,gBAAgBc,QAAS8P,GAA3C,aC3CV,IA+BMS,EAAW,SAAAC,GACf,IAAMC,EAHQ,SAAAD,GAAG,OAAIE,KAAKC,KAAKH,EAAI5L,QAAO,SAAC6L,EAAKG,GAAN,OAAYH,EAAMG,EAAIA,IAAG,IAGvDC,CAAQL,GACpB,OAAOA,EAAIjO,KAAI,SAAAqO,GAAC,OAAIA,EAAIH,MAkCbK,EAAgC,SAC3CrN,EACAsN,EACAC,EACAnE,GAEA,IAAMoE,EArCc,SAACxN,EAASsN,EAAiBlE,GAC/C,IAAMqE,EAAmBzN,EACtBlB,KAAI,SAAAwL,GAAK,OAAIlB,EAAWpK,MAAK,SAAA0O,GAAG,OAAIpD,IAAUoD,EAAIpD,YAClDpL,QAAO,SAAAyO,GAAC,OAAIA,KACZ7O,KAAI,SAAA8O,GAAK,MAAI,CAACA,EAAMA,MAAO,MAExBC,EAAsBP,EACzBxO,KAAI,SAAAwL,GAAK,OAAIlB,EAAWpK,MAAK,SAAA0O,GAAG,OAAIpD,IAAUoD,EAAIpD,YAClDpL,QAAO,SAAAyO,GAAC,OAAIA,KACZ7O,KAAI,SAAA8O,GAAK,MAAI,CAACA,EAAMA,OAAQ,MAIzBE,EAF0BL,EAAiBM,OAAOF,GAEd1M,QAAO,SAACjB,EAAO0N,GACvD,IAAMI,EAASJ,EAAM,GACfb,EAAMa,EAAM,GAAG9O,KAAI,SAAAqO,GAAC,OAAIA,EAAIa,KAOlC,OAJE9N,EADmB,IAAjBA,EAAMwB,OACAqL,EAEAA,EAAIjO,KAAI,SAACqO,EAAGc,GAAJ,OAAUd,EAAIjN,EAAM+N,QAGrC,IAEH,OAAOnB,EAASgB,GAYHI,CAAclO,EAASsN,EAAiBlE,GAWrD,OATkBmE,EAAezO,KAAI,SAAAwL,GACnC,IAZe6D,EAAIC,EAYbC,EAAWjF,EAAWpK,MAAK,SAAAuC,GAAC,OAAIA,EAAE+I,QAAUA,EAAM9L,QACxD,GAAI6P,EAAU,CACZ,IAAMC,GAdOH,EAcUrB,EAASuB,EAAST,OAdxBQ,EAcgCZ,EAbrDW,EAAGhN,QAAO,SAACjB,EAAOiN,EAAGoB,GAAX,OAAqBrO,GAASiN,EAAIiB,EAAGG,KAAWpB,EAAIiB,EAAGG,MAAS,IActE,MAAO,CAAEC,WAAYlE,EAAM9L,KAAM8P,KAAMA,GAEvC,MAAO,CAAEE,WAAYlE,EAAM9L,KAAM8P,KAAM,QAIxCpP,QAAO,SAAAyO,GAAC,OAAIA,EAAEW,KAAO,KACrBpP,QAAO,SAAAyO,GAAC,OAAK3N,EAAQ4D,SAAS+J,EAAEa,eAChCtP,QAAO,SAAAyO,GAAC,OAAKL,EAAgB1J,SAAS+J,EAAEa,eACxCC,MAAK,SAACd,EAAGe,GAAJ,OAAWf,EAAEW,KAAOI,EAAEJ,KAAO,GAAK,KACvC9M,MAAM,EAAG,IAGRmN,EAAoC,SACxCrE,EACAsE,GAFwC,IAGxCC,EAHwC,+DAKxCvE,EAAM9L,KAAKkE,MAAM,KAAKvB,QAAO,SAAC2N,EAAYC,GACxC,IAAMC,EAAaJ,EAChB1P,QAAO,SAAA0O,GAAK,OAAIA,KAChB5O,MAAK,SAAAiQ,GAAE,OAAIA,EAAG5K,MAAQ0K,EAAKG,uBAE9B,GAAIF,EAAY,CACd,IAAIG,EAAMH,EAAWI,UACjBP,IACFM,EAAMrC,EAASqC,IAIfL,EADwB,IAAtBA,EAAWpN,OACAyN,EAEAL,EAAWhQ,KAAI,SAACqO,EAAGc,GAAJ,OAAUd,EAAIgC,EAAIlB,MAGlD,OAAOa,IACN,KAEQO,GAAiB,SAAArP,GAAO,OArHH,SAAAA,GAChC,IAAIsP,EAAe,IAAIC,IAOvB,OANAvP,EAAQpB,SAAQ,SAAA0L,GACdA,EAAM9L,KAAKkE,MAAM,KAAK9D,SAAQ,SAAAmQ,GAC5BO,EAAaE,IAAIT,SAId1I,MAAM,GAAD,OAAInJ,gCAAJ,mBAAoD,CAC9DuS,OAAQ,OACRC,KAAM7E,KAAKC,UAAU6E,MAAMC,KAAKN,GAAcxQ,KAAI,SAAA+Q,GAAC,OAAIA,EAAEC,cAAcC,QAAQ,UAAW,QAC1FC,QAAS,CACP,eAAgB,sBAEjBvL,MAAK,SAAAwL,GAAC,OAAIA,EAAE3J,UAwGf4J,CAA0BlQ,GAASyE,MAAK,SAAAmK,GAAc,OACpD5O,EAAQlB,KAAI,SAAAwL,GAAK,MAAK,CACpBA,MAAOA,EAAM9L,KACboP,MAAOe,EAAkCrE,EAAOsE,WCxHhD9Q,GAASC,EAAQ,IAEhB,SAASoS,GAAcC,EAAWpL,EAAUxG,EAAMmM,GACvD,IAAMnN,EAAKM,KAWX,OAVA6M,EAAS,CACPrL,KAAM,cACN4K,QAAS,CACP1L,KAAMA,EACNwB,QAASoQ,EACTC,kBAAmB,GACnBvQ,UAAWkF,EACXxH,QAGGA,EAqHF,SAAS8S,GAAoBvQ,EAASC,EAAS2K,GACpDA,EAAS,CACPrL,KAAM,iBACN4K,QAAS,CACP1M,GAAIuC,EAAQvC,GACZuC,QAAS,CACPC,QAAQ,GAAD,mBAAMD,EAAQC,SAAd,YAA0BA,QChI1B,SAAS2M,GAAT,GAAwC,EAAjB/P,MAAkB,IAAXD,EAAU,EAAVA,QAAU,EAEhC+O,IAAZf,EAF4C,sBAGrCzO,mBAAS,MAAlB2H,EAH8C,sBAKvB3H,mBAAS,MALc,mBAK9C+B,EAL8C,KAKrCsS,EALqC,KAO/C1I,EAASC,uBAAY,SAAAC,GACzB,IAAMxI,EAAOwI,EAAM,GACbyI,EAAS,IAAIC,WACnBD,EAAOE,WAAWnR,GAClBiR,EAAOG,OAAS,SAAArN,GACdiN,EAAW1F,KAAKjI,MAAM4N,EAAO9L,YAE9B,IAdkD,EAoBDuD,YAAY,CAACJ,WAA1DK,EApB8C,EAoB9CA,aAAcC,EApBgC,EAoBhCA,cAAeC,EApBiB,EAoBjBA,aACpC,OACE,kBAAC,IAAD,CACEoE,QAAQ,EACRC,eAvBY,kBAAM9P,EAAQ2P,UAwB1B7Q,UAAU,QACV8Q,iBAAiB,WACjB,yBAAK9Q,UAAU,sBACb,4BAAKwC,EAAUA,EAAQA,QAAQO,KAAO,gBACtC,yBAAK/C,UAAU,WACZwC,EACC,6BACE,iCACE,4BACEpB,MAAO,CACLC,QAAS,OACT8T,cAAe,MACf7T,WAAY,WAEd,kBAAC,IAAD,CACElB,KAAMgV,IACNhU,MAAO,CAACiU,YAAa,UAEvB,yCAEF,2BAAI7S,EAAQA,QAAQQ,aACnBR,EAAQC,SAASY,KAAI,SAAArB,GAAC,OACrB,2BAAIA,EAAEe,UAGV,iCACE,4BACE3B,MAAO,CACLC,QAAS,OACT8T,cAAe,MACf7T,WAAY,WAEd,kBAAC,IAAD,CACElB,KAAMkV,IACNlU,MAAO,CAACiU,YAAa,UAEvB,wCAED7S,EAAQE,aAAaW,KAAI,SAAAD,GAAE,OAC1B,2BAAIA,EAAGL,UAGX,4BAAQjC,QAnDL,YDIV,SAAqByU,EAAgBrG,GAAW,IAEnD1M,EAME+S,EANF/S,QACAC,EAKE8S,EALF9S,SACA8B,EAIEgR,EAJFhR,QACA5B,EAGE4S,EAHF5S,QACAC,EAEE2S,EAFF3S,SACAF,EACE6S,EADF7S,aAGFwM,EAAS,CACPrL,KAAM,yBACN4K,QAASjM,IAGXC,EAASU,SAAQ,SAAA4B,GACfmK,EAAS,CACPrL,KAAM,yBACN4K,QAAS1J,OAIbpC,EAAQQ,SAAQ,SAAAiG,GACd8F,EAAS,CACPrL,KAAM,wBACN4K,QAASrF,OAIbxG,EAASO,SAAQ,SAAAmB,GACf4K,EAAS,CACPrL,KAAM,yBACN4K,QAASnK,OAIb5B,EAAaS,SAAQ,SAAAC,GACnB8L,EAAS,CACPrL,KAAM,4BACN4K,QAASrL,OAIbmB,EAAQpB,SAAQ,SAAA0L,GACdK,EAAS,CACPrL,KAAM,uBACN4K,QAASI,OCjDX2G,CAAYhT,EAAS0M,GACrBhO,EAAQ2P,WAiDE,SAGF,uCAAK7Q,UAAW,YAAgByM,KAC9B,kBAAC,IAAD,CAAiBrM,KAAM0M,MACvB,0BACMJ,EAAc,CAChBK,OAAQ,CAAC,WAAY,+BAGxBJ,EACC,uDAEA,uFAEDvE,GAAS,2BAAIA,O,YCzFb,SAASqN,KAAmB,IAAD,EACRhV,mBAAS,MADD,mBACjCiV,EADiC,KACvBC,EADuB,KAqBxC,OAnBAzP,qBAAU,WAER,IAAIhG,EAAS0V,eAAeF,SAG5B,UAFOE,eAAeF,SAElBxV,GAAUA,IAAW2V,OAAOC,SAAS7V,KAAM,CAC7C,IAAIe,EAAKd,EAEPc,EACE,IACAA,EACGiG,MAAM,KACNlB,MAAM,GACNyD,KAAK,KAEZmM,EAAY3U,MAEb,IAEC0U,EACK,kBAAC,KAAD,CAAU1U,GAAI0U,IAEd,kBAAC,IAAMxM,SAAP,M,wBCxBI,SAAS6M,GAAaC,GAAQ,IACnClS,EAAkBkS,EAAlBlS,KAAMnB,EAAYqT,EAAZrT,QAD4B,EAGNlC,oBAAS,GAHH,mBAGnCwV,EAHmC,KAGvBC,EAHuB,OAIdzV,mBAAS,WAJK,mBAInC6E,EAJmC,KAI3BC,EAJ2B,KAqB1C,OACE,yBAAKvF,UAAU,iBACD,YAAXsF,GACC,kBAAC,IAAM4D,SAAP,KACE,uBAAGnH,GAAI+B,EAAKf,MAAOe,EAAKf,MACxB,yBAAK/C,UAAU,WACb,mDAAyB2C,EAAQsD,OAAjC,YADF,eAEe,IACb,2BACEpC,KAAK,WACLwF,QAAS4M,EACT3M,SAAU,SAAAxD,GAAC,OAAIoQ,EAAcpQ,EAAE5F,OAAOmJ,YAN1C,8BAQ6B,2BAAOxF,KAAK,aACvC,4BAAQ/C,QA7BM,WACtByE,EAAU,WACV,IAAM4Q,EAAaC,KAAYC,kBAAkB,gBAAiB,CAChErP,KAAM,KAER,IAAIsP,SAAS,0BAA0BrC,KAAKsC,OAAOJ,GAAYnN,MAC7D,WACEX,QAAQC,IAAI,YAEd,WACED,QAAQC,IAAI,cAmBR,mBAIM,YAAXhD,GAAwB,uCACb,SAAXA,GAAqB,qCCpCb,SAASkR,GAAT,GAAiD,IAAnBrV,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,QAAW,EAEnCT,mBAAS,MAF0B,mBAEtD6L,EAFsD,KAE/CmK,EAF+C,OAGnChW,mBAAS,MAH0B,mBAGtD2H,EAHsD,KAG/CuD,EAH+C,OR0drC,SAAA+K,GAAc,IAAD,EACrBzG,IAATzC,EAD8B,oBAE/BzI,EAAUyI,EAAM/K,SAASc,MAAK,SAAAvB,GAAC,OAAIA,EAAED,KAAO2U,KAC5C/T,EAAU6K,EAAM7K,QAAQc,QAAO,SAAAzB,GAAC,OAAIA,EAAE0B,aAAegT,KACrDC,EAAYhU,EAAQU,KAAI,SAAAG,GAAC,OAAIA,EAAEzB,MAErC,MAAO,CAACgD,UAASpC,UAASC,SADT4K,EAAM5K,SAASa,QAAO,SAAAW,GAAC,OAAIuS,EAAUxO,SAAS/D,EAAEmF,cQrdnCqN,CANRzV,EAAMwP,OAApB+F,WAMA/T,EAVqD,EAUrDA,QAASC,EAV4C,EAU5CA,SAEXwJ,EAASC,uBAAY,SAAAC,GACrBA,EAAMC,OAAM,SAAAzI,GAAI,OAAIA,EAAKf,KAAKkE,MAAM,KAAKkB,SAAS,UACpDsO,EAASnK,GAETX,EACE,sEAGH,IApB0D,EAsBPa,YAAY,CAAEJ,WAA5DK,EAtBqD,EAsBrDA,aAAcC,EAtBuC,EAsBvCA,cAAeC,EAtBwB,EAsBxBA,aAErC,OACE,kBAAC,IAAD,CAAYoE,QAAQ,EAAMC,eAnBZ,WACd9P,EAAQ2P,UAmBN7Q,UAAU,QACV8Q,iBAAiB,WAGhB1I,GAAS,4BAAKA,GAEdkE,EACC,6BACGA,EAAMjJ,KAAI,SAAAS,GAAI,OACb,kBAACiS,GAAD,CACEjS,KAAMA,EACNnB,QAASA,EACTC,SAAUA,QAMd,kBAAC,IAAMsG,SAAP,KACE,gEACA,yBAAKlJ,UAAU,iBACb,wBAASyM,IACP,0BACMC,EAAc,CAChBK,OAAQ,CAAC,WAAY,+BAIxBJ,EACC,uDAEE,uEC3DL,SAASkK,GAAT,GAA8C,IAAnB1V,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,QACzC0P,EAAU,kBAAM1P,EAAQ2P,UAEtBT,EAAcjP,EAAMwP,OAApBP,UAHkD,EAIID,EAC5DC,GADM5N,EAJkD,EAIlDA,QAASC,EAJyC,EAIzCA,SAAUmL,EAJ+B,EAI/BA,YAAajL,EAJkB,EAIlBA,QAASC,EAJS,EAITA,SAJS,EAQZnC,oBAAS,GARG,mBAQnDqW,EARmD,KAQlCC,EARkC,OASVtW,oBAAS,GATC,mBASnDuW,EATmD,KASjCC,EATiC,OAUZxW,oBAAS,GAVG,mBAUnDyW,EAVmD,KAUlCC,EAVkC,OAWR1W,mBAAS,WAXD,mBAWnD2W,EAXmD,KAWhCC,EAXgC,KA+B1D,OACE,kBAAC,IAAD,CACErX,UAAU,QACV8Q,iBAAiB,UACjBC,QAAQ,EACRC,eAAgBJ,GAChB,yBAAK5Q,UAAU,qBACZwC,GACC,kBAAC,IAAM0G,SAAP,KACE,6BACE,4BAAK1G,EAAQO,MACb,2CAEF,yBAAK/C,UAAU,uBACb,2DAEE,2BACE6D,KAAK,WACLa,MAAOoS,EACPxN,SAAU,SAAAxD,GAAC,OAAIiR,EAAmBjR,EAAE5F,OAAOmJ,aAG9CyN,GACC,8DAEE,2BACEjT,KAAK,OACLa,MAAO0S,EACP9N,SAAU,SAAAxD,GAAC,OAAIuR,EAAqBvR,EAAE5F,OAAOwE,UAC5C,KAGP,oDACsB,IACpB,2BACEb,KAAK,WACLa,MAAOsS,EACP1N,SAAU,SAAAxD,GAAC,OAAImR,EAAoBnR,EAAE5F,OAAOmJ,YAC3C,KAEL,oEACsC,IACpC,2BACExF,KAAK,WACLa,MAAOwS,EACP5N,SAAU,SAAAxD,GAAC,OAAIqR,EAAmBrR,EAAE5F,OAAOmJ,YAC1C,MAIP,yBAAKrJ,UAAW,uBACd,kHAIA,8DACA,4BACE,qGAIA,6FAGA,sFACA,2EAEF,wHAKF,yBAAKA,UAAU,WACb,4BAAQc,QA3FH,YhBkGa,SAC9B0B,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IiB3HmDyU,EjB2H7CC,EAAcC,IAAQhV,EAAQO,MAAQ,QACtC0U,EAAmBD,IAAQhV,EAAQO,MAAQ,MAE3C2U,EAASnV,EACbC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEI8U,GiBtI6CL,EjBsIFG,EiBrInC,wEjBqIsBF,EiBrItB,w0CA2CWD,EA3CX,mDjBuIVM,EAAM,IAAIC,IACVC,EAASF,EAAIE,OAAOtV,EAAQO,MAChC6U,EAAIE,OAAJ,UAActV,EAAQO,KAAtB,+BACA6U,EAAIE,OAAJ,UAActV,EAAQO,KAAtB,aACA+U,EAAOhU,KAAKyT,EAAanI,KAAKC,UAAUqI,IACxCI,EAAOhU,KAAK,aAAc6T,GAC1BC,EAAIG,cAAc,CAAElU,KAAM,SAAUmF,MAAK,SAAAgP,GACvCC,iBAAOD,EAASR,IAAQhV,EAAQO,MAAQ,UgBtHxCmV,CACE1V,EACAC,EACAmL,EACAjL,EACAC,EAZe,CACfkU,kBACAE,mBACAE,kBACAE,wBAsFQ,UACA,4BAAQtW,QAAS8P,GAAjB,c,wBE3GC,SAASuH,GAAanC,GAAQ,IACnCtO,EAASsO,EAATtO,KAEF/E,EAAU6F,OAAOC,KAAKf,EAAK,IAAIrE,KAAI,SAAA+U,GAAC,MAAK,CAAExP,IAAKwP,EAAGrV,KAAMqV,MAHrB,EAIlB3X,mBAASiH,GAJS,mBAInC1D,EAJmC,KAI7BqU,EAJ6B,KAiB1C,OAAoB,IAAhB3Q,EAAKzB,OACA,gDAIP,kBAAC,KAAD,CACEtD,QAASA,EACT2V,UAAW,SAAA9F,GAAC,OAAIxO,EAAKwO,IACrB+F,UAAW7Q,EAAKzB,OAChBuS,WAAY,SAACC,EAAYC,GAAb,OACVL,EArBW,SAACM,EAAYF,EAAYC,GAAzB,OAA2C,SAAA1U,GAQ1D,MAAyB,SAAlB0U,EAA2BC,EAAa,YAAI3U,GAAMgP,MAP5C,SAACd,EAAGe,GACf,MAAsB,QAAlByF,EACKxG,EAAEuG,GAAcxF,EAAEwF,GAAc,GAAK,EACjB,SAAlBC,EACFxG,EAAEuG,GAAcxF,EAAEwF,GAAc,GAAK,OADvC,MAiBGG,CAASlR,EAAM+Q,EAAYC,OC1B5B,SAASG,GAAT,GAAiC,IACxCnC,EADuC,EAATvV,MACZwP,OAAO+F,UADc,EAGZzG,IAHY,sBAGpCxN,EAHoC,EAGpCA,SAAUE,EAH0B,EAG1BA,QACboC,EAAUtC,EAASc,MAAK,SAAAvB,GAAC,OAAIA,EAAED,KAAO2U,KAEtCoC,EAAoBnW,EAAQc,QAAO,SAAAD,GAAC,OAAIA,EAAEE,aAAegT,KAC/D,OAAO3R,EACL,kBAAC,IAAMmE,SAAP,KACE,yBAAKlJ,UAAU,uBACb,kBAACmY,GAAD,CAAczQ,KAAM3C,EAAQ6B,OAAQjE,QAASmW,IAC7C,yBACE1X,MAAO,CACLC,QAAS,OACT0X,eAAgB,eAChBC,UAAW,YAMjB,sDCvBS,SAASC,GAAT,GAAiE,IAA5CpK,EAA2C,EAA3CA,MAA2C,IAApC/E,gBAAoC,SAAlBoP,EAAkB,EAAlBA,eAC3D,OACE,yBACElZ,UAAS,0BAAqB8J,EAAW,WAAa,IACtDhJ,QAAS,kBAAMoY,EAAerK,KAC9B,4BAAKA,EAAM9L,MACX,2BAAI8L,EAAMhG,MAAV,iBCHS,SAASsQ,GAAT,GAAwC,IAAb7P,EAAY,EAAZA,SAAY,EAapB7I,oBAAS,GAbW,mBAa7C2Y,EAb6C,KAavCC,EAbuC,OAcpB5Y,mBAAS,kBAdW,mBAc7CqJ,EAd6C,KAcnCwP,EAdmC,KAkBpD,OACE,yBAAKtZ,UAAU,YACb,yCACA,4BACE,wBAAIc,QArBW,WACnBuY,GAAgB,KAoBgBvP,EAA5B,IAAsC,kBAAC,IAAD,CAAiB1J,KAAMmZ,MAA7D,KANU,CAAC,iBAAkB,cAOpB9V,QAAO,SAAA+V,GAAC,OAAIA,IAAM1P,GAAYsP,KAAM/V,KAAI,SAAAmW,GAAC,OAAI,wBACpD1Y,QAAS,kBAnBKkJ,EAmBcwP,EAlBlCH,GAAgB,GAChBC,EAAYtP,QACRV,GACFA,EAASU,IAJQ,IAACA,IAoBdwP,QC1BK,SAASC,GAAT,GAAuC,IAAnB5K,EAAkB,EAAlBA,MAAO6K,EAAW,EAAXA,SACxC,OACE,0BAAM1Z,UAAU,cACd,8BAAO6O,GACP,kBAAC,IAAD,CAAiBzO,KAAMW,IAASD,QAAS,kBAAM4Y,EAAS7K,OCL/C,SAAS8K,GAAT,GAA4E,IAA7ChF,EAA4C,EAA5CA,UAAWiF,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,WACxE,OACI,yBAAK7Z,UAAU,uBACW,IAArB2U,EAAU1O,OACP,iEAEA,6CAAmB0O,EAAU1O,OAA7B,MAEJ,4BACK0O,EAAUmF,UAAUzW,KAAI,SAAAwL,GAAK,OAAI,4BAAI,kBAAC4K,GAAD,CAAWC,SAAUE,EAAmB/K,MAAOA,IAAnD,SAEpC8F,EAAU1O,OAAS,GACjB,4BAAQjG,UAAU,wBAAwBc,QAAS+Y,GAAnD,cCPD,SAASE,GAAT,GAMX,IALFxV,EAKC,EALDA,QACAnD,EAIC,EAJDA,MACA4Y,EAGC,EAHDA,kBACAC,EAEC,EAFDA,iBACAtF,EACC,EADDA,UACC,EACyBlU,mBAAS,cADlC,mBACMyZ,EADN,KACaC,EADb,KAGKC,EAAkB,SAAAvL,GAClBmL,GACFA,EAAkBnL,IAIhBwL,EAAW,CAAEC,eAAgB,OAAQC,WAAY,SAAUL,GAE7DM,EAAiBjW,EAAQyO,MAAK,SAACd,EAAGe,GAAJ,OAChCf,EAAEmI,GAAYpH,EAAEoH,GAAY,GAAK,KAOnC,MAJiB,UAAbA,GACFG,EAAeV,UAIf,yBAAK1Y,MAAOA,EAAOpB,UAAU,eAC3B,yBAAKA,UAAU,uBACb,kBAAC2Z,GAAD,CAAqBhF,UAAWA,EAAWiF,kBAAmBQ,EAAiBP,WAAYI,IAC3F,kBAACd,GAAD,CAAiB7P,SAAU,SAAA4Q,GAAK,OAAIC,EAASD,OAG/C,yBAAKla,UAAU,uBACZwa,EAAevU,OAAS,EACvBuU,EAAenX,KAAI,SAAAwL,GAAK,OACtB,kBAACoK,GAAD,CACErQ,IAAKiG,EAAM9L,KACX8L,MAAOA,EACP/E,SAAU6K,EAAUxM,SAAS0G,EAAM9L,MACnCmW,eAAgBkB,OAIlB,yBAAKpa,UAAU,YACb,gFACA,4BACG,YAAIkU,MAAM,IAAI7Q,KAAI,kBACjB,kBAAC,IAAD,CAAiBjD,KAAMqa,aCjD1B,SAASC,GAAT,GAAwC,IAAjBxP,EAAgB,EAAhBA,KAAMyP,EAAU,EAAVA,SAAU,EAClBla,mBAASyK,GADS,mBAC7C0P,EAD6C,KAClCC,EADkC,OAEtBpa,oBAAS,GAFa,mBAE7Cqa,EAF6C,KAEpCC,EAFoC,KAQpD,OAJA7U,qBAAU,WACP2U,EAAa3P,KACd,CAACA,IAEK4P,EACJ,2BAAOxR,SAAU,SAACxD,GAAD,OAAK+U,EAAa/U,EAAE5F,OAAOwE,QAAQsW,OAAQ,WAAOD,GAAW,GAAQJ,EAASC,IAAgBlW,MAAOkW,IAGtH,4BACKA,EADL,IACgB,kBAAC,IAAD,CAAiB9Z,QAAS,kBAAIia,GAAW,IAAO3a,KAAM6a,OCd7D,SAASC,GAAT,GAUX,IATF5W,EASC,EATDA,QACA6W,EAQC,EARDA,yBACAC,EAOC,EAPDA,gBACAC,EAMC,EANDA,eACAC,EAKC,EALDA,gBACAC,EAIC,EAJDA,yBACAC,EAGC,EAHDA,8BACAC,EAEC,EAFDA,YACAra,EACC,EADDA,MACC,EAC2CX,mBAAS,QADpD,mBACMib,EADN,KACsBC,EADtB,KAwCKC,EAAoBH,EAAYC,GAEtC,OACE,yBAAK1b,UAAU,gBAAgBoB,MAAOA,GACpC,kBAACsZ,GAAD,CAAcxP,KAAM5G,EAAQvB,KAAM4X,SA7BZ,SAAA5X,GACpBqY,GACFA,EAAgB9W,EAASvB,MA4BzB,yBAAK/C,UAAU,gBACb,wCACA,4BACGsE,EAAQC,QAAQlB,KAAI,SAAAwL,GAAK,OACxB,4BACGA,EAAO,IACR,4BACE/N,QAAS,kBAjDQ,SAAA+N,GACzBsM,GACFA,EAAyBtM,EAAOvK,GA+CPuX,CAAuBhN,IACtC7O,UAAW,6BACX,kBAAC,IAAD,CAAiBI,KAAMW,MAAY,WAM7C,yBAAKf,UAAU,iBACb,8CACkB,IAChB,0BACEoB,MACqB,SAAnBsa,EACI,CAAEI,WAAY,QACd,CAAEA,WAAY,WAEpBhb,QAAS,kBAAM6a,EAAkB,UANnC,QAQQ,IAVV,IAWI,IACF,0BACEva,MACqB,YAAnBsa,EACI,CAAEI,WAAY,QACd,CAAEA,WAAY,WAEpBhb,QAAS,kBAAM6a,EAAkB,aANnC,YAUF,4BACGC,EAAkBvY,KAAI,SAAAwL,GAAK,OAC1B,4BACGA,EAAMkE,WAAY,IACnB,yBAAK/S,UAAU,2BACb,4BACEA,UAAW,4BACXc,QAAS,kBAjFM,SAAA+N,GACzB0M,GACFA,EAAyB1M,EAAMkE,YA+EJgJ,CAAuBlN,KACtC,kBAAC,IAAD,CAAiBzO,KAAM4b,OAEzB,4BAAQhc,UAAW,4BACjBc,QAAS,kBA7DW,SAAC+N,GAE/B2M,GACFA,EAA8B3M,EAAMkE,YA0DTkJ,CAA4BpN,KAE3C,kBAAC,IAAD,CACEzO,KAAMW,cAQpB,yBAAKf,UAAW,iBACd,4BAAQc,QArFO,SAAAiC,GACfsY,GACFA,EAAe/W,IAmFkBtE,UAAW,cAA1C,iBAGA,4BAAQc,QAlFQ,SAAAiC,GAChBuY,GACFA,EAAgBhX,IAgFkBtE,UAAW,cAA3C,oBC1HO,SAASkc,GAAT,GAKX,IAAD,IAJDtZ,gBAIC,MAJU,GAIV,EAHDkH,EAGC,EAHDA,SACAqS,EAEC,EAFDA,kBACA/a,EACC,EADDA,MASA,OACE,yBAAKgb,MAAM,gBAAgBhb,MAAOA,GAChC,6CACgB,0BAAMgb,MAAM,QAAQxZ,EAASqD,QAAe,KAE5D,4BACGrD,EAASS,KAAI,SAAAiB,GAAO,OACnB,wBACEtE,UACE8J,GAAYxF,EAAQvB,OAAS+G,EAAS/G,KAAO,WAAa,GAE5DjC,QAAS,kBAjBK,SAACwD,GACnB6X,GACFA,EAAkB7X,GAeG+X,CAAgB/X,KAC9BA,EAAQvB,WCvBN,SAASuZ,GAAT,GAaX,IAZF1Z,EAYC,EAZDA,SACA+R,EAWC,EAXDA,UACAwH,EAUC,EAVDA,kBACAf,EASC,EATDA,gBACAD,EAQC,EARDA,yBACAG,EAOC,EAPDA,gBACAD,EAMC,EANDA,eACAkB,EAKC,EALDA,oBACAhB,EAIC,EAJDA,yBACAC,EAGC,EAHDA,8BACAC,EAEC,EAFDA,YACAra,EACC,EADDA,MAEA,OACE,yBAAKpB,UAAU,gBAAgBoB,MAAOA,GACpC,kBAAC8a,GAAD,CACEtZ,SAAUA,EACVkH,SAAU6K,EACVwH,kBAAmBA,IAEpBxH,GACC,kBAACuG,GAAD,CACE5W,QAASqQ,EACTwG,yBAA0BA,EAC1BC,gBAAiBA,EACjBE,gBAAiBA,EACjBD,eAAgBA,EAChBkB,oBAAqBA,EACrBhB,yBAA0BA,EAC1BE,YAAaA,EACbD,8BAA+BA,KVCzCrD,GAAalL,aAAe,CAC1BvF,KAAM,GACN/E,QAAS,IKjBXgX,GAAoB1M,aAAe,CAC/B0H,UAAW,IC2CfoF,GAAW9M,aAAe,CACxB7L,MAAO,IEkET8Z,GAAajO,aAAe,CAC1B7L,MAAO,GACPob,mBAAoB,GACpBC,gBAAiB,ICpGnBP,GAAajP,aAAe,CAC1BrK,SAAU,GACVxB,MAAO,ICKTkb,GAAarP,aAAe,CAC1B7L,MAAO,I,iCCxCHsb,GAAoB,G,MCkBX,SAASC,GAAT,GAAgC,IAAVxb,EAAS,EAATA,MAAS,EACRV,mBAAS,MADD,mBACrC8J,EADqC,KACzBC,EADyB,OAEM/J,mBAAS,MAFf,mBAErCmc,EAFqC,KAElBC,EAFkB,OAGApc,mBAAS,IAHT,mBAGrCqc,EAHqC,KAGrBC,EAHqB,KAIpCxT,EAAapI,EAAMwP,OAAnBpH,SAJoC,EvBiYjB,SAAAA,GAAa,IAAD,EACb0G,IADa,mBAChCzC,EADgC,KACzB0B,EADyB,KAEjC8N,EAAaxP,EAAMI,YAAYrK,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOwH,KACxD,IAAKyT,EACH,MAAO,CACLA,WAAY,KACZzY,QAAS,GACT3B,SAAU,GACVqa,UAAW,GACX/N,YAGJ,IAAM3K,EAAUiJ,EAAMjJ,QAAQd,QAAO,SAAAqC,GAAC,OACpCkX,EAAWra,QAAQwF,SAASrC,EAAEzB,cAI1B6Y,EAAahJ,MAAMC,KAAK,IAAIL,IAAIvP,EAAQlB,KAAI,SAAAyC,GAAC,OAAIA,EAAE/C,UACnDoa,EAAcD,EAAW7Z,KAAI,SAAAN,GACjC,IACM0B,EADmBF,EAAQd,QAAO,SAAAqC,GAAC,OAAIA,EAAE/C,OAASA,KACzB2C,QAAO,SAACjB,EAAO2Y,GAAR,OAAe3Y,EAAQ2Y,EAAGvU,QAAO,GACvE,MAAO,CACL9F,OACA8F,MAAOpE,MAIL7B,EAAW4K,EAAM5K,SAASa,QAAO,SAAAW,GAAC,OAAIA,EAAEC,YAAc2Y,EAAWjb,MACjE4L,EAAaH,EAAMG,WAAWlK,QAAO,SAAA0O,GAAK,OAC9C+K,EAAW/U,SAASgK,EAAMtD,UAE5B,MAAO,CAACmO,aAAYzY,QAAS4Y,EAAava,WAAU+K,aAAYuB,YuB1ZZmO,CAAc9T,GAA1DhF,EANoC,EAMpCA,QAAS3B,EAN2B,EAM3BA,SAAU+K,EANiB,EAMjBA,WAAYuB,EANK,EAMLA,SACjCoO,EAAkB1a,EAASW,MAAK,SAAAa,GAAC,OAAIA,EAAErC,KAAO6a,KAEpD1W,qBAAU,WACJ3B,GnBiFD,SAAoCA,EAAS2K,GAClD0E,GAAerP,GAASyE,MAAK,SAAA2E,GAC3BuB,EAAS,CACPrL,KAAM,gBACN4K,QAASd,OmBpFT4P,CAA2BhZ,EAAS2K,KAErC,CAACE,KAAKC,UAAU9K,KAEnB,IAAMiZ,EAAqBjZ,EAAQd,QACjC,SAAAoL,GAAK,OAAKjM,EAAS6a,MAAK,SAAArZ,GAAC,OAAIA,EAAEG,QAAQ4D,SAAS0G,EAAM9L,YAhBZ,EAmBjB2a,KAAQ,CACjChW,KAAM8V,EACN3T,QAAS,CACP8T,YAAY,EACZC,gBAAgB,EAChBnV,KAAM,CAAC,QACPoV,eAAe,KANX5U,EAnBoC,EAmBpCA,OAAQ6U,EAnB4B,EAmB5BA,OAUVC,EAAmB9U,EAAO,IAAMA,EAAO,GAAGqF,KAAQrF,EAAO5F,KAAI,SAAAmR,GAAC,OAAIA,EAAElG,QAAQrF,EAwC5E+U,EAAiB,WACrBjB,EAAkB,KAGdkB,EAAwB,SAC5BC,GAEI,IADJC,EACG,wDACHtJ,GAAoByI,EAAiBY,EAAchP,GAC/CiP,GACFH,KAUEI,EAAe,SAAAlT,GACnBV,EAAcU,GACd4S,EAAO5S,IAGHmT,EAAuB1Q,GAAc2P,EAErCd,EAAqB6B,EACvBzM,EACA0L,EAAgB/Y,QAChB+Y,EAAgB1I,kBAChB4I,EACA7P,GAEA,GAME8N,EAAc,CAAEvQ,KAJEmT,EDzHO,SAAC/Z,EAASC,GACzC,IAAMoB,EAAM,GAmBZ,OAlBArB,EAAQnB,SAAQ,SAAAmb,GACd/Z,EAAQpB,SAAQ,SAAA0L,GACd,IAAM0P,EAAW,CAACD,EAAezP,EAAM9L,MAAMyG,KAAK,KAElD,IAAKlF,EAAQ6D,SAAS0G,GACpB,GAAI6N,GAAkB6B,GACpB5Y,EAAI8B,KAAK,CACPsL,WAAYlE,EAAM9L,KAClByb,MAAO9B,GAAkB6B,SAEtB,CACL,IAAM1L,EAAO4L,OAAQH,EAAezP,EAAM9L,MAC1C2Z,GAAkB6B,GAAY1L,EAC9BlN,EAAI8B,KAAK,CAAEsL,WAAYlE,EAAM9L,KAAMyb,MAAO3L,WAK3ClN,EAAIqN,MAAK,SAACd,EAAGe,GAAJ,OAAWf,EAAEsM,MAAQvL,EAAEuL,MAAQ,GAAK,KAAIzY,MAAM,EAAG,GCsG7D2Y,CAAkBpB,EAAgB/Y,QAASiZ,GAC3C,GAEyCmB,QAASnC,GAE9CzO,EAAiBkC,IAAjBlC,aAEF6Q,EAAQ,CACZhc,SAAUA,EAASqD,OACnB4Y,WAAYta,EAAQmB,QAAO,SAACjB,EAAOqB,GAAR,OAAcrB,EAAQqB,EAAE+C,QAAO,GAC1DiW,kBAAmBlc,EAChBS,KAAI,SAAAe,GAAC,OACJA,EAAEG,QAAQmB,QACR,SAACjB,EAAOoK,GAAR,OAAkBpK,EAAQF,EAAQhB,MAAK,SAAAuC,GAAC,OAAIA,EAAE/C,OAAS8L,KAAOhG,QAC9D,MAGHnD,QAAO,SAACjB,EAAOpB,GAAR,OAAgBoB,EAAQpB,IAAK,GACvC0b,0BAA2Bnc,EAAS8C,QAClC,SAACjB,EAAOL,GAAR,OAAcK,EAAQL,EAAEG,QAAQ0B,SAChC,IAQJ,OAJAoC,QAAQC,IAAI,YAAayV,GAIpBhQ,EAwEI,uCAtEL,yBAAK/N,UAAU,eACb,kBAACiK,EAAD,CACE7I,MAAO,CAAE4d,SAAU,SAAUrd,MAAO,MAAOsd,YAAa,UACxD3V,SAAU8U,EACVc,QAAS,kBAAMd,EAAa,KAC5B1Z,MAAO6F,EACPL,OAAO,yCAET,kBAAC6P,GAAD,eACExV,QAASwZ,EACT3c,MAAO,CACL4d,SAAU,QACVG,UAAW,SACXxd,MAAO,OACPC,OAAQ,QAEVoY,kBAxHqB,SAAAnL,GAC3B,IAAMuQ,EAA4B,iBAATvQ,EAAoBA,EAAQA,EAAM9L,KAEvD+Z,EAAe3U,SAASiX,GAC1BrC,EAAkBD,EAAerZ,QAAO,SAAA4b,GAAC,OAAIA,IAAMD,MAEnDrC,EAAkB,GAAD,mBAAKD,GAAL,CAAqBsC,MAmHlCzK,UAAWmI,EACX7C,iBAAkB+D,GACdzZ,IAEN,sCACA,yBAAKvE,UAAU,qBACb,yBAAKA,UAAU,SACb,2BACE,8BAAO4e,EAAMG,2BADf,KACmD,IACjD,8BAAOxa,EAAQ0B,QAFjB,aAE0C,IACxC,8BAAO2Y,EAAME,mBAHf,KAG2C,IACzC,8BAAOF,EAAMC,YAJf,UAOF,yBAAK7e,UAAU,wBACb,4BACE6M,SAAoC,IAA1BiQ,EAAe7W,OACzBnF,QAhIY,WACtB,IAAMiB,EAAK2S,GACToI,EACAvT,EACAuT,EAAe,GACf5N,GAEF6N,EAAkB,IAClBF,EAAqB9a,KAsHb,eAGe+a,EAAe7W,QAE9B,4BACE4G,WAAYiQ,EAAe7W,OAAS,GAAK2W,GACzC9b,QAAS,kBAAMmd,EAAsBnB,GAAgB,KAFvD,kBAKA,4BACEhc,QAAS,kBACP4T,GAAc8I,EAAoBjU,EAAU,QAAS2F,KAFzD,4BAQJ,kBAACoN,GAAD,eACE1Z,SAAUA,EACV+R,UAAW/R,EAASW,MAAK,SAAAa,GAAC,OAAIA,EAAErC,KAAO6a,KACvCxb,MAAO,CAAE4d,SAAU,YACnB7C,kBAAmB,SAAAkD,GAAC,OAAIxC,EAAqBwC,EAAEtd,KAC/CqZ,gBA1IgB,SAAC9W,EAASvB,InBxD7B,SAAuBuB,EAASgb,EAASpQ,GAC9CA,EAAS,CACPrL,KAAM,iBACN4K,QAAS,CACPnK,QAAS,CACPvB,KAAMuc,GAERvd,GAAIuC,EAAQvC,MmBkDdwd,CAAcjb,EAASvB,EAAMmM,IA0IvBiM,yBAvIyB,SAACtM,EAAOvK,InBGpC,SAAgCA,EAASuK,EAAOK,GACrDA,EAAS,CACPrL,KAAM,iBACN4K,QAAS,CACP1M,GAAIuC,EAAQvC,GACZuC,QAAS,CACPC,QAASD,EAAQC,QAAQd,QAAO,SAAAqC,GAAC,OAAIA,IAAM+I,SmBR/CgN,CAAuBvX,EAASuK,EAAOK,IAuIjCoM,gBAhIgB,SAAAhX,InBOnB,SAAuBA,EAAS4K,GACrCA,EAAS,CACPrL,KAAM,iBACN4K,QAASnK,EAAQvC,KmBTjByd,CAAclb,EAAS4K,IAgIjBmM,eArIe,SAAA/W,InBkBlB,SAAsBA,EAAS4K,GACpCA,EAAS,CACPrL,KAAM,iBACN4K,QAAS,CACP1M,GAAIuC,EAAQvC,GACZuC,QAAS,CACPC,QAAS,OmBvBbkb,CAAanb,EAAS4K,IAqIhBuM,YAAaA,EACbF,yBAA0B,SAAAxI,GAAU,OAClCkL,EAAsB,CAAClL,KAEzByI,8BApH8B,SAAA3M,InBiBjC,SAAqCvK,EAASuK,EAAOK,GAC1DA,EAAS,CACPrL,KAAM,iBACN4K,QAAS,CACP1M,GAAIuC,EAAQvC,GACZuC,QAAS,CACPsQ,kBAAkB,GAAD,mBAAMtQ,EAAQsQ,mBAAd,CAAiC/F,QmBtBtDoN,CAA4BqB,EAAiBzO,EAAOK,KAoH1CtM,EAdN,CAeE8c,KAAM,CAAE9d,OAAQ,aCvNX,SAAS+d,GAAT,GAA0C,IAAnBnd,EAAkB,EAAlBA,QAASoc,EAAS,EAATA,MAC7C,OACE,yBAAK5e,UAAU,qBACb,wBAAIA,UAAU,SAASwC,EAAQO,MAC/B,uBAAG/C,UAAU,eAAewC,EAAQQ,aACpC,yBAAKhD,UAAU,sBACb,8BACG4e,EAAMjc,QADT,IACkB,kBAAC,IAAD,CAAiBvC,KAAMkV,OAEzC,8BACGsJ,EAAMnc,SADT,IACmB,kBAAC,IAAD,CAAiBrC,KAAMgV,OAE1C,8BACGwJ,EAAMlc,aADT,IACuB,kBAAC,IAAD,CAAiBtC,KAAMgV,SAO/C,IAAMwK,GAAmB,SAAC,GAAD,IAAG1V,EAAH,EAAGA,OAAQ9J,EAAX,EAAWA,KAAX,OAC9B,yBAAKJ,UAAU,sCACb,wBAAIA,UAAU,SAASkK,GACvB,kBAAC,IAAD,CAAiB9J,KAAMA,EAAM4G,KAAM,SCvBxB,SAAS6Y,KACpB,IAAMnS,EzBgbqB,WAAO,IAAD,EACnBuC,IAATzC,EAD4B,oBAE5BE,EAA+BF,EAA/BE,SAAUjL,EAAqB+K,EAArB/K,SAAUE,EAAW6K,EAAX7K,QAuB3B,OAtBsB+K,EAAShI,QAAO,SAACkZ,EAAOpc,GAC5C,IAAMsd,EAAmBrd,EACtBgB,QAAO,SAAAzB,GAAC,OAAIA,EAAE2M,aAAenM,EAAQT,MACrCsB,KAAI,SAAArB,GAAC,OAAIA,EAAED,MACRge,EAAkBpd,EAAQc,QAAO,SAAAD,GAAC,OACtCsc,EAAiB3X,SAAS3E,EAAEzB,OAExBie,EAAuBrd,EAAQc,QACnC,SAAAL,GAAE,OAAIA,EAAGuL,aAAenM,EAAQT,MAElC,MAAM,GAAN,mBACK6c,GADL,CAEE,CACEpc,QAASA,EACToc,MAAO,CACLnc,SAAUA,EAASwD,OACnBtD,QAASod,EAAgB9Z,OACzBvD,aAAcsd,EAAqB/Z,aAIxC,IyBxcgBga,GADiB,EzB6cZ,WAAO,IAAD,EACQhQ,IADR,sBACtBjC,EADsB,EACtBA,cAAeC,EADO,EACPA,WACvB,OAAID,EACK,CACLC,aACAyB,MAAO1B,EAAc0B,MAAQ,IAC7BC,MAAO3B,EAAc2B,MAAQ,KAGxB,GyBpdkBuQ,GAAjBxQ,EAF0B,EAE1BA,MAAOC,EAFmB,EAEnBA,MAEf,OACI,yBAAK3P,UAAU,qBACX,4BAAQA,UAAU,uBACd,wBAAIA,UAAU,sBAAd,WACA,2DACA,uBAAGA,UAAU,YAAb,wDAC0D,IACtD,uBACIE,OAAO,SACPC,IAAI,sBACJF,KAAK,mEAHT,YAMK,IART,iCASmC,IAC/B,uBACIC,OAAO,SACPC,IAAI,sBACJF,KAAK,0CAHT,mBASPyN,GACG,yBAAK1N,UAAU,iBACX,yBAAKA,UAAU,IACX,yBAAKA,UAAU,iBACX,+CAEJ,yBAAKA,UAAU,eACV0N,EAASrK,KAAI,SAAAuL,GAAC,OACX,kBAAC,IAAD,CAAM5N,GAAE,mBAAc4N,EAAEpM,QAAQT,KAC5B,kBAAC4d,GAAD,CACInd,QAASoM,EAAEpM,QACXoc,MAAOhQ,EAAEgQ,YAIrB,kBAAC,IAAD,CAAM5d,GAAI,gBACN,kBAAC,GAAD,CACIkJ,OAAQ,cACR9J,KAAM+f,OAGd,kBAAC,IAAD,CAAMnf,GAAI,iBACN,kBAAC,GAAD,CACIkJ,OAAQ,eACR9J,KAAMggB,UAQ9B,yBAAKpgB,UAAU,WACX,6FAIC0P,GACG,oDAC2BC,EAAMxG,iBADjC,SACyD,IACpDuG,EAAMvG,iBAFX,UCvEL,SAASkX,KACpB,OACI,yBAAKrgB,UAAU,cACX,iCACI,gDACA,qGAKA,6TAQA,4KAMJ,iCACI,oDACA,mQAOA,8OAOA,iDACwB,IACpB,uBAAGC,KAAK,2BAAR,2BAEK,IAJT,0BAK4B,IACxB,uBAAGA,KAAK,kCAAR,2BANJ,MAaJ,iCACI,uDACA,+MAIO,IACH,uBAAGA,KAAK,4CAAR,oCAKJ,8OAOA,iDACwB,IACpB,uBAAGA,KAAK,2BAAR,2BAEK,IAJT,0BAK4B,IACxB,uBAAGA,KAAK,kCAAR,2BANJ,OCtED,SAASqgB,GAAT,GASX,IARFvd,EAQC,EARDA,KACAC,EAOC,EAPDA,YACAud,EAMC,EANDA,YACAzW,EAKC,EALDA,SACAhJ,EAIC,EAJDA,QACA6Z,EAGC,EAHDA,SACA6F,EAEC,EAFDA,UACAC,EACC,EADDA,KAEMC,EAAcH,EAAY7a,QAAO,SAACib,EAAKnd,GAAN,OAAYmd,EAAMnd,EAAEmF,SAAQ,GACnE,OACE,yBACE7H,QAASA,EACTd,UAAS,2BAAsB8J,EAAW,WAAa,KACvD,yBACE1I,MAAO,CACLC,QAAS,OACT8T,cAAe,MACf4D,eAAgB,kBAElB,kBAAC2B,GAAD,CAAcxP,KAAMnI,EAAM4X,SAAUA,IACpC,4BAAK+F,IAEP,uBAAG1gB,UAAU,eAAegD,GAE3Bud,EAAYld,KAAI,SAAAG,GAAC,OAChB,uBAAGoF,IAAKpF,EAAET,MACPS,EAAET,KADL,MACcS,EAAEuB,QAAQhC,SAG1B,yBAAK/C,UAAU,yBACZugB,EAAYta,OAAS,GACpB,4BAAQnF,QAAS0f,GAAjB,gBAEF,kBAAC,IAAD,CAAMxgB,UAAU,0BAA0BgB,GAAIyf,GAC5C,uDCjBK,SAASG,GAAY5K,GAAQ,IAClC7U,EAAmB6U,EAAnB7U,MAAOD,EAAY8U,EAAZ9U,QACPkP,EAAcjP,EAAMwP,OAApBP,UAFiC,EAWrCD,EAAWC,GAPb5N,EAJuC,EAIvCA,QACAC,EALuC,EAKvCA,SACAmL,EANuC,EAMvCA,YACAjL,EAPuC,EAOvCA,QACAC,EARuC,EAQvCA,SACA2B,EATuC,EASvCA,QACAkM,EAVuC,EAUvCA,cAVuC,EAaahQ,mBACpDgC,GAAYA,EAASwD,OAAS,EAAIxD,EAAS,GAAGM,KAAO,MAdd,mBAalC8d,EAbkC,KAabC,EAba,KAkBzC5a,qBAAU,WACJzD,EAASwD,OAAS,IAAM4a,GAC1BC,EAAuBre,EAAS,GAAGM,QAEpC,CAACN,EAAUoe,IAEd,IAAME,EAAkBte,EAASc,MAAK,SAAAvB,GAAC,OAAIA,EAAEe,OAAS8d,KAxBb,EA0BpB5Q,IAAZf,EA1BgC,sBA2BKzO,mBAAS,IA3Bd,mBA2BlCugB,EA3BkC,KA2BjBC,EA3BiB,KAyDnCC,EAAyB,SAAAnf,IxB0E1B,SAA2B+M,EAAaI,GAC7CJ,EAAYnM,QAAQQ,SAAQ,SAAAuL,GAC1BQ,EAAS,CACPrL,KAAM,iCACN4K,QAAS,CACPC,SACA3M,GAAIM,KACJsM,WAAYG,EAAYH,iBAK9BO,EAAS,CACPrL,KAAM,sBACN4K,QAAS,CAACK,EAAY/M,MAGxBmN,EAAS,CACPrL,KAAM,iCACN4K,QAASK,EAAY/M,KwB5FrBof,CAAkBvT,EAAYrK,MAAK,SAAAH,GAAE,OAAIA,EAAGrB,KAAOA,KAAKmN,IAGpDkS,EAAoB,SAAAC,GACxB,IAAMjY,EAASzG,EAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOsf,KAC1C,MAAO,CACLtc,QAAStC,EAASc,MAAK,SAAAvB,GAAC,OAAIA,EAAED,KAAOqH,EAAO1F,cAC5CX,KAAMqG,EAAOrG,KACbhB,GAAIqH,EAAOrH,GACX4G,OAAQS,EAAOT,SAUnB,OACE,yBAAK3I,UAAU,qBACZwC,EACC,kBAAC,IAAM0G,SAAP,KACE,yBAAKlJ,UAAU,WACb,yBAAKA,UAAU,iBACb,4BACE,kBAAC,IAAD,CACEI,KAAMkhB,IACNlgB,MAAO,CAAEiU,YAAa,UAH1B,WAQA,yBAAKrV,UAAU,IACb,4BAAQc,QA/DA,YnCgGG,SACzB0B,EACAC,EACAC,EACAC,EACAC,EACA2B,EACA1B,GAEA,IAAIC,EAAc,CAChBN,UACAC,WACAC,eACAC,UACAC,WACA2B,WAGIgd,EAAW,UAAM/e,EAAQO,KAAd,SACbye,EAAO,IAAIC,KAAK,CAACrS,KAAKC,UAAUvM,IAAe,CACjDe,KAAM,6BAGRoU,iBAAOuJ,EAAMD,GmCtHXG,CACElf,EACAC,EACAmL,EACAjL,EACAC,EACA2B,KAwDU,kBACA,kBAAC,IAAD,CAAMvD,GAAE,mBAAcoP,EAAd,YACN,uDAEF,4BAAQtP,QApDI,WACxB2P,IACAvP,EAAQuG,KAAK,OAkDD,qBAON,yBAAKzH,UAAU,YACb,yBAAKA,UAAU,iBACb,4BACE,kBAAC,IAAD,CACEI,KAAMuhB,IACNvgB,MAAO,CAAEiU,YAAa,UAH1B,YAOA,yBAAKrV,UAAU,cACb,oCAAUwC,EAAQO,MAClB,2CAAiBP,EAAQQ,gBAM/B,yBAAKhD,UAAU,kBACb,yBAAKA,UAAU,iBACb,4BACE,kBAAC,IAAD,CACEI,KAAMkV,IACNlU,MAAO,CAAEiU,YAAa,UAH1B,WAOC2L,EAAgB/a,OAAS,EACxB,4BACEnF,QA5DK,YxBmFhB,SAA0B4B,EAAcwM,GAC7C,IAAM0S,EAAUlf,EAAa,GACvB6N,EAAM7N,EAAaW,KAAI,SAAAD,GAAE,OAAIA,EAAGrB,MAEtCW,EAAaqD,MAAM,GAAG5C,SAAQ,SAAAC,GAC5Bwe,EAAQjf,QAAR,sBAAsBif,EAAQjf,SAA9B,YAA0CS,EAAGT,aAG/CuM,EAAS,CACPrL,KAAM,sBACN4K,QAAS8B,IAGXrB,EAAS,CACPrL,KAAM,mBACN4K,QAAS,CAACmT,KwBhGVC,CADgBjU,EAAYnK,QAAO,SAAAL,GAAE,OAAI4d,EAAgB7Y,SAAS/E,EAAGrB,OAC3CmN,GAC1B+R,EAAmB,MAwDP,gBAGcD,EAAgB/a,OAH9B,aAKE,IAGN,yBAAKjG,UAAU,2BACZ4N,EAAYvK,KAAI,SAAAD,GAAE,OACjB,kBAACkd,GAAD,CACEvd,KAAMK,EAAGL,KACTC,YAAaI,EAAGJ,YAChBud,YAAand,EAAGT,QAAQU,IAAI+d,GAC5BtX,SAAUkX,EAAgB7Y,SAAS/E,EAAGrB,IACtCjB,QAAS,kBAhGIiB,EAgGuBqB,EAAGrB,QA/FjDif,EAAgB7Y,SAASpG,GAC3Bkf,EAAmBD,EAAgBvd,QAAO,SAAAqe,GAAG,OAAIA,IAAQ/f,MAEzDkf,EAAmB,GAAD,mBAAKD,GAAL,CAAsBjf,MAJf,IAAAA,GAiGb4Y,SAAU,SAAA2E,GAAO,OAzGZ,SAAClc,EAAIL,IxBgFrB,SAA0BhB,EAAIggB,EAAS7S,GAC5CA,EAAS,CACPrL,KAAM,qBACN4K,QAAS,CACP1M,KACA+M,YAAaiT,KwBpFfC,CAAiB5e,EAAGrB,GAAI,CAAEgB,QAAQmM,GAwGC+S,CAAa7e,EAAIkc,IACtCkB,UAAW,kBAAMU,EAAuB9d,EAAGrB,KAC3C0e,KAAI,mBAAcje,EAAQT,GAAtB,mBAAmCqB,EAAGrB,IAC1C6G,IAAKxF,EAAGrB,UAMhB,yBAAK/B,UAAU,mBACb,yBAAKA,UAAU,iBACb,4BACE,kBAAC,IAAD,CACEI,KAAMgV,IACNhU,MAAO,CAAEiU,YAAa,UAH1B,aAQF,yBAAKrV,UAAU,sBACb,yBAAKA,UAAU,gBACZyC,EAASY,KAAI,SAAC0B,EAAS+N,GAAV,OACZ,uBACElK,IAAK7D,EAAQhC,KACb/C,UACE6gB,IAAwB9b,EAAQhC,KAC5B,+BACA,cAENjC,QAAS,kBAAMggB,EAAuB/b,EAAQhC,QAC9C,0BAAM/C,UAAU,kBAAkB8S,EAAQ,GAR5C,IAQsD,0BAAM9S,UAAU,gBAAgB+E,EAAQhC,UAGhG,uBAAG/C,UAAU,6BAAb,UACA,yBAAKA,UAAU,WACf,kBAAC,IAAD,CACEgB,GAAE,mBAAcoP,EAAd,iBACFpQ,UAAU,2BACV,kBAAC,IAAD,CAAiBI,KAAM+f,MACvB,0BAAMngB,UAAU,gBAAhB,iBAGJ,yBAAKA,UAAU,SACZyC,EAASwD,OAAS,GAAK8a,GACtB,kBAAC5I,GAAD,CACEzQ,KAAMqZ,EAAgBna,OACtBjE,QAASoe,EAAgBpe,cASnC,kD,YC5JKuf,OAjDf,WACI,OACI,kBAAC,IAAD,CAAQC,SAAU1gB,YACd,kBAACgU,GAAD,MACA,yBAAKzV,UAAU,OACX,yBAAKA,UAAU,QACX,kBAAC,KAAD,CACIoiB,KAAK,yCACLC,OAAO,EACPC,UAAWzJ,KAEf,kBAAC,KAAD,CACIuJ,KAAK,uCACLC,OAAO,EACPC,UAAW3F,KAEf,kBAAC,KAAD,CACIyF,KAAK,sBACLC,OAAO,EACPC,UAAW1B,KAEf,kBAAC,KAAD,CAAOwB,KAAK,SAASC,OAAO,EAAMC,UAAWjC,KAC7C,kBAAC,KAAD,CAAO+B,KAAK,IAAIC,OAAO,EAAMC,UAAWzC,MAE5C,kBAACzd,EAAD,MAEA,kBAAC,KAAD,CAAOggB,KAAK,IAAIE,UAAWrhB,IAE3B,kBAAC,KAAD,CAAOmhB,KAAK,eAAeE,UAAWpR,IACtC,kBAAC,KAAD,CAAOkR,KAAK,gBAAgBE,UAAWC,KAEvC,kBAAC,KAAD,CACIH,KAAK,6BACLE,UAAWzL,KAEf,kBAAC,KAAD,CACIuL,KAAK,mCACLE,UAAW5R,IAGf,kBAAC,KAAD,CACI0R,KAAK,4BACLE,UAAWE,QCjDXC,QACW,cAA7B5M,OAAOC,SAAS4M,UAEe,UAA7B7M,OAAOC,SAAS4M,UAEhB7M,OAAOC,SAAS4M,SAASvhB,MACvB,2DCXNwhB,IAASC,OACT,kBAAC,EAAD,KACE,kBAAC,GAAD,OACgBC,SAASC,eAAe,SDuHpC,kBAAmBxT,WACrBA,UAAUyT,cAAcC,MAAMha,MAAK,SAAAia,GACjCA,EAAaC,kB","file":"static/js/main.f24bb3f1.chunk.js","sourcesContent":["import React from 'react'\n\nimport {\n    faTwitter,\n    faMedium,\n    faGithub,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function Social() {\n\n    return (\n        <div className=\"social\">\n            <a href=\"https://twitter.com/tsdataclinic?lang=en\" target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faTwitter} />\n            </a>\n            <a href=\"https://medium.com/dataclinic\" target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faMedium} />\n            </a>\n            <a href=\"https://github.com/tsdataclinic\" target=\"blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <FontAwesomeIcon icon={faGithub} />\n            </a>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport Social from './Social'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport {\n    faBars,\n    faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nexport default function Nav() {\n    const [showMenu, setShowMenu] = useState(false)\n    const toggleMenu = () => setShowMenu(!showMenu)\n    return (\n        <div className=\"top-menu\">\n            <FontAwesomeIcon className='hamburger-menu' icon={faBars}\n                onClick={toggleMenu}\n            />\n            <div className={`menu-links ${showMenu ? '' : 'hidden'}`}>\n                <FontAwesomeIcon className='menu-close-icon' icon={faTimes} onClick={toggleMenu} />\n                <Link onClick={toggleMenu} to=\"/\">Projects</Link>\n                <Link onClick={toggleMenu} to=\"/about\">About</Link>\n                <a onClick={toggleMenu} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n                    Feedback\n                </a>\n\n                <Social />\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from './Nav'\n\nexport default function Header({ history, match }) {\n  return (\n    <div className=\"header\">\n      <div className=\"logos\">\n        <Link style={{ display: 'flex', alignItems: 'center' }} to={'/'}>\n          <img alt={\"Data Clinic Modal\"} src={`${process.env.PUBLIC_URL}/DataClinicLogo.png`} />{' '}\n          <span className=\"data-clinic\">Data Clinic</span>{' '}\n        </Link>\n        <span className=\"project-name\">smooshr (beta)</span>\n      </div>\n      <div className=\"spacer\" />\n      <Nav />\n\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TwoSigmaLogo() {\n  return (\n    <svg\n      width=\"116\"\n      height=\"21\"\n      viewBox=\"0 0 230 42\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      {' '}\n      <title>Two Sigma</title>\n      <defs>\n        <path id=\"a\" d=\"M19.436 21.668V1.025H0v20.643h19.435z\"></path>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          fill=\"#FFFFFF\"\n          d=\"M59.06 13.464h-7.137v-3.155h17.811v3.155H62.6V30.95h-3.54zm14.01-3.155h3.745l4.747 15.66h.06l4.483-15.66h3.301l4.454 15.66h.059l4.777-15.66h3.716L95.895 30.95H92.09l-4.335-15.127h-.059L83.361 30.95h-3.804zm41.214-.355c5.986 0 10.527 4.158 10.527 10.556 0 6.55-4.541 10.794-10.527 10.794-5.985 0-10.558-4.245-10.558-10.794 0-6.398 4.573-10.556 10.558-10.556m0 18.285c3.892 0 6.93-2.89 6.93-7.729 0-4.658-3.007-7.518-6.93-7.518-3.922 0-6.93 2.86-6.93 7.518 0 4.839 3.038 7.73 6.93 7.73m40.846-17.931h3.539V30.95h-3.54V19.41zm18.744-.355c2.832 0 5.222.885 7.313 2.33 0 0-2.026 2.374-2.128 2.311-1.56-1-3.21-1.574-5.096-1.574-4.247 0-7.048 3.068-7.048 7.433 0 4.746 2.624 7.785 7.048 7.785 1.534 0 3.067-.385 4.13-1.003v-4.897h-5.19v-2.623h8.462v9.347c-2.007 1.416-4.63 2.24-7.49 2.24-6.46 0-10.587-4.363-10.587-10.85 0-6.075 4.187-10.499 10.586-10.499m12.506.355h3.57l6.812 9.701 6.811-9.701h3.541V30.95h-3.421V15.558l-6.962 9.73-6.958-9.73V30.95h-3.392z\"></path>\n        <g transform=\"translate(210.418 9.283)\">\n          <path\n            d=\"M7.639 1.025h4.158l7.64 20.643H15.63l-1.561-4.454H5.368l-1.533 4.454H0L7.639 1.025zM6.34 14.354h6.725L9.734 4.74h-.06L6.34 14.354z\"\n            fill=\"#FFFFFF\"></path>\n        </g>\n        <path\n          d=\"M136.826 26.498c1.861 1.007 3.618 1.68 5.887 1.68 2.715 0 4.069-1.18 4.069-2.83 0-4.66-11.616-1.594-11.616-9.466 0-3.303 2.74-5.928 7.37-5.928 2.714 0 5.443.653 7.579 1.902l-2.314 2.361c-1.68-.72-3.11-1.137-5.146-1.137-2.389 0-3.806 1.21-3.806 2.744 0 4.63 11.62 1.473 11.62 9.494 0 3.393-2.567 5.985-7.756 5.985-3.035 0-6.33-1.076-8.273-2.419l2.386-2.386z\"\n          fill=\"#FFFFFF\"></path>\n        <path\n          fill=\"#009AA6\"\n          d=\"M20.625 0L0 20.63l20.625 20.628 20.63-20.628z\"></path>\n        <path\n          d=\"M9.748 26.478c-.16-6.605 7.789-5.746 7.789-9.13 0-1.1-.863-2.041-2.784-2.041-1.401 0-2.743.701-3.724 1.602l-1.46-1.463c1.259-1.18 3.223-2.14 5.284-2.14 3.304 0 4.986 1.842 4.986 4.003 0 4.986-7.728 4.104-7.728 8.27h7.607v1.98h-9.95l-.02-1.081zm15.937-.5c-1.521 0-2.423-.98-2.423-2.862 0-2.404 1.602-4.566 3.525-4.566 1.5 0 2.402.981 2.402 2.883 0 2.401-1.582 4.545-3.504 4.545zm9.713-9.25h-8.444v.003c-3.437.005-6.033 2.745-6.033 6.403 0 2.905 1.881 4.666 4.544 4.666 3.464 0 6.067-2.743 6.067-6.386 0-1.182-.313-2.173-.856-2.935h2.947l1.775-1.75z\"\n          fill=\"#FFF\"></path>\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport TwoSigmaLogo from './TwoSigmaLogo';\nimport Social from './Social'\n\nexport default function Footer() {\n  return (\n    <footer>\n      <TwoSigmaLogo />\n      <p className=\"copyright\">\n        © 2019 Two Sigma Investments, LP. All rights reserved.\n      </p>\n      <Social />\n    </footer>\n  );\n}\n","import Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\nimport slugify from 'slugify';\nimport python_template from './python_file';\nimport JSZip from 'jszip';\n\nconst uuidv1 = require('uuid/v1');\n\n// Takes a file handle and returns the summary stats for that file\nexport function parseFileForPreview(\n  file,\n  onProgress = null,\n  report_progress_every = 200,\n  sample_rows = 10,\n  max_unique = 20000,\n) {\n  return new Promise((resolve, reject) => {\n    let no_rows = 0;\n    let set_dict = {};\n    let sample = [];\n    let exceded = [];\n    let columnCounts = {};\n\n    let ref = file.ref;\n    let fileSize = ref.size;\n\n    if (file.type !== 'file') {\n      ref = ref.split('?')[0];\n      ref = `${process.env.REACT_APP_API_URL}/proxy?url=${ref}`;\n    }\n\n    Papa.parse(ref, {\n      worker: true,\n      header: true,\n      download: file.type !== 'file',\n      step: function (row) {\n        if (no_rows < sample_rows) {\n          sample.push(row.data);\n        }\n\n        if (no_rows === 0) {\n          row.meta.fields.forEach(f => {\n            set_dict[f] = {};\n            columnCounts[f] = 0;\n          });\n        }\n\n        no_rows = no_rows + 1;\n\n        if (no_rows % report_progress_every === 0 && onProgress) {\n          onProgress({\n            rows_read: no_rows,\n            bytes_read: row.meta.cursor,\n            total_size: fileSize,\n          });\n        }\n\n        row.meta.fields.forEach(f => {\n          let val = row.data[f];\n\n          if (val === f) {\n            return;\n          }\n          if (val in set_dict[f]) {\n            set_dict[f][val] += 1;\n          } else {\n            if (columnCounts[f] < max_unique) {\n              set_dict[f][val] = 1;\n              columnCounts[f] += 1;\n            } else if (!exceded.includes(f)) {\n              exceded.push(f);\n            }\n          }\n        });\n      },\n      error: error => {\n        console.log('something bad happened ', error);\n      },\n      complete: () => {\n        let columns = [];\n        let entries = [];\n        const dataset_id = uuidv1();\n        Object.keys(set_dict).forEach(field => {\n          let column_id = uuidv1();\n\n          columns.push({\n            unique: Object.keys(set_dict[field]).length,\n            id: column_id,\n            name: field,\n            key: field,\n            dataset_id: dataset_id,\n            type: 'text',\n            exceded: exceded.includes(field),\n          });\n\n          Object.entries(set_dict[field]).forEach(([field, count]) =>\n            entries.push({ column_id, name: field, count }),\n          );\n        });\n\n        resolve({\n          dataset: {\n            id: dataset_id,\n            name: file.type === 'url' ? file.ref.split('?')[0] : file.ref.name,\n            file: file,\n            row_count: no_rows,\n            sample: sample,\n          },\n          columns: columns,\n          entries: entries,\n        });\n      },\n    });\n  });\n}\n\nexport const exportPythonCode = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  const recipe_name = slugify(project.name) + '.json';\n  const output_data_name = slugify(project.name) + 'csv';\n\n  const recipy = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    settings,\n  );\n  const python_code = python_template(recipe_name, output_data_name);\n\n  let zip = new JSZip();\n  let folder = zip.folder(project.name);\n  zip.folder(`${project.name}/put_your_datasets_in_here`);\n  zip.folder(`${project.name}/results`);\n  folder.file(recipe_name, JSON.stringify(recipy));\n  folder.file('process.py', python_code);\n  zip.generateAsync({ type: 'blob' }).then(content => {\n    saveAs(content, slugify(project.name) + 'zip');\n  });\n};\n\nexport const saveProject = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  entries,\n  settings,\n) => {\n  let projectJSON = {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n  };\n\n  const output_name = `${project.name}.json`;\n  var blob = new Blob([JSON.stringify(projectJSON)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\nexport const createJSONMapping = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  let projectJSON = {\n    name: project.name,\n    description: project.description,\n    id: project.id,\n  };\n\n  const make_col_mappings = d => {\n    const col_renames = {};\n    meta_columns.forEach(mc => {\n      const resolved_columns = mc.columns\n        .map(cID => columns.find(c => c.id === cID))\n        .filter(c => c.dataset_id === d.id);\n      resolved_columns.forEach(rc => {\n        col_renames[rc.name] = mc.name;\n      });\n    });\n    return col_renames;\n  };\n\n  let datasetsJSON = datasets.map(d => ({\n    type: d.file.type,\n    ref: d.file.ref,\n    rows: d.rows,\n    column_renames: make_col_mappings(d),\n  }));\n\n  const mappingsJSON = {};\n  meta_columns.forEach(mc => {\n    const applicableMappings = mappings.filter(m => m.column_id === mc.id);\n    mappingsJSON[mc.name] = {};\n    applicableMappings.forEach(mapping => {\n      mappingsJSON[mc.name][mapping.name] = mapping.entries;\n    });\n  });\n\n  const jsonOutput = {\n    project: projectJSON,\n    datasets: datasetsJSON,\n    mappings: mappingsJSON,\n    settings: settings ? settings : {},\n  };\n  return jsonOutput;\n};\n\nexport const saveMappingsJSON = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n) => {\n  const output_name = slugify(project.name) + '.json';\n  var jsonOutput = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n  );\n\n  var blob = new Blob([JSON.stringify(jsonOutput)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\n\nexport const saveMappingsCSV = (columns, mappings, output_name) => {\n  const csvMapping = columns.reduce((result, column) => {\n    const column_mappings = mappings.filter(m => m.column_id === column.id);\n    if (column_mappings.length > 0) {\n      column_mappings.forEach(mapping => {\n        mapping.entries.forEach(entry => {\n          result = result + [column.name, mapping.name, entry].join(',') + '\\n';\n        });\n      });\n    }\n    return result;\n  }, 'column,entry,mapped_entry\\n');\n  var blob = new Blob([csvMapping], { type: 'text/plain;charset=utf-8' });\n  saveAs(blob, `mappings_for_${output_name}.csv`);\n};\n\nexport const exportData = (project, outfile) => {\n  //   project.datasets.first.file\n};\n\nexport const applyAndSave = () => { };\nexport const applyMappingToFile = (columns, mappings, file) => { };\n","import React from 'react'\n\nexport default function ProgressBar({ total, value, style }) {\n    return (\n        <div className='progress-bar' style={style}>\n            <div className='progress-bar-outer'>\n                <div className={'progress-bar-inner'} style={{ width: `${value * 100.0 / total}%` }}>\n                </div>\n            </div>\n            <p className='progress-bar-pc'>{value ? (value * 100 / total).toPrecision(3) : 0} %</p>\n        </div>\n    )\n}","import React, {useState, useEffect, useMemo} from 'react';\nimport {parseFileForPreview} from '../utils/file_parsing';\nimport ProgressBar from './ProgressBar';\n\nexport default function FileSnapshot({file, onAddDataset}) {\n  const [columns, setColumns] = useState([]);\n  const [dataset, setDataset] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [includedCols, setIncludedCols] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [status, setStatus] = useState('loading');\n\n  const submit = () => {\n    const cols = columns.map(c => ({\n      ...c,\n      focusCol: includedCols.includes(c.id),\n    }));\n    const ents = entries.filter(e => includedCols.includes(e.column_id));\n\n    onAddDataset(dataset, cols, ents);\n\n    setStatus('saved');\n  };\n\n  const skip = () => {\n    setStatus('skipping');\n  };\n\n  const toggleSelect = columnID => {\n    if (includedCols.includes(columnID)) {\n      setIncludedCols(includedCols.filter(id => id !== columnID));\n    } else {\n      setIncludedCols([...includedCols, columnID]);\n    }\n  };\n\n  const displayEntries = useMemo(\n    () =>\n      columns.reduce((res, col) => {\n        const colEntries = entries.filter(e => e.column_id === col.id);\n        res[col.id] = {\n          entries: colEntries.slice(0, 5).map(e => e.name),\n          extra: colEntries.length - 5,\n        };\n\n        return res;\n      }, {}),\n    [entries, columns],\n  );\n\n  useEffect(() => {\n    parseFileForPreview(file, progress => setProgress(progress)).then(\n      result => {\n        setStatus('selecting');\n        setDataset(result.dataset);\n        setColumns(result.columns);\n        setEntries(result.entries);\n      },\n    );\n  }, [file]);\n\n  return (\n    <div className=\"file-snapshot\">\n      <div className=\"file-snapshot-header\">\n        <h3>{file.type === 'url' ? file.ref : file.ref.name}</h3>\n        {status === 'loading' && (\n          <React.Fragment>\n            <p>\n              Loading, parsed{' '}\n              {progress.rows_read ? progress.rows_read.toLocaleString() : 0}{' '}\n              rows\n            </p>\n            <ProgressBar\n              total={progress.total_size ? progress.total_size : 0}\n              value={progress.bytes_read}\n              style={{width: '500px'}}\n            />\n          </React.Fragment>\n        )}\n        {status === 'selecting' && (\n          <p>\n            Has a total of {dataset.row_count} rows and {columns.length}{' '}\n            columns. Select the columns you want to work with\n          </p>\n        )}\n      </div>\n      {status === 'selecting' && (\n        <React.Fragment>\n          <ul className=\"column-summary-list \">\n            {columns.map(column => (\n              <li className=\"column-preview-card card\" key={column.id}>\n                <div>\n                  <div className=\"summary-list-header\">\n                    <h3>\n                      {column.name}{' '}\n                      <span>{`${column.exceded ? '>' : ''} ${\n                        column.unique\n                      }`}</span>\n                    </h3>\n                    <input\n                      type=\"checkbox\"\n                      checked={includedCols.includes(column.id)}\n                      onChange={() => toggleSelect(column.id)}\n                    />\n                  </div>\n                  <p>\n                    {displayEntries[column.id].entries.join(', ') +\n                      ` and ${displayEntries[column.id].extra} more`}\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n\n          <div className=\"column-summary-buttons\">\n            <button onClick={submit}>Load</button>\n            <button onClick={skip}>Cancel</button>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Tabs({ options, selected, onSelected }) {\n  return (\n    <div className=\"tabs\">\n      {options.map(option => (\n        <p\n          className={`tab ${selected === option ? 'selected' : ''} `}\n          key={option}\n          onClick={() => onSelected(option)}>\n          {option}\n        </p>\n      ))}\n    </div>\n  );\n}","import React from 'react'\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function SearchBar({ value, onChange, prompt, style }) {\n\n  return (\n    <div className='search-bar-container' style={style}>\n      <FontAwesomeIcon className='search-icon' icon={faSearch} />\n      <input type='text'\n        className='search-bar'\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={prompt}\n        value={value}\n      />\n      <FontAwesomeIcon className='clear-icon' onClick={() => onChange('')} icon={faTimes} />\n    </div>\n  )\n}\n\n\nSearchBar.defaultProps = {\n  style: {}\n}\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport { faExternalLinkAlt, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function OpneDataSearcher({ onDataset }) {\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const domain = 'data.cityofnewyork.us';\n  const onSelect = dataset => {\n    onDataset({\n      type: 'opendata',\n      ref: `https://data.cityofnewyork.us/api/views/${dataset.resource.id}/rows.csv?accessType=DOWNLOAD`,\n    });\n  };\n\n  useEffect(() => {\n    const base = 'https://api.us.socrata.com/api/catalog/v1?';\n    fetch(\n      `${base}domains=${domain}&search_context=${domain}&limit=20&only=datasets&q=${searchTerm}`,\n    )\n      .then(res => res.json())\n      .then(res => {\n        setSearchResults(res.results);\n      })\n      .catch(err => console.log(err));\n  }, [searchTerm]);\n\n  return (\n    <div className=\"open-data-search\">\n      <SearchBar\n        style={{ marginBottom: '30px' }}\n        text={searchTerm}\n        onChange={setSearchTerm}\n      />\n      {searchResults.map(dataset => (\n        <p>\n          {dataset.resource.name}{' '}\n          <span className=\"open-data-result-controls\">\n            {' '}\n            <a href={dataset.permalink} target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n            </a>{' '}\n            <FontAwesomeIcon\n              onClick={() => onSelect(dataset)}\n              icon={faDownload}\n            />\n          </span>{' '}\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport FileSnapshot from './FileSnapshot';\nimport Tabs from './Tabs';\nimport OpenDataSearcher from './OpenDataSearcher';\n\nimport {faFile, faDownload} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function FileLoader({onAddDataset}) {\n  const [filesPreview, setFilesPreview] = useState(null);\n  const [error, setError] = useState(null);\n  const [url, setURL] = useState(null);\n\n  const [columnSelections, setColumnSelections] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('file');\n\n  const submitFromURL = () => {\n    setFilesPreview([{type: 'url', ref: url}]);\n  };\n\n  const submitFromOpenData = dataset => {\n    setFilesPreview([dataset]);\n  };\n\n  const onDrop = useCallback(\n    files => {\n      if (files.every(file => file.name.split('.').includes('csv'))) {\n        setFilesPreview(files.map(f => ({type: 'file', ref: f})));\n        setColumnSelections({...columnSelections, [files[0].name]: {}});\n        setError(null);\n      } else {\n        setError('Some files are not CSVs, We only support CSVs for now');\n      }\n    },\n    [columnSelections],\n  );\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n  const renderURL = () => {\n    return (\n      <div className=\"url-tab\">\n        <FontAwesomeIcon icon={faDownload} />\n        <div>\n          <input\n            placeholder=\"dataseturl\"\n            value={url}\n            onChange={e => setURL(e.target.value)}\n          />\n          <button disabled={!url} onClick={submitFromURL}>\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderOpenDataPortal = () => {\n    return <OpenDataSearcher onDataset={submitFromOpenData} />;\n  };\n\n  const renderFile = () => {\n    return (\n      <div {...getRootProps()}>\n        <div className=\"file-tab\" style={{cursor: 'p'}}>\n          <FontAwesomeIcon icon={faFile} />\n          <input\n            {...getInputProps({\n              accept: ['text/csv', 'application/vnd.ms-excel'],\n            })}\n          />\n          {isDragActive ? (\n            <p>Drop the files here ... </p>\n          ) : (\n            <p>Drag 'n' drop files here or click to load dataset</p>\n          )}\n        </div>\n        {error && <p>{error}</p>}\n      </div>\n    );\n  };\n\n  const tabContent = () => {\n    switch (selectedTab) {\n      case 'url':\n        return renderURL();\n      case 'open data portal':\n        return renderOpenDataPortal();\n      default:\n        return renderFile();\n    }\n  };\n\n  return (\n    <div className=\"file-uploader\">\n      {filesPreview ? (\n        filesPreview.map(file => (\n          <FileSnapshot file={file} onAddDataset={onAddDataset} />\n        ))\n      ) : (\n        <React.Fragment>\n          <Tabs\n            options={['file', 'url', 'open data portal']}\n            selected={selectedTab}\n            onSelected={tab => setSelectedTab(tab)}\n          />\n          <div className=\"content\">{tabContent()}</div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n","import React, {createContext, useContext, useReducer, useEffect} from 'react';\nimport Dexie from 'dexie';\n\nconst uuidv1 = require('uuid/v1');\n\nexport const StateContext = createContext();\n\nconst db = new Dexie('state');\n\ndb.version(1).stores({\n  state: 'id',\n});\n\nconst initalState = {\n  datasets: [],\n  columns: [],\n  entries: [],\n  projects: [],\n  mappings: [],\n  embeddings: [],\n  metaColumns: [],\n  showUploadModal: false,\n  showApplyMappingsModal: false,\n  cache_loaded: false,\n  storage_stats: null,\n  persisting: false,\n};\n\n// Helper function\nconst add_or_replace = (candidate, collection, id_col = 'id') => {\n  if (collection.find(item => item[id_col] === candidate[id_col])) {\n    return collection.map(item =>\n      item[id_col] === candidate[id_col] ? candidate : item,\n    );\n  } else {\n    return [...collection, candidate];\n  }\n};\n\n// Main Reducer for the project\nconst reducer = (state, action) => {\n  const {type, payload} = action;\n  switch (type) {\n    case 'LOAD_CACHED_STATE':\n      return payload;\n\n    case 'ADD_DATASETS':\n      return {...state, datasets: [...state.datasets, ...payload]};\n\n    case 'ADD_OR_REPLACE_DATASET':\n      return {\n        ...state,\n        datasets: add_or_replace(payload, state.datasets),\n      };\n    case 'ADD_OR_REPLACE_ENTRY':\n      return {\n        ...state,\n        entries: add_or_replace(payload, state.entries, 'name'),\n      };\n    case 'ADD_OR_REPLACE_MAPPING':\n      return {\n        ...state,\n        mappings: add_or_replace(payload, state.mappings),\n      };\n    case 'ADD_OR_REPLACE_METACOLUMN':\n      return {\n        ...state,\n        metaColumns: add_or_replace(payload, state.metaColumns),\n      };\n    case 'ADD_OR_REPLACE_PROJECT':\n      return {\n        ...state,\n        projects: add_or_replace(payload, state.projects),\n      };\n    case 'ADD_OR_REPLACE_COLUMN':\n      return {\n        ...state,\n        columns: add_or_replace(payload, state.columns),\n      };\n    case 'REMOVE DATASET':\n      return {\n        ...state,\n        datasets: state.datasets.filter(d => d.id !== payload),\n      };\n\n    case 'ADD_EMBEDINGS':\n      return {\n        ...state,\n        embeddings: payload,\n      };\n    case 'ADD_COLUMNS':\n      return {...state, columns: [...state.columns, ...payload]};\n\n    case 'REMOVE_COLUMN':\n      return {\n        ...state,\n        columns: state.datasets.filter(c => c.id !== payload),\n      };\n\n    case 'ADD_ENTRIES':\n      return {...state, entries: [...state.entries, ...payload]};\n\n    case 'REMOVE ENTRY':\n      return {\n        ...state,\n        entries: state.entries.filter(e => e.id !== payload),\n      };\n\n    case 'CREATE_META_COLUMN_FROM_COL_ID':\n      return {\n        ...state,\n        metaColumns: [\n          ...state.metaColumns,\n          {\n            id: payload.id,\n            name: state.columns.find(c => c.id === payload.col_id).name,\n            description: state.columns.find(c => c.id === payload.col_id)\n              .description,\n            project_id: payload.project_id,\n            columns: [payload.col_id],\n          },\n        ],\n      };\n\n    case 'REMOVE_MAPPINGS_FOR_METACOLUMN':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.column_id !== payload),\n      };\n\n    case 'REMOVE_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: state.metaColumns.filter(mc => !payload.includes(mc.id)),\n      };\n    case 'ADD_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: [...state.metaColumns, ...payload],\n      };\n\n    case 'REMOVE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.id !== payload),\n      };\n\n    case 'ADD_MAPPINGS':\n      return {\n        ...state,\n        mappings: [...state.mappings, ...payload],\n      };\n\n    case 'ADD_MAPPING':\n      return {\n        ...state,\n        mappings: [...state.mappings, payload],\n      };\n\n    case 'ADD_PROJECT':\n      return {\n        ...state,\n        projects: [...state.projects, {id: uuidv1(), ...payload}],\n      };\n\n    case 'REMOVE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.filter(p => p.id !== payload),\n      };\n\n    case 'UPDATE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.map(p =>\n          p.id === payload.id ? {...p, ...payload} : p,\n        ),\n      };\n\n    case 'ADD ENTRY TO MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id\n            ? {...m, entries: [...m.entries, payload.entry]}\n            : m,\n        ),\n      };\n    case 'UPDATE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id ? {...m, ...payload.mapping} : m,\n        ),\n      };\n    case 'REMOVE_ENTRIES_FOR_COLUMN':\n      return {\n        ...state,\n        entries: state.entries.filter(entry => entry.columnID === payload),\n      };\n\n    case 'REMOVE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.filter(mc => mc.id !== payload),\n      };\n\n    case 'UPDATE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.map(mc =>\n          mc.id === payload.id ? {...mc, ...payload.meta_column} : mc,\n        ),\n      };\n\n    case 'SET_PERSISTING':\n      return {\n        ...state,\n        persisting: payload,\n      };\n    case 'UPDATE_STORAGE_QUOTA':\n      return {\n        ...state,\n        storage_stats: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const {\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded,\n  } = state;\n\n  // Effect used to persist the state values that we care about preserving\n  // to our cache\n  // TODO move this function to it's own hook section\n  useEffect(() => {\n    if (cache_loaded) {\n      db.state.put({\n        data: JSON.stringify({\n          datasets,\n          columns,\n          entries,\n          projects,\n          mappings,\n          metaColumns,\n          showUploadModal,\n          showApplyMappingsModal,\n        }),\n        id: 1,\n      });\n\n      if (navigator.storage && navigator.storage.estimate) {\n        navigator.storage.estimate().then(estimation => {\n          const {quota, usage} = estimation;\n          dispatch({\n            type: 'UPDATE_STORAGE_QUOTA',\n            payload: {quota, usage},\n          });\n        });\n      } else {\n        console.error('StorageManager not found');\n      }\n    }\n  }, [\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded,\n  ]);\n\n  // Use this to restore the state\n  useEffect(() => {\n    db.state.get(1).then(result => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: {...initalState, ...cachedState, cache_loaded: true},\n        });\n      } else {\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: {...initalState, cache_loaded: true},\n        });\n      }\n    });\n  }, []);\n\n  // Record if we are able to reliably persist the\n  // cached local state\n  useEffect(() => {\n    if (navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(persistResult => {\n        dispatch({\n          type: 'SET_PERSISTING',\n          payload: persistResult,\n        });\n      });\n    }\n  }, []);\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(StateContext);\n\nexport const useProject = projectID => {\n  const [state, dispatch] = useStateValue();\n  const project = state.projects.find(p => p.id === projectID);\n  const datasets = state.datasets.filter(d => d.project_id === projectID);\n  const metaColumns = state.metaColumns.filter(\n    mc => mc.project_id === projectID,\n  );\n  const metaColumnIds = metaColumns.map(mc => mc.id);\n\n  const colIDs = metaColumns.reduce((ids, mc) => [...ids, ...mc.columns], []);\n  const mappings = state.mappings.filter(m =>\n    metaColumnIds.includes(m.column_id),\n  );\n  const columns = state.columns.filter(c => colIDs.includes(c.id));\n  const columnIds = columns.map(c => c.id);\n  const entries = state.entries.filter(e => columnIds.includes(e.column_id));\n\n  const deleteProject = () => {\n    columns.forEach(c => {\n      dispatch({\n        type: 'DELETE_ENTRIES_FOR_COLUMN',\n        payload: c.id,\n      });\n      dispatch({\n        type: 'REMOVE_COLUMN',\n        payload: c.id,\n      });\n    });\n\n    mappings.forEach(m => {\n      dispatch({\n        type: 'REMOVE_MAPPING',\n        payload: m.id,\n      });\n    });\n\n    metaColumns.forEach(m => {\n      dispatch({\n        type: 'REMOVE_META_COLUMN',\n        payload: m.id,\n      });\n    });\n\n    datasets.forEach(d => {\n      dispatch({\n        type: 'REMOVE_DATASET',\n        payload: d.id,\n      });\n    });\n\n    dispatch({\n      type: 'REMOVE_PROJECT',\n      payload: project.id,\n    });\n  };\n\n  return {\n    project,\n    datasets,\n    metaColumns,\n    columns,\n    mappings,\n    deleteProject,\n    entries,\n  };\n};\n\nexport const useColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const column = state.columns.find(c => c.id === columnID);\n  const entries = state.entries.filter(e => e.column_id === columnID);\n  const mappings = state.mappings.filter(m => m.column_id === columnID);\n  const entryNames = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entryNames.includes(embed.entry),\n  );\n  return {column, entries, mappings, embeddings, dispatch};\n};\n\nexport const useMetaColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const metaColumn = state.metaColumns.find(c => c.id === columnID);\n  if (!metaColumn) {\n    return {\n      metaColumn: null,\n      entries: [],\n      mappings: [],\n      embeggins: [],\n      dispatch,\n    };\n  }\n  const entries = state.entries.filter(e =>\n    metaColumn.columns.includes(e.column_id),\n  );\n\n  // Need to consolidate the entries down to as single space.\n  const entryNames = Array.from(new Set(entries.map(e => e.name)));\n  const mergedEntry = entryNames.map(name => {\n    const entry_collection = entries.filter(e => e.name === name);\n    const total = entry_collection.reduce((total, ec) => total + ec.count, 0);\n    return {\n      name,\n      count: total,\n    };\n  });\n\n  const mappings = state.mappings.filter(m => m.column_id === metaColumn.id);\n  const embeddings = state.embeddings.filter(embed =>\n    entryNames.includes(embed.entry),\n  );\n  return {metaColumn, entries: mergedEntry, mappings, embeddings, dispatch};\n};\n\nexport const useProjectStats = () => {\n  const [state] = useStateValue();\n  const {projects, datasets, columns} = state;\n  const project_stats = projects.reduce((stats, project) => {\n    const project_datasets = datasets\n      .filter(d => d.project_id === project.id)\n      .map(d => d.id);\n    const project_columns = columns.filter(c =>\n      project_datasets.includes(c.id),\n    );\n    const project_meta_columns = columns.filter(\n      mc => mc.project_id === project.id,\n    );\n    return [\n      ...stats,\n      {\n        project: project,\n        stats: {\n          datasets: datasets.length,\n          columns: project_columns.length,\n          meta_columns: project_meta_columns.length,\n        },\n      },\n    ];\n  }, []);\n  return project_stats;\n};\n\nexport const useStorage = () => {\n  const [{storage_stats, persisting}] = useStateValue();\n  if (storage_stats) {\n    return {\n      persisting,\n      quota: storage_stats.quota / 1e6,\n      usage: storage_stats.usage / 1e6,\n    };\n  } else {\n    return {};\n  }\n};\n\nexport const useDataset = datasetID => {\n  const [state] = useStateValue();\n  const dataset = state.datasets.find(d => d.id === datasetID);\n  const columns = state.columns.filter(d => d.dataset_id === datasetID);\n  const columnIDs = columns.map(c => c.id);\n  const mappings = state.mappings.filter(m => columnIDs.includes(m.columnID));\n  return {dataset, columns, mappings};\n};\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport FileLoader from './FileLoader';\nimport { useStateValue } from '../contexts/app_context';\nconst uuidv1 = require('uuid/v1');\n\nexport default function UploadModal({ match, history }) {\n  const { projectID } = match.params;\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const addDatasetToStore = (newDataset, columns, entries) => {\n    const metaColumns = columns\n      .filter(c => c.focusCol)\n      .map(column => ({\n        columns: [column.id],\n        name: column.name,\n        description: '',\n        project_id: projectID,\n        id: uuidv1(),\n      }));\n\n    dispatch({\n      type: 'ADD_DATASETS',\n      payload: [{ ...newDataset, project_id: projectID }],\n    });\n\n    dispatch({\n      type: 'ADD_COLUMNS',\n      payload: columns,\n    });\n\n    dispatch({\n      type: 'ADD_ENTRIES',\n      payload: entries,\n    });\n\n    dispatch({\n      type: 'ADD_META_COLUMNS',\n      payload: metaColumns,\n    });\n\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      className=\"Modal\"\n      overlayClassName=\"Overlay\"\n      isOpen={true}\n      onRequestClose={onClose}>\n      <FileLoader onAddDataset={addDatasetToStore} onClose={onClose} />\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function ProjectModal({ match, history }) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n\n  const createProject = () => {\n    dispatch({\n      type: 'ADD_PROJECT',\n      payload: { name, description },\n    });\n    onClose();\n  };\n\n  return (\n    <ReactModal\n\n      isOpen={true}\n\n      className=\"Modal\"\n      overlayClassName=\"Overlay\"\n      onRequestClose={onClose}>\n      <div className=\"new-project-modal\">\n        <h1>New Project</h1>\n        <p>Project Name</p>\n        <input\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"name\"\n        />\n        <p>Description</p>\n        <textarea\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n          placeholder=\"description\"\n        />\n        <div className=\"buttons\">\n          <button onClick={createProject}>Create</button>\n          <button className=\"cancel-button\" onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","const get_embedings_from_server = entries => {\n  let unique_words = new Set();\n  entries.forEach(entry => {\n    entry.name.split(' ').forEach(word => {\n      unique_words.add(word);\n    });\n  });\n\n  return fetch(`${process.env.REACT_APP_API_URL}/embedding_bulk`, {\n    method: 'POST',\n    body: JSON.stringify(Array.from(unique_words).map(w => w.toLowerCase().replace(/[\\W_]+/g, ''))),\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(r => r.json())\n\n  // return Promise.all(\n  //   Array.from(unique_words).map(entry =>\n  //     fetch(\n  //       `${\n  //       process.env.REACT_APP_API_URL\n  //       }/embedding/${entry.toLowerCase().replace(/[\\W_]+/g, '')}`,\n  //     )\n  //       .then(r => r.json())\n  //       .then(r => r[0]),\n  //   ),\n  // );\n};\n\nconst vec_mag = vec => Math.sqrt(vec.reduce((mag, v) => mag + v * v, 0));\n\nconst norm_vec = vec => {\n  const mag = vec_mag(vec);\n  return vec.map(v => v / mag);\n};\n\nconst category_mean = (entries, negativeEntries, embeddings) => {\n  const entry_embeddings = entries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, 1]);\n\n  const negative_embeddings = negativeEntries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, -1]);\n\n  const all_entry_contributions = entry_embeddings.concat(negative_embeddings);\n\n  const total_vec = all_entry_contributions.reduce((total, embed) => {\n    const weight = embed[1];\n    const vec = embed[0].map(v => v * weight);\n\n    if (total.length === 0) {\n      total = vec;\n    } else {\n      total = vec.map((v, i) => v + total[i]);\n    }\n    return total;\n  }, []);\n\n  return norm_vec(total_vec);\n};\n\nconst vec_dist2 = (v1, v2) =>\n  v1.reduce((total, v, index) => total + (v - v2[index]) * (v - v2[index]), 0);\n\nexport const most_similar_to_category_mean = (\n  entries,\n  negativeEntries,\n  search_entries,\n  embeddings,\n) => {\n  const mean = category_mean(entries, negativeEntries, embeddings);\n\n  const distances = search_entries.map(entry => {\n    const embeding = embeddings.find(e => e.entry === entry.name);\n    if (embeding) {\n      const dist = vec_dist2(norm_vec(embeding.embed), mean);\n      return { suggestion: entry.name, dist: dist };\n    } else {\n      return { suggestion: entry.name, dist: 2000000 };\n    }\n  });\n  return distances\n    .filter(a => a.dist > 0)\n    .filter(a => !entries.includes(a.suggestion))\n    .filter(a => !negativeEntries.includes(a.suggestion))\n    .sort((a, b) => (a.dist > b.dist ? 1 : -1))\n    .slice(0, 8);\n};\n\nconst combined_word_embedings_for_entry = (\n  entry,\n  word_embedings,\n  norm = false,\n) =>\n  entry.name.split(' ').reduce((full_embed, word) => {\n    const word_embed = word_embedings\n      .filter(embed => embed)\n      .find(we => we.key === word.toLocaleLowerCase());\n\n    if (word_embed) {\n      let rep = word_embed.embedding;\n      if (norm) {\n        rep = norm_vec(rep);\n      }\n\n      if (full_embed.length === 0) {\n        full_embed = rep;\n      } else {\n        full_embed = full_embed.map((v, i) => v + rep[i]);\n      }\n    }\n    return full_embed;\n  }, []);\n\nexport const calc_embedings = entries =>\n  get_embedings_from_server(entries).then(word_embedings =>\n    entries.map(entry => ({\n      entry: entry.name,\n      embed: combined_word_embedings_for_entry(entry, word_embedings),\n    })),\n  );\n","import { calc_embedings } from '../utils/calc_embedings';\nconst uuidv1 = require('uuid/v1');\n\nexport function createMapping(selection, columnID, name, dispatch) {\n  const id = uuidv1();\n  dispatch({\n    type: 'ADD_MAPPING',\n    payload: {\n      name: name,\n      entries: selection,\n      negative_examples: [],\n      column_id: columnID,\n      id,\n    },\n  });\n  return id;\n}\n\nexport function renameMapping(mapping, newName, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      mapping: {\n        name: newName,\n      },\n      id: mapping.id,\n    },\n  });\n}\n\nexport function loadProject(projectDetails, dispatch) {\n  const {\n    project,\n    datasets,\n    entries,\n    columns,\n    mappings,\n    meta_columns,\n  } = projectDetails;\n\n  dispatch({\n    type: 'ADD_OR_REPLACE_PROJECT',\n    payload: project,\n  });\n\n  datasets.forEach(dataset => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_DATASET',\n      payload: dataset,\n    });\n  });\n\n  columns.forEach(column => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_COLUMN',\n      payload: column,\n    });\n  });\n\n  mappings.forEach(mapping => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_MAPPING',\n      payload: mapping,\n    });\n  });\n\n  meta_columns.forEach(mc => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_METACOLUMN',\n      payload: mc,\n    });\n  });\n\n  entries.forEach(entry => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_ENTRY',\n      payload: entry,\n    });\n  });\n}\n\nexport function removeEntryFromMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: mapping.entries.filter(e => e !== entry),\n      },\n    },\n  });\n}\n\nexport function deleteMapping(mapping, dispatch) {\n  dispatch({\n    type: 'REMOVE_MAPPING',\n    payload: mapping.id,\n  });\n}\n\nexport function clearMapping(mapping, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [],\n      },\n    },\n  });\n}\n\nexport function requestEmbedingsForEntries(entries, dispatch) {\n  calc_embedings(entries).then(embeddings => {\n    dispatch({\n      type: 'ADD_EMBEDINGS',\n      payload: embeddings,\n    });\n  });\n}\n\nexport function addNegativeExampleToMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        negative_examples: [...mapping.negative_examples, entry],\n      },\n    },\n  });\n}\nexport function addEntriesToMapping(mapping, entries, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [...mapping.entries, ...entries],\n      },\n    },\n  });\n}\n\nexport function updateMetaColumn(id, changes, dispatch) {\n  dispatch({\n    type: 'UPDATE_META_COLUMN',\n    payload: {\n      id,\n      meta_column: changes,\n    },\n  });\n}\n\nexport function unMergeMetaColumn(meta_column, dispatch) {\n  meta_column.columns.forEach(col_id => {\n    dispatch({\n      type: 'CREATE_META_COLUMN_FROM_COL_ID',\n      payload: {\n        col_id,\n        id: uuidv1(),\n        project_id: meta_column.project_id,\n      },\n    });\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: [meta_column.id],\n  });\n\n  dispatch({\n    type: 'REMOVE_MAPPINGS_FOR_METACOLUMN',\n    payload: meta_column.id,\n  });\n}\n\nexport function mergeMetaColumns(meta_columns, dispatch) {\n  const new_col = meta_columns[0];\n  const ids = meta_columns.map(mc => mc.id);\n\n  meta_columns.slice(1).forEach(mc => {\n    new_col.columns = [...new_col.columns, ...mc.columns];\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: ids,\n  });\n\n  dispatch({\n    type: 'ADD_META_COLUMNS',\n    payload: [new_col],\n  });\n}\n","import React, {useState, useCallback} from 'react';\nimport ReactModal from 'react-modal';\nimport {useStateValue} from '../contexts/app_context';\nimport {useDropzone} from 'react-dropzone';\nimport {faFile} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {loadProject} from '../contexts/actions';\n\nimport {faColumns, faDatabase} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ProjectModal({match, history}) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n  const [error] = useState(null);\n\n  const [project, setProject] = useState(null);\n\n  const onDrop = useCallback(files => {\n    const file = files[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = f => {\n      setProject(JSON.parse(reader.result));\n    };\n  }, []);\n\n  const loadIt = () => {\n    loadProject(project, dispatch);\n    history.goBack();\n  };\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n  return (\n    <ReactModal\n      isOpen={true}\n      onRequestClose={onClose}\n      className=\"Modal\"\n      overlayClassName=\"Overlay\">\n      <div className=\"load-project-modal\">\n        <h1>{project ? project.project.name : 'Load Project'}</h1>\n        <div className=\"content\">\n          {project ? (\n            <div>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faDatabase}\n                    style={{marginRight: '20px'}}\n                  />\n                  <h2>Datasets</h2>\n                </header>\n                <p>{project.project.description}</p>\n                {project.datasets.map(d => (\n                  <p>{d.name}</p>\n                ))}\n              </section>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faColumns}\n                    style={{marginRight: '20px'}}\n                  />\n                  <h2>Columns</h2>\n                </header>\n                {project.meta_columns.map(mc => (\n                  <p>{mc.name}</p>\n                ))}\n              </section>\n              <button onClick={loadIt}>Load</button>\n            </div>\n          ) : (\n            <div className={'file-tab'} {...getRootProps()}>\n              <FontAwesomeIcon icon={faFile} />\n              <input\n                {...getInputProps({\n                  accept: ['text/csv', 'application/vnd.ms-excel'],\n                })}\n              />\n              {isDragActive ? (\n                <p>Drop the files here ... </p>\n              ) : (\n                <p>Drag 'n' drop project file here or click to load project</p>\n              )}\n              {error && <p>{error}</p>}\n            </div>\n          )}\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function GHPagesRedirect() {\n  const [redirect, setRedirect] = useState(null);\n  useEffect(() => {\n    // This is for dealing with the 404 redirect issue on gh pages\n    var target = sessionStorage.redirect;\n    delete sessionStorage.redirect;\n\n    if (target && target !== window.location.href) {\n      let to = target;\n      if (process.env.PUBLIC_URL) {\n        to =\n          '/' +\n          to\n            .split('/')\n            .slice(4)\n            .join('/');\n      }\n      setRedirect(to);\n    }\n  }, []);\n\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  } else {\n    return <React.Fragment />;\n  }\n}\n","import React, { useState } from 'react';\nimport streamSaver from 'streamsaver';\n\nexport default function ApplyMapping(props) {\n  const { file, columns } = props;\n\n  const [addColumns, setAddColumns] = useState(true);\n  const [status, setStatus] = useState('pending');\n\n  const startProcessing = () => {\n    setStatus('running');\n    const fileStream = streamSaver.createWriteStream('processed.txt', {\n      size: 22,\n    });\n    new Response('StreamSaver is awesome').body.pipeTo(fileStream).then(\n      () => {\n        console.log('SAVED');\n      },\n      () => {\n        console.log('ERROR');\n      },\n    );\n  };\n\n  return (\n    <div className=\"apply-mapping\">\n      {status === 'pending' && (\n        <React.Fragment>\n          <p id={file.name}>{file.name}</p>\n          <div className=\"options\">\n            <p>Applying mappings to {columns.length} columns</p>\n            Add Columns:{' '}\n            <input\n              type=\"checkbox\"\n              checked={addColumns}\n              onChange={e => setAddColumns(e.target.checked)}\n            />\n            Treat Unmapped as Unknown: <input type=\"checkbox\" />\n            <button onClick={startProcessing}>Apply Mapping</button>\n          </div>\n        </React.Fragment>\n      )}\n      {status === 'running' && <h2>Running</h2>}\n      {status === 'done' && <h2>Done</h2>}\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport ApplyMapping from './ApplyMapping'\nimport { useDataset } from '../contexts/app_context'\n\nimport { useDropzone } from 'react-dropzone';\n\nexport default function ApplyMappingsModal({ match, history }) {\n\n  const [files, setFiles] = useState(null);\n  const [error, setError] = useState(null);\n  const { datasetID } = match.params\n\n  const onClose = () => {\n    history.goBack()\n  }\n\n  const { columns, mappings } = useDataset(datasetID);\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFiles(files);\n    } else {\n      setError(\n        \"Smoosher currently only supports CSV's please just upload those!\",\n      );\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <ReactModal isOpen={true} onRequestClose={onClose}\n      className=\"Modal\"\n      overlayClassName=\"Overlay\"\n\n    >\n      {error && <h1>{error}</h1>}\n\n      {files ? (\n        <div>\n          {files.map(file => (\n            <ApplyMapping\n              file={file}\n              columns={columns}\n              mappings={mappings}\n            />\n\n          ))}\n        </div>\n      ) : (\n          <React.Fragment>\n            <h1>Select files to apply mapping to</h1>\n            <div className=\"file-uploader\">\n              <div {...getRootProps()}>\n                <input\n                  {...getInputProps({\n                    accept: ['text/csv', 'application/vnd.ms-excel'],\n                  })}\n                />\n\n                {isDragActive ? (\n                  <p>Drop the files here ... </p>\n                ) : (\n                    <p>Drag 'n' drop files to apply mapping</p>\n                  )}\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useProject } from '../contexts/app_context';\nimport { exportPythonCode } from '../utils/file_parsing';\n\nexport default function CodeExportModal({ match, history }) {\n  const onClose = () => history.goBack();\n  // const [_, dispatch] = useStateValue();\n  const { projectID } = match.params;\n  const { project, datasets, metaColumns, columns, mappings } = useProject(\n    projectID,\n  );\n\n  const [changeNonMapped, setChangeNonMapped] = useState(false);\n  const [createNewColumns, setCreateNewColumns] = useState(false);\n  const [combineDatasets, setCombineDatasets] = useState(true);\n  const [valueForNonMapped, setValueForNonMapped] = useState('unknown');\n\n  const doExport = () => {\n    const settings = {\n      changeNonMapped,\n      createNewColumns,\n      combineDatasets,\n      valueForNonMapped,\n    };\n\n    exportPythonCode(\n      project,\n      datasets,\n      metaColumns,\n      columns,\n      mappings,\n      settings,\n    );\n  };\n\n  return (\n    <ReactModal\n      className=\"Modal\"\n      overlayClassName=\"Overlay\"\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"code-export-modal\">\n        {project && (\n          <React.Fragment>\n            <div>\n              <h1>{project.name}</h1>\n              <p>Export Code</p>\n            </div>\n            <div className='code-export-options'>\n              <span>\n                Change non mapped entries?\n                <input\n                  type=\"checkbox\"\n                  value={changeNonMapped}\n                  onChange={e => setChangeNonMapped(e.target.checked)}\n                />\n              </span>\n              {changeNonMapped && (\n                <span>\n                  Value for non mapped entries?\n                  <input\n                    type=\"text\"\n                    value={valueForNonMapped}\n                    onChange={e => setValueForNonMapped(e.target.value)}\n                  />{' '}\n                </span>\n              )}\n              <span>\n                Create new columns?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={createNewColumns}\n                  onChange={e => setCreateNewColumns(e.target.checked)}\n                />{' '}\n              </span>\n              <span>\n                Combine datasets in to single file?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={combineDatasets}\n                  onChange={e => setCombineDatasets(e.target.checked)}\n                />{' '}\n              </span>\n            </div>\n\n            <div className={'export-instructions'}>\n              <p>\n                Click export to download a zip file with everything you need to\n                apply your mapping.\n              </p>\n              <p>The code will do the following:</p>\n              <ul>\n                <li>\n                  Load the files you worked on from the \"put_your_files_in_here\"\n                  folder\n                </li>\n                <li>\n                  Combine and rename columns from each dataset as you indicated\n                </li>\n                <li>Apply the new taxonomies you produced to those columns</li>\n                <li>Export the results to the \"results\" folder</li>\n              </ul>\n              <p>\n                The script that does all this is called \"process.py\" you can\n                tweak it to suit your needs\n              </p>\n            </div>\n            <div className=\"buttons\">\n              <button onClick={doExport}>Export</button>\n              <button onClick={onClose}>Cancel</button>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </ReactModal>\n  );\n}\n","\nexport default function python_template(project_file,output_file){\n    var template = `\nimport pandas as pd \nimport json\nimport sys\n\nwith open('${project_file}', 'r') as f:\n    project = json.load(f)\n    datasets = project['datasets']\n\n    all_data = pd.DataFrame()\n\nfor dataset in datasets:\n    dataset_type = dataset['type']\n    dataset_name = dataset['ref']['path']\n    if(dataset_type=='file'):\n        file_path = 'put_your_datasets_in_here/{}'.format(dataset_name)\n        try:\n           print('Raeding {}'.format(dataset_name))\n           data = pd.read_csv(file_path)\n        except:\n           print(\"Place the file {} in the folder put_your_datasets_in_here\".format(file_path))\n           sys.exit()\n    elif(dataset_type['type'] == 'url'):\n        data = pd.read_csv(data['ref']['url'])\n    elif(dataset_Type['type'] == 'open_data'):\n        data = pd.read_csv(data['ref']['url'])\n        \n    print(\"Renaming columns\")\n    column_renames  = dataset['column_renames']\n    data = data.rename(columns=column_renames)\n\n    all_data = all_data.append(data, ignore_index=True)\n\nprint('Applying column mappings')\nfor column,mapping in project['mappings'].items():\n    map_dict = {}\n    for key, values in mapping.items():\n        for value in values:\n            map_dict[value] = key \n            \n    all_data[column] = all_data[column].map(lambda x: map_dict[x] if x in mapping else 'unknown')\n\nprint('Writing out results')\nall_data.to_csv('results/${output_file}')\nprint('Datasets have been smooshed')\n    `\n    return template\n}\n","import React, { useState } from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nexport default function TablePreview(props) {\n  const { data } = props;\n\n  const columns = Object.keys(data[0]).map(k => ({ key: k, name: k }));\n  const [rows, setRows] = useState(data);\n\n  const sortRows = (initalRows, sortColumn, sortDirection) => rows => {\n    const comp = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === 'DESC') {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    return sortDirection === 'NONE' ? initalRows : [...rows].sort(comp);\n  };\n\n  if (data.length === 0) {\n    return <h1> No data to show</h1>;\n  }\n\n  return (\n    <ReactDataGrid\n      columns={columns}\n      rowGetter={i => rows[i]}\n      rowsCount={data.length}\n      onGridSort={(sortColumn, sortDirection) =>\n        setRows(sortRows(data, sortColumn, sortDirection))\n      }\n    />\n  );\n}\n\nTablePreview.defaultProps = {\n  data: [],\n  columns: [],\n};\n","import React from 'react';\nimport TablePreview from '../components/TablePreview';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function DatasetPage({ match }) {\n  const datasetID = match.params.datasetID;\n\n  const [{ datasets, columns },] = useStateValue();\n  const dataset = datasets.find(d => d.id === datasetID);\n\n  const columnsForDataset = columns.filter(c => c.dataset_id === datasetID);\n  return dataset ? (\n    <React.Fragment>\n      <div className=\"datatable full_card\">\n        <TablePreview data={dataset.sample} columns={columnsForDataset} />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginTop: '20px',\n          }}>\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n      <h2>Could not find dataset</h2>\n    );\n}\n\n","import React from 'react';\n\nexport default function EntryCard({ entry, selected = false, onToggleSelect }) {\n  return (\n    <div\n      className={`entry-card card ${selected ? 'selected' : ''}`}\n      onClick={() => onToggleSelect(entry)}>\n      <h3>{entry.name}</h3>\n      <p>{entry.count} occurrences</p>\n    </div>\n  );\n}","import React, { useState } from 'react'\nimport { faSortDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nexport default function OrderBySelector({ onChange }) {\n  const showDropDown = () => {\n    setShowDropdown(true)\n  }\n\n  const selectOption = (option) => {\n    setShowDropdown(false)\n    setSelected(option)\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  const [show, setShowDropdown] = useState(false)\n  const [selected, setSelected] = useState(\"Alphabetically\")\n\n  const options = [\"Alphabetically\", \"Occurances\"]\n\n  return (\n    <div className=\"order-by\">\n      <p>Order By: </p>\n      <ul>\n        <li onClick={showDropDown}>{selected} <FontAwesomeIcon icon={faSortDown} /> </li>\n        {options.filter(o => o !== selected && show).map(o => <li\n          onClick={() => selectOption(o)}\n        >{o}</li>)}\n      </ul>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function EntryPill({entry, onRemove}) {\n  return (\n    <span className=\"entry-pill\">\n      <span>{entry}</span>\n      <FontAwesomeIcon icon={faTimes} onClick={() => onRemove(entry)} />\n    </span>\n  );\n}","import React from 'react'\nimport EntryPill from './EntryPill'\n\nexport default function SelectedEntriesList({ selection, onRemoveSelection, onClearAll }) {\n    return (\n        <div className='selected-entry-list'>\n            {selection.length === 0 ?\n                <span>Click on entries to select them</span>\n                :\n                <span>Selections ({selection.length}):</span>\n            }\n            <ul >\n                {selection.reverse().map(entry => <li><EntryPill onRemove={onRemoveSelection} entry={entry} /> </li>)}\n            </ul>\n            {(selection.length > 0) &&\n                <button className='clear-all text-button' onClick={onClearAll}>Clear All</button>\n            }\n        </div>\n    )\n}\n\nSelectedEntriesList.defaultProps = {\n    selection: []\n}\n\n","import React, { useState } from 'react';\nimport EntryCard from './EntryCard';\nimport OrderBySelector from './OrderBySelector';\nimport { faGlassCheers } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SelectedEntriesList from './SelectedEntriesList'\n\n\nexport default function EntryTable({\n  entries,\n  style,\n  onToggleSelection,\n  onClearSelection,\n  selection,\n}) {\n  const [order, setOrder] = useState('Occurances');\n\n  const toggleSelection = entry => {\n    if (onToggleSelection) {\n      onToggleSelection(entry);\n    }\n  };\n\n  const orderKey = { Alphabetically: 'name', Occurances: 'count' }[order];\n\n  let orderedEntries = entries.sort((a, b) =>\n    a[orderKey] > b[orderKey] ? 1 : -1,\n  );\n\n  if (orderKey === 'count') {\n    orderedEntries.reverse();\n  }\n\n  return (\n    <div style={style} className=\"entry-table\">\n      <div className=\"entry-table-filters\">\n        <SelectedEntriesList selection={selection} onRemoveSelection={toggleSelection} onClearAll={onClearSelection} />\n        <OrderBySelector onChange={order => setOrder(order)} />\n\n      </div>\n      <div className=\"entry-table-entries\">\n        {orderedEntries.length > 0 ? (\n          orderedEntries.map(entry => (\n            <EntryCard\n              key={entry.name}\n              entry={entry}\n              selected={selection.includes(entry.name)}\n              onToggleSelect={toggleSelection}\n            />\n          ))\n        ) : (\n            <div className=\"all-done\">\n              <h1>You really smooshed the crap out of that column.</h1>\n              <h1>\n                {[...Array(5)].map(() => (\n                  <FontAwesomeIcon icon={faGlassCheers} />\n                ))}\n              </h1>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\nEntryTable.defaultProps = {\n  style: {},\n};\n","import React, {useState,useEffect} from 'react'\n\nimport {faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n\nexport default function EditableText({text, onUpdate}){\n  const [localText, setLocalText] = useState(text)\n  const [editing, setEditing] = useState(false)\n\n  useEffect(()=>{\n     setLocalText(text)\n  },[text])\n\n  return  editing ? \n      <input onChange={(e)=>setLocalText(e.target.value)} onBlur={()=> { setEditing(false); onUpdate(localText)  } } value={localText} /> \n    : \n    \n      <h3>\n          {localText} <FontAwesomeIcon onClick={()=>setEditing(true)} icon={faEdit} />\n      </h3>\n    \n    \n}\n","import React, { useState } from 'react';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport EditableText from './EditableText';\n\nexport default function MappingFocus({\n  mapping,\n  onRemoveEntryFromMapping,\n  onRenameMapping,\n  onClearMapping,\n  onDeleteMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  const [suggestionType, setSuggestionType] = useState('text');\n\n  const removeEntryFromMapping = entry => {\n    if (onRemoveEntryFromMapping) {\n      onRemoveEntryFromMapping(entry, mapping);\n    }\n  };\n\n  const addSuggestionToMapping = entry => {\n    if (onAddSuggestionToMapping) {\n      onAddSuggestionToMapping(entry.suggestion);\n    }\n  };\n\n  const updateMappingName = name => {\n    if (onRenameMapping) {\n      onRenameMapping(mapping, name);\n    }\n  };\n\n  const clearMapping = name => {\n    if (onClearMapping) {\n      onClearMapping(mapping);\n    }\n  };\n\n  const deleteMapping = name => {\n    if (onDeleteMapping) {\n      onDeleteMapping(mapping);\n    }\n  };\n\n  const addNegativeExampleToMapping = (entry) => {\n\n    if (onAddNegativeExampleToMapping) {\n      onAddNegativeExampleToMapping(entry.suggestion)\n    }\n  }\n\n  const suggestionsByType = suggestions[suggestionType];\n\n  return (\n    <div className=\"mapping-focus\" style={style}>\n      <EditableText text={mapping.name} onUpdate={updateMappingName} />\n      <div className=\"include-list\">\n        <h4>Includes</h4>\n        <ul>\n          {mapping.entries.map(entry => (\n            <li>\n              {entry}{' '}\n              <button\n                onClick={() => removeEntryFromMapping(entry)}\n                className={'small-button round-button'}>\n                <FontAwesomeIcon icon={faTimes} />{' '}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"keyword-match\">\n        <h4>\n          Suggestions by:{' '}\n          <span\n            style={\n              suggestionType === 'text'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('text')}>\n            text\n          </span>{' '}\n          /{' '}\n          <span\n            style={\n              suggestionType === 'meaning'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('meaning')}>\n            meaning\n          </span>\n        </h4>\n        <ul>\n          {suggestionsByType.map(entry => (\n            <li>\n              {entry.suggestion}{' '}\n              <div className=\"SuggestionActionButtons\">\n                <button\n                  className={'small-button round-button'}\n                  onClick={() => addSuggestionToMapping(entry)}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </button>\n                <button className={'small-button round-button'}\n                  onClick={() => addNegativeExampleToMapping(entry)}\n                >\n                  <FontAwesomeIcon\n                    icon={faTimes} />\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className={'ActionButtons'}>\n        <button onClick={clearMapping} className={'mid-button'}>\n          Clear Mapping\n        </button>\n        <button onClick={deleteMapping} className={'mid-button'}>\n          Delete Mapping\n        </button>\n      </div>\n    </div>\n  );\n}\n\nMappingFocus.defaultProps = {\n  style: {},\n  meaningSuggestions: [],\n  textSuggestions: [],\n};\n","import React from 'react';\n\nexport default function MappingsMenu({\n  mappings = [],\n  selected,\n  onMappingSelected,\n  style\n}) {\n\n  const mappingSelected = (mapping) => {\n    if (onMappingSelected) {\n      onMappingSelected(mapping)\n    }\n  }\n\n  return (\n    <div class=\"mappings-menu\" style={style}>\n      <h3>\n        Merged Groups <span class=\"Pill\">{mappings.length}</span>{' '}\n      </h3>\n      <ul>\n        {mappings.map(mapping => (\n          <li\n            className={\n              selected && mapping.name === selected.name ? 'selected' : ''\n            }\n            onClick={() => mappingSelected(mapping)}>\n            {mapping.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nMappingsMenu.defaultProps = {\n  mappings: [],\n  style: {},\n};\n","import React from 'react';\nimport MappingFocus from './MappingFocus';\nimport MappingsMenu from './MappingsMenu';\n\nexport default function MappingsArea({\n  mappings,\n  selection,\n  onMappingSelected,\n  onRenameMapping,\n  onRemoveEntryFromMapping,\n  onDeleteMapping,\n  onClearMapping,\n  onAddEntryToMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  return (\n    <div className=\"mappings-area\" style={style}>\n      <MappingsMenu\n        mappings={mappings}\n        selected={selection}\n        onMappingSelected={onMappingSelected}\n      />\n      {selection && (\n        <MappingFocus\n          mapping={selection}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onRenameMapping={onRenameMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          onAddEntryToMapping={onAddEntryToMapping}\n          onAddSuggestionToMapping={onAddSuggestionToMapping}\n          suggestions={suggestions}\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n        />\n      )}\n    </div>\n  );\n}\n\nMappingsArea.defaultProps = {\n  style: {},\n};\n","import * as lev from 'fast-levenshtein';\n\n\nconst cacheSimilarities = {};\n\nexport const suggestForMapping = (mapping, entries) => {\n  const res = [];\n  mapping.forEach(mapping_entry => {\n    entries.forEach(entry => {\n      const cacheKey = [mapping_entry, entry.name].join('_');\n\n      if (!mapping.includes(entry)) {\n        if (cacheSimilarities[cacheKey]) {\n          res.push({\n            suggestion: entry.name,\n            score: cacheSimilarities[cacheKey],\n          });\n        } else {\n          const dist = lev.get(mapping_entry, entry.name);\n          cacheSimilarities[cacheKey] = dist;\n          res.push({ suggestion: entry.name, score: dist });\n        }\n      }\n    });\n  });\n  return res.sort((a, b) => (a.score > b.score ? 1 : -1)).slice(0, 5);\n};\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport EntryTable from '../components/EntryTable';\nimport MappingsArea from '../components/MappingsArea';\nimport useFuse from 'react-use-fuse';\nimport { suggestForMapping } from '../utils/text_clustering';\nimport { most_similar_to_category_mean } from '../utils/calc_embedings';\nimport { usePagenationWithItems } from '../hooks/pagination'\n\nimport {\n  createMapping,\n  renameMapping,\n  addEntriesToMapping,\n  addNegativeExampleToMapping,\n  removeEntryFromMapping,\n  deleteMapping,\n  clearMapping,\n  requestEmbedingsForEntries,\n} from '../contexts/actions';\nimport { useStateValue, useMetaColumn } from '../contexts/app_context';\n\nexport default function ColumnPage({ match }) {\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [selectedMappingID, setSelectedMappingID] = useState(null);\n  const [entrySelection, setEntrySelection] = useState([]);\n  const { columnID } = match.params;\n\n  const { entries, mappings, embeddings, dispatch } = useMetaColumn(columnID);\n  const selectedMapping = mappings.find(m => m.id === selectedMappingID);\n\n  useEffect(() => {\n    if (entries) {\n      requestEmbedingsForEntries(entries, dispatch);\n    }\n  }, [JSON.stringify(entries)]);\n\n  const non_mapped_entries = entries.filter(\n    entry => !mappings.some(m => m.entries.includes(entry.name)),\n  );\n\n  const { result, search } = useFuse({\n    data: non_mapped_entries,\n    options: {\n      shouldSort: true,\n      findAllMatches: true,\n      keys: ['name'],\n      caseSensitive: false,\n    },\n  });\n\n  const filteredEntries = (result[0] && result[0].item) ? result.map(r => r.item) : result;\n\n\n  const toggleEnrtySelection = entry => {\n    const entryName = typeof entry == 'string' ? entry : entry.name;\n\n    if (entrySelection.includes(entryName)) {\n      setEntrySelection(entrySelection.filter(s => s !== entryName));\n    } else {\n      setEntrySelection([...entrySelection, entryName]);\n    }\n  };\n\n  const onCreateMapping = () => {\n    const id = createMapping(\n      entrySelection,\n      columnID,\n      entrySelection[0],\n      dispatch,\n    );\n    setEntrySelection([]);\n    setSelectedMappingID(id);\n  };\n\n  const onRenameMapping = (mapping, name) => {\n    renameMapping(mapping, name, dispatch);\n  };\n\n  const onRemoveEntryFromMapping = (entry, mapping) => {\n    removeEntryFromMapping(mapping, entry, dispatch);\n  };\n\n  const onClearMapping = mapping => {\n    clearMapping(mapping, dispatch);\n  };\n\n  const onDeleteMapping = mapping => {\n    deleteMapping(mapping, dispatch);\n  };\n\n  const clearSelection = () => {\n    setEntrySelection([]);\n  };\n\n  const onAddEntriesToMapping = (\n    entriesToAdd,\n    shouldClearSelection = false,\n  ) => {\n    addEntriesToMapping(selectedMapping, entriesToAdd, dispatch);\n    if (shouldClearSelection) {\n      clearSelection();\n    }\n  };\n\n  const onAddNegativeExampleToMapping = entry => {\n    addNegativeExampleToMapping(selectedMapping, entry, dispatch);\n  };\n\n  //Remove any entries that are already in a mapping\n\n  const updateSearch = text => {\n    setSearchTerm(text);\n    search(text);\n  };\n\n  const suggestionsAvaliable = embeddings && selectedMapping;\n\n  const meaningSuggestions = suggestionsAvaliable\n    ? most_similar_to_category_mean(\n      selectedMapping.entries,\n      selectedMapping.negative_examples,\n      non_mapped_entries,\n      embeddings,\n    )\n    : [];\n\n  const textSuggestions = suggestionsAvaliable\n    ? suggestForMapping(selectedMapping.entries, non_mapped_entries)\n    : [];\n\n  const suggestions = { text: textSuggestions, meaning: meaningSuggestions };\n\n  const { cache_loaded } = useStateValue();\n\n  const stats = {\n    mappings: mappings.length,\n    total_rows: entries.reduce((total, e) => total + e.count, 0),\n    total_mapped_rows: mappings\n      .map(m =>\n        m.entries.reduce(\n          (total, entry) => total + entries.find(e => e.name === entry).count,\n          0,\n        ),\n      )\n      .reduce((total, map) => total + map, 0),\n    total_entries_in_mappings: mappings.reduce(\n      (total, m) => total + m.entries.length,\n      0,\n    ),\n  };\n\n  console.log(\"FILTERED \", filteredEntries)\n\n  // const [pagedEntries, { pageButtons }] = usePagenationWithItems(filteredEntries, 30)\n\n  if (!cache_loaded) {\n    return (\n      <div className=\"column-page\">\n        <SearchBar\n          style={{ gridArea: 'header', width: '50%', justifySelf: 'center' }}\n          onChange={updateSearch}\n          onClear={() => updateSearch('')}\n          value={searchTerm}\n          prompt=\"Search for entries by typing here...\"\n        />\n        <EntryTable\n          entries={filteredEntries}\n          style={{\n            gridArea: 'table',\n            overflowY: 'hidden',\n            width: '100%',\n            height: '100%',\n          }}\n          onToggleSelection={toggleEnrtySelection}\n          selection={entrySelection}\n          onClearSelection={clearSelection}\n          {...entries}\n        />\n        <pageButtons />\n        <div className=\"stats-and-actions\">\n          <div className=\"stats\">\n            <p>\n              <span>{stats.total_entries_in_mappings}</span> /{' '}\n              <span>{entries.length}</span> entries |{' '}\n              <span>{stats.total_mapped_rows}</span> /{' '}\n              <span>{stats.total_rows}</span> rows\n            </p>\n          </div>\n          <div className=\"entry-action-buttons\">\n            <button\n              disabled={entrySelection.length === 0}\n              onClick={onCreateMapping}>\n              New Mapping {entrySelection.length}\n            </button>\n            <button\n              disabled={!(entrySelection.length > 0 && selectedMappingID)}\n              onClick={() => onAddEntriesToMapping(entrySelection, true)}>\n              Add to Mapping\n            </button>\n            <button\n              onClick={() =>\n                createMapping(non_mapped_entries, columnID, 'Other', dispatch)\n              }>\n              Map Remaining To Other\n            </button>\n          </div>\n        </div>\n        <MappingsArea\n          mappings={mappings}\n          selection={mappings.find(m => m.id === selectedMappingID)}\n          style={{ gridArea: 'mappings' }}\n          onMappingSelected={s => setSelectedMappingID(s.id)}\n          onRenameMapping={onRenameMapping}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          suggestions={suggestions}\n          onAddSuggestionToMapping={suggestion =>\n            onAddEntriesToMapping([suggestion])\n          }\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n          {...mappings}\n          syle={{ height: '300px' }}\n        />\n      </div>\n    );\n  } else {\n    return <h1>Loading</h1>;\n  }\n}\n","import React from 'react';\nimport {\n  faColumns,\n  faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectCard({ project, stats }) {\n  return (\n    <div className=\"project-card card\">\n      <h2 className=\"title\">{project.name}</h2>\n      <p className=\"description\">{project.description}</p>\n      <div className=\"project-card-stats\">\n        <span>\n          {stats.columns} <FontAwesomeIcon icon={faColumns} />\n        </span>\n        <span>\n          {stats.datasets} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n        <span>\n          {stats.meta_columns} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport const EmptyProjectCard = ({ prompt, icon }) => (\n  <div className=\"project-card card new-project-card\">\n    <h2 className=\"title\">{prompt}</h2>\n    <FontAwesomeIcon icon={icon} size={'3x'} />\n  </div>\n);\n","import React from \"react\";\nimport ProjectCard, { EmptyProjectCard } from \"../components/ProjectCard\";\nimport { useProjectStats, useStorage } from \"../contexts/app_context\";\nimport { Link } from \"react-router-dom\";\n\nimport { faPlus, faUpload } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function WelcomePage() {\n    const projects = useProjectStats();\n    const { quota, usage } = useStorage();\n\n    return (\n        <div className=\"welcome-page page\">\n            <header className=\"welcome-page-header\">\n                <h1 className=\"large-title-header\">smooshr</h1>\n                <p>Wrangle those messy datasets</p>\n                <p className=\"feedback\">\n                    We need your help to make smooshr better! Try out our{\" \"}\n                    <a\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href=\"https://github.com/tsdataclinic/smooshr/blob/master/tutorial.md\"\n                    >\n                        tutorial\n                    </a>{\" \"}\n                    and leave your thoughts on our{\" \"}\n                    <a\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href=\"https://airtable.com/shrMCZrvP7467LNG7\"\n                    >\n                        feedback form\n                    </a>\n                </p>\n            </header>\n            {projects && (\n                <div className=\"projects-area\">\n                    <div className=\"\">\n                        <div className=\"region-header\">\n                            <h2>local projects</h2>\n                        </div>\n                        <div className=\"region-list\">\n                            {projects.map(p => (\n                                <Link to={`/project/${p.project.id}`}>\n                                    <ProjectCard\n                                        project={p.project}\n                                        stats={p.stats}\n                                    />\n                                </Link>\n                            ))}\n                            <Link to={\"/new_project\"}>\n                                <EmptyProjectCard\n                                    prompt={\"New Project\"}\n                                    icon={faPlus}\n                                />\n                            </Link>\n                            <Link to={\"/load_project\"}>\n                                <EmptyProjectCard\n                                    prompt={\"Load Project\"}\n                                    icon={faUpload}\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            <div className=\"storage\">\n                <p>\n                    smooshr processes and stores all data locally on your\n                    machine.\n                </p>\n                {quota && (\n                    <p>\n                        It is currently using {usage.toLocaleString()} Mb of{\" \"}\n                        {quota.toLocaleString()} Mb.\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function AboutPage() {\n    return (\n        <div className=\"about-page\">\n            <section>\n                <h2>What is smooshr?</h2>\n                <p>\n                    Introducing smooshr, a quick and friendly way to clean messy\n                    datasets.\n                </p>\n\n                <p>\n                    Datasets can be messy and as data scientists, data\n                    journalists, civic technologists or just the curious people,\n                    we spend a lot of our time trying to clean it up. That's why\n                    we built smooshr, a browser based tool that aids you in\n                    producing code that can quickly clean up unruly datasets.\n                </p>\n\n                <p>\n                    Our first release focuses on entity consolidation tasks but\n                    we have plans to extend this to other forms of data cleaning\n                    in the near future.\n                </p>\n            </section>\n            <section>\n                <h2>What is Data Clinic?</h2>\n                <p>\n                    As the data and tech philanthropic arm of Two Sigma, Data\n                    Clinic provides pro bono data science and engineering\n                    support to nonprofits and engages in open source tooling and\n                    research that contribute to the Data for Good movement.\n                </p>\n\n                <p>\n                    We leverage Two Sigma’s people, data science skills, and\n                    technological know-how to support communities, mission\n                    driven organizations, and the broader public in their effort\n                    to use data more effectively.\n                </p>\n\n                <p>\n                    To learn more visit{\" \"}\n                    <a href=\"dataclinic.twosigma.com\">\n                        dataclinic.twosigma.com\n                    </a>{\" \"}\n                    and connect with us via{\" \"}\n                    <a href=\"mailto:dataclinic@twosigma.com\">\n                        dataclinic@twosigma.com\n                    </a>\n                    .\n                </p>\n            </section>\n\n            <section>\n                <h2>How can I get involved?</h2>\n                <p>\n                    smooshr is an open source project which means anyone can\n                    help make it better. To log bugs, suggest features or to\n                    directly help improve the code, head over to our github page\n                    at{\" \"}\n                    <a href=\"https://github.com/tsdataclinic/smooshr/\">\n                        github.com/tsdataclinic/smooshr\n                    </a>\n                </p>\n\n                <p>\n                    We leverage Two Sigma’s people, data science skills, and\n                    technological know-how to support communities, mission\n                    driven organizations, and the broader public in their effort\n                    to use data more effectively.\n                </p>\n\n                <p>\n                    To learn more visit{\" \"}\n                    <a href=\"dataclinic.twosigma.com\">\n                        dataclinic.twosigma.com\n                    </a>{\" \"}\n                    and connect with us via{\" \"}\n                    <a href=\"mailto:dataclinic@twosigma.com\">\n                        dataclinic@twosigma.com\n                    </a>\n                    .\n                </p>\n            </section>\n        </div>\n    );\n}\n","import React from 'react';\nimport EditableText from './EditableText';\nimport { Link } from 'react-router-dom';\n\nexport default function ColumnCard({\n  name,\n  description,\n  fromColumns,\n  selected,\n  onClick,\n  onUpdate,\n  onUnmerge,\n  link,\n}) {\n  const totalUnique = fromColumns.reduce((tot, c) => tot + c.unique, 0);\n  return (\n    <div\n      onClick={onClick}\n      className={`column-card card ${selected ? 'selected' : ''}`}>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}>\n        <EditableText text={name} onUpdate={onUpdate} />\n        <h2>{totalUnique}</h2>\n      </div>\n      <p className=\"description\">{description}</p>\n\n      {fromColumns.map(c => (\n        <p key={c.name}>\n          {c.name} | {c.dataset.name}\n        </p>\n      ))}\n      <div className=\"column-action-buttons\">\n        {fromColumns.length > 1 && (\n          <button onClick={onUnmerge}>Split Column</button>\n        )}\n        <Link className=\"work-on-taxonomy-button\" to={link}>\n          <button>Work on taxonomy</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useStateValue, useProject } from '../contexts/app_context';\nimport { Link } from 'react-router-dom';\nimport ColumnCard from '../components/ColumnCard';\nimport TablePreview from '../components/TablePreview';\nimport {\n  mergeMetaColumns,\n  updateMetaColumn,\n  unMergeMetaColumn,\n} from '../contexts/actions';\nimport {\n  saveProject,\n} from '../utils/file_parsing';\n\nimport {\n  faColumns,\n  faDatabase,\n  faFistRaised,\n  faInfoCircle,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectPage(props) {\n  const { match, history } = props;\n  const { projectID } = match.params;\n  const {\n    project,\n    datasets,\n    metaColumns,\n    columns,\n    mappings,\n    entries,\n    deleteProject,\n  } = useProject(projectID);\n\n  const [selectedDatasetName, setSelectedDatasetName] = useState(\n    datasets && datasets.length > 0 ? datasets[0].name : null,\n  );\n\n  // Used to set the selected dataset to the first one on inital load\n  useEffect(() => {\n    if (datasets.length > 0 && !selectedDatasetName) {\n      setSelectedDatasetName(datasets[0].name);\n    }\n  }, [datasets, selectedDatasetName]);\n\n  const selectedDataset = datasets.find(d => d.name === selectedDatasetName);\n\n  const [, dispatch] = useStateValue();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n\n  const onSaveProject = () => {\n    saveProject(\n      project,\n      datasets,\n      metaColumns,\n      columns,\n      mappings,\n      entries,\n      {},\n    );\n  };\n\n  const changeMCName = (mc, name) => {\n    updateMetaColumn(mc.id, { name }, dispatch);\n  };\n  const deleteThisProject = () => {\n    deleteProject();\n    history.push('/');\n  };\n\n  const toggleSelectedColumn = id => {\n    if (selectedColumns.includes(id)) {\n      setSelectedColumns(selectedColumns.filter(cid => cid !== id));\n    } else {\n      setSelectedColumns([...selectedColumns, id]);\n    }\n  };\n\n  const seperateMetaDataColumn = id => {\n    unMergeMetaColumn(metaColumns.find(mc => mc.id === id), dispatch);\n  };\n\n  const dereferenceColumn = colID => {\n    const column = columns.find(c => c.id === colID);\n    return {\n      dataset: datasets.find(d => d.id === column.dataset_id),\n      name: column.name,\n      id: column.id,\n      unique: column.unique,\n    };\n  };\n\n  const mergeColumns = () => {\n    const toMerge = metaColumns.filter(mc => selectedColumns.includes(mc.id));\n    mergeMetaColumns(toMerge, dispatch);\n    setSelectedColumns([]);\n  };\n\n  return (\n    <div className=\"project-page page\">\n      {project ? (\n        <React.Fragment>\n          <div className=\"actions\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faFistRaised}\n                  style={{ marginRight: '20px' }}\n                />\n                Actions\n              </h2>\n\n              <div className=\"\">\n                <button onClick={onSaveProject}>Export Project</button>\n                <Link to={`/project/${projectID}/export`}>\n                  <button>Export Python code</button>\n                </Link>\n                <button onClick={deleteThisProject}>Delete Project</button>\n              </div>\n            </div>\n          </div>\n\n\n\n          <div className=\"metadata\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faInfoCircle}\n                  style={{ marginRight: '20px' }}\n                />\n                Metadata\n              </h2>\n              <div className=\"properties\">\n                <p>Name: {project.name}</p>\n                <p>Description: {project.description}</p>\n\n              </div>\n            </div>\n          </div>\n\n          <div className=\"columns region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faColumns}\n                  style={{ marginRight: '20px' }}\n                />\n                Columns\n              </h2>\n              {selectedColumns.length > 0 ? (\n                <button\n                  onClick={\n                    mergeColumns\n                  }>{`Merge ${selectedColumns.length} columns`}</button>\n              ) : (\n                  ''\n                )}\n            </div>\n            <div className=\"region-list column-list\">\n              {metaColumns.map(mc => (\n                <ColumnCard\n                  name={mc.name}\n                  description={mc.description}\n                  fromColumns={mc.columns.map(dereferenceColumn)}\n                  selected={selectedColumns.includes(mc.id)}\n                  onClick={() => toggleSelectedColumn(mc.id)}\n                  onUpdate={newName => changeMCName(mc, newName)}\n                  onUnmerge={() => seperateMetaDataColumn(mc.id)}\n                  link={`/project/${project.id}/column/${mc.id}`}\n                  key={mc.id}\n                />\n              ))}\n            </div>\n          </div>\n\n          <div className=\"datasets region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faDatabase}\n                  style={{ marginRight: '20px' }}\n                />\n                Datasets\n              </h2>\n            </div>\n            <div className='dataset-table-view'>\n              <div className=\"dataset-tabs\">\n                {datasets.map((dataset, index) => (\n                  <p\n                    key={dataset.name}\n                    className={\n                      selectedDatasetName === dataset.name\n                        ? 'selected-dataset dataset-tab'\n                        : 'dataset-tab'\n                    }\n                    onClick={() => setSelectedDatasetName(dataset.name)}>\n                    <span className='dataset-number'>{index + 1}</span> <span className='dataset-name'>{dataset.name}</span>\n                  </p>\n                ))}\n                <p className=\"final-dataset dataset-tab\">Result</p>\n                <div className=\"spacer\" />\n                <Link\n                  to={`/project/${projectID}/add_datasets`}\n                  className=\"add-dataset dataset-tab\">\n                  <FontAwesomeIcon icon={faPlus} />\n                  <span className='dataset-name'>Add Dataset</span>\n                </Link>\n              </div>\n              <div className='table'>\n                {datasets.length > 0 && selectedDataset && (\n                  <TablePreview\n                    data={selectedDataset.sample}\n                    columns={selectedDataset.columns}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n        </React.Fragment>\n      ) : (\n          <h1>Project not found</h1>\n        )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport UploadModal from \"./components/UploadModal\";\nimport ProjectModal from \"./components/ProjectModal\";\nimport LoadProjectModal from \"./components/LoadProjectModal\";\nimport GHPagesRedirect from \"./components/GHPagesRedirect\";\nimport ShowApplyMappingsModal from \"./components/ApplyMappingsModal\";\nimport CodeExportModal from \"./components/CodeExportModal\";\nimport DatasetPage from \"./pages/DatasetPage\";\nimport ColumnPage from \"./pages/ColumnPage\";\nimport WelcomePage from \"./pages/WelcomePage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ProjectPage from \"./pages/ProjectPage\";\nimport \"typeface-lato\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.scss\";\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <GHPagesRedirect />\n            <div className=\"App\">\n                <div className=\"main\">\n                    <Route\n                        path=\"/project/:projectID/dataset/:datasetID\"\n                        exact={true}\n                        component={DatasetPage}\n                    />\n                    <Route\n                        path=\"/project/:projectID/column/:columnID\"\n                        exact={true}\n                        component={ColumnPage}\n                    />\n                    <Route\n                        path=\"/project/:projectID\"\n                        exact={true}\n                        component={ProjectPage}\n                    />\n                    <Route path=\"/about\" exact={true} component={AboutPage} />\n                    <Route path=\"/\" exact={true} component={WelcomePage} />\n                </div>\n                <Footer />\n\n                <Route path=\"/\" component={Header} />\n\n                <Route path=\"/new_project\" component={ProjectModal} />\n                <Route path=\"/load_project\" component={LoadProjectModal} />\n\n                <Route\n                    path=\"/project/:projectID/export\"\n                    component={CodeExportModal}\n                />\n                <Route\n                    path=\"/project/:projectID/add_datasets\"\n                    component={UploadModal}\n                />\n\n                <Route\n                    path=\"/dataset/:datasetID/apply\"\n                    component={ShowApplyMappingsModal}\n                />\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './contexts/app_context'\n\nReactDOM.render(\n<StateProvider>\n  <App />\n</StateProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
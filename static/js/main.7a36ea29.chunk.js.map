{"version":3,"sources":["components/Header.js","components/TwoSigmaLogo.js","components/Footer.js","utils/file_parsing.js","utils/python_file.js","components/ProgressBar.js","components/FileSnapshot.js","components/Tabs.js","components/SearchBar.js","components/OpenDataSearcher.js","components/FileLoader.js","contexts/app_context.js","components/UploadModal.js","components/ProjectModal.js","utils/calc_embedings.js","contexts/actions.js","components/LoadProjectModal.js","components/GHPagesRedirect.js","components/ApplyMapping.js","components/ApplyMappingsModal.js","components/CodeExportModal.js","components/TablePreview.js","pages/DatasetPage.js","components/EntryCard.js","components/OrderBySelector.js","components/EntryPill.js","components/SelectedEntriesList.js","components/EntryTable.js","components/EditableText.js","components/MappingFocus.js","components/MappingsMenu.js","components/MappingsArea.js","utils/text_clustering.js","pages/ColumnPage.js","components/ProjectCard.js","pages/WelcomePage.js","components/ColumnCard.js","pages/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","history","match","className","style","display","alignItems","to","alt","src","process","target","rel","href","TwoSigmaLogo","width","height","viewBox","xmlns","id","d","fill","fill-rule","transform","Footer","icon","faTwitter","faMedium","faGithub","uuidv1","require","exportPythonCode","project","datasets","meta_columns","columns","mappings","settings","output_file","recipe_name","slugify","name","output_data_name","recipy","createJSONMapping","python_code","zip","JSZip","folder","file","JSON","stringify","generateAsync","type","then","content","saveAs","saveProject","entries","projectJSON","output_name","blob","Blob","description","make_col_mappings","col_renames","forEach","mc","map","cID","find","c","filter","dataset_id","rc","datasetsJSON","ref","rows","column_renames","mappingsJSON","applicableMappings","m","column_id","mapping","ProgressBar","total","value","toPrecision","FileSnapshot","onAddDataset","useState","setColumns","dataset","setDataset","setEntries","includedCols","setIncludedCols","progress","setProgress","status","setStatus","displayEntries","useMemo","reduce","res","col","col_entries","e","slice","extra","length","useEffect","onProgress","report_progress_every","sample_rows","max_unique","Promise","resolve","reject","no_rows","set_dict","sample","exceded","columnCounts","fileSize","size","split","Papa","parse","worker","header","download","step","row","push","data","meta","fields","f","rows_read","bytes_read","cursor","total_size","val","includes","error","console","log","complete","Object","keys","field","unique","key","count","row_count","parse_file_for_preview","result","Fragment","toLocaleString","column","class","checked","onChange","join","onClick","cols","focusCol","ents","Tabs","options","selected","onSelected","option","SearchBar","prompt","faSearch","placeholder","faTimes","OpneDataSearcher","onDataset","searchTerm","setSearchTerm","searchResults","setSearchResults","domain","fetch","json","results","catch","err","marginBottom","text","resource","permalink","faExternalLinkAlt","onSelect","faDownload","FileLoader","filesPreview","setFilesPreview","setError","url","setURL","columnSelections","setColumnSelections","selectedTab","setSelectedTab","submitFromURL","submitFromOpenData","onDrop","useCallback","files","every","useDropzone","getRootProps","getInputProps","isDragActive","classname","tab","disabled","faFile","accept","tabContent","defaultProps","StateContext","createContext","db","Dexie","version","stores","state","initalState","projects","embeddings","metaColumns","showUploadModal","showApplyMappingsModal","cache_loaded","storage_stats","persisting","add_or_replace","candidate","collection","id_col","item","reducer","action","payload","col_id","project_id","p","entry","columnID","meta_column","useStateValue","useContext","useProject","projectID","dispatch","meta_column_ids","colIDs","ids","column_ids","deleteProject","useMetaColumn","embeggins","mergedEntry","Array","from","Set","ec","entry_names","embed","useProjectStats","stats","project_datasets","project_columns","project_meta_columns","useStorage","quota","usage","useDataset","datasetID","columnIDs","UploadModal","params","onClose","goBack","overlay","backgroundColor","isOpen","onRequestClose","newDataset","ProjectModal","setName","setDescription","norm_vec","vec","mag","Math","sqrt","v","vec_mag","most_similar_to_category_mean","negativeEntries","search_entries","mean","entry_embeddings","emb","a","negative_embeddings","total_vec","concat","weight","i","category_mean","v1","v2","embeding","dist","index","suggestion","sort","b","combined_word_embedings_for_entry","word_embedings","norm","full_embed","word","word_embed","we","toLocaleLowerCase","rep","embedding","calc_embedings","unique_words","add","all","toLowerCase","replace","r","get_embedings_from_server","createMapping","selection","negative_examples","addEntriesToMapping","setProject","reader","FileReader","readAsText","onload","flexDirection","faDatabase","marginRight","faColumns","projectDetails","loadProject","GHPagesRedirect","redirect","setRedirect","sessionStorage","window","location","ApplyMapping","props","addColumns","setAddColumns","fileStream","streamSaver","createWriteStream","Response","body","pipeTo","ApplyMappingsModal","setFiles","CodeExportModal","changeNonMapped","setChangeNonMapped","createNewColumns","setCreateNewColumns","combineDatasets","setCombineDatasets","valueForNonMapped","setValueForNonMapped","TablePreview","k","setRows","rowGetter","rowsCount","onGridSort","sortColumn","sortDirection","initalRows","sortRows","DatasetPage","columnsForDataset","justifyContent","marginTop","EntryCard","onToggleSelect","OrderBySelector","show","setShowDropdown","setSelected","faSortDown","o","EntryPill","onRemove","SelectedEntriesList","onRemoveSelection","onClearAll","reverse","EntryTable","onToggleSelection","onClearSelection","order","setOrder","toggleSelection","orderKey","Alphabetically","Occurances","orderedEntries","faGlassCheers","EditableText","onUpdate","localText","setLocalText","editing","setEditing","onBlur","faEdit","MappingFocus","onRemoveEntryFromMapping","onRenameMapping","onClearMapping","onDeleteMapping","onAddSuggestionToMapping","onAddNegativeExampleToMapping","suggestions","suggestionType","setSuggestionType","suggestionsByType","removeEntryFromMapping","fontWeight","addSuggestionToMapping","faCheck","addNegativeExampleToMapping","MappingsMenu","onMappingSelected","mappingSelected","MappingsArea","onAddEntryToMapping","meaningSuggestions","textSuggestions","cacheSimilarities","suggestForMapping","mapping_entry","cacheKey","score","lev","ColumnPage","selectedMappingID","setSelectedMappingID","entrySelection","setEntrySelection","selectedMapping","requestEmbedingsForEntries","non_mapped_entries","some","useFuse","shouldSort","findAllMatches","caseSensitive","search","filteredEntries","clearSelection","onAddEntriesToMapping","entriesToAdd","shouldClearSelection","updateSearch","suggestionsAvaliable","meaning","total_rows","total_mapped_rows","total_entries_in_mappings","gridArea","justifySelf","onClear","overflowY","entryName","s","newName","renameMapping","deleteMapping","clearMapping","syle","ProjectCard","EmptyProjectCard","WelcomePage","faPlus","faUpload","ColumnCard","fromColumns","onUnmerge","link","total_unique","tot","ProjectPage","selectedDatasetName","setSelectedDatasetName","selectedDataset","selectedColumns","setSelectedColumns","seperateMetaDataColumn","unMergeMetaColumn","dereferenceColumn","colID","faInfoCircle","new_col","mergeMetaColumns","cid","changes","updateMetaColumn","changeMCName","faFistRaised","App","basename","path","exact","component","LoadProjectModal","ShowApplyMappingsModal","Boolean","hostname","ReactDOM","render","children","useReducer","put","navigator","storage","estimate","estimation","get","cachedState","persist","persistResult","Provider","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a36ea29.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header({ history, match }) {\n  return (\n    <div className=\"sidenav\">\n      <div className=\"logos\">\n        <Link style={{ display: 'flex', alignItems: 'center' }} to={'/'}>\n          <img alt={\"Data Clinic Modal\"} src={`${process.env.PUBLIC_URL}/DataClinicLogo.png`} />{' '}\n          <span className=\"data-clinic\">Data Clinic</span>{' '}\n        </Link>\n        <span className=\"project-name\">smooshr (beta)</span>\n      </div>\n      <div className=\"spacer\" />\n      <div className=\"top-menu\">\n        <Link to=\"/\">Projects</Link>\n        <Link to=\"/about\">About</Link>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n          Feedback\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TwoSigmaLogo() {\n  return (\n    <svg\n      width=\"116\"\n      height=\"21\"\n      viewBox=\"0 0 230 42\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      {' '}\n      <title>Two Sigma</title>\n      <defs>\n        <path id=\"a\" d=\"M19.436 21.668V1.025H0v20.643h19.435z\"></path>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          fill=\"#FFFFFF\"\n          d=\"M59.06 13.464h-7.137v-3.155h17.811v3.155H62.6V30.95h-3.54zm14.01-3.155h3.745l4.747 15.66h.06l4.483-15.66h3.301l4.454 15.66h.059l4.777-15.66h3.716L95.895 30.95H92.09l-4.335-15.127h-.059L83.361 30.95h-3.804zm41.214-.355c5.986 0 10.527 4.158 10.527 10.556 0 6.55-4.541 10.794-10.527 10.794-5.985 0-10.558-4.245-10.558-10.794 0-6.398 4.573-10.556 10.558-10.556m0 18.285c3.892 0 6.93-2.89 6.93-7.729 0-4.658-3.007-7.518-6.93-7.518-3.922 0-6.93 2.86-6.93 7.518 0 4.839 3.038 7.73 6.93 7.73m40.846-17.931h3.539V30.95h-3.54V19.41zm18.744-.355c2.832 0 5.222.885 7.313 2.33 0 0-2.026 2.374-2.128 2.311-1.56-1-3.21-1.574-5.096-1.574-4.247 0-7.048 3.068-7.048 7.433 0 4.746 2.624 7.785 7.048 7.785 1.534 0 3.067-.385 4.13-1.003v-4.897h-5.19v-2.623h8.462v9.347c-2.007 1.416-4.63 2.24-7.49 2.24-6.46 0-10.587-4.363-10.587-10.85 0-6.075 4.187-10.499 10.586-10.499m12.506.355h3.57l6.812 9.701 6.811-9.701h3.541V30.95h-3.421V15.558l-6.962 9.73-6.958-9.73V30.95h-3.392z\"></path>\n        <g transform=\"translate(210.418 9.283)\">\n          <path\n            d=\"M7.639 1.025h4.158l7.64 20.643H15.63l-1.561-4.454H5.368l-1.533 4.454H0L7.639 1.025zM6.34 14.354h6.725L9.734 4.74h-.06L6.34 14.354z\"\n            fill=\"#FFFFFF\"></path>\n        </g>\n        <path\n          d=\"M136.826 26.498c1.861 1.007 3.618 1.68 5.887 1.68 2.715 0 4.069-1.18 4.069-2.83 0-4.66-11.616-1.594-11.616-9.466 0-3.303 2.74-5.928 7.37-5.928 2.714 0 5.443.653 7.579 1.902l-2.314 2.361c-1.68-.72-3.11-1.137-5.146-1.137-2.389 0-3.806 1.21-3.806 2.744 0 4.63 11.62 1.473 11.62 9.494 0 3.393-2.567 5.985-7.756 5.985-3.035 0-6.33-1.076-8.273-2.419l2.386-2.386z\"\n          fill=\"#FFFFFF\"></path>\n        <path\n          fill=\"#009AA6\"\n          d=\"M20.625 0L0 20.63l20.625 20.628 20.63-20.628z\"></path>\n        <path\n          d=\"M9.748 26.478c-.16-6.605 7.789-5.746 7.789-9.13 0-1.1-.863-2.041-2.784-2.041-1.401 0-2.743.701-3.724 1.602l-1.46-1.463c1.259-1.18 3.223-2.14 5.284-2.14 3.304 0 4.986 1.842 4.986 4.003 0 4.986-7.728 4.104-7.728 8.27h7.607v1.98h-9.95l-.02-1.081zm15.937-.5c-1.521 0-2.423-.98-2.423-2.862 0-2.404 1.602-4.566 3.525-4.566 1.5 0 2.402.981 2.402 2.883 0 2.401-1.582 4.545-3.504 4.545zm9.713-9.25h-8.444v.003c-3.437.005-6.033 2.745-6.033 6.403 0 2.905 1.881 4.666 4.544 4.666 3.464 0 6.067-2.743 6.067-6.386 0-1.182-.313-2.173-.856-2.935h2.947l1.775-1.75z\"\n          fill=\"#FFF\"></path>\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport {\n  faTwitter,\n  faMedium,\n  faGithub,\n} from '@fortawesome/free-brands-svg-icons';\nimport TwoSigmaLogo from './TwoSigmaLogo';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <TwoSigmaLogo />\n      <p className=\"copyright\">\n        © 2019 Two Sigma Investments, LP. All rights reserved.\n      </p>\n      <p className=\"social\">\n        <a href=\"https://twitter.com/tsdataclinic?lang=en\" target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faTwitter} />\n        </a>\n        <a href=\"https://medium.com/dataclinic\" target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faMedium} />\n        </a>\n        <a href=\"https://github.com/tsdataclinic\" target=\"blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faGithub} />\n        </a>\n      </p>\n    </footer>\n  );\n}\n","import Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\nimport slugify from 'slugify';\nimport python_template from './python_file';\nimport JSZip from 'jszip';\n\nconst uuidv1 = require('uuid/v1');\n\n// Takes a file handle and returns the summary stats for that file\nexport function parse_file_for_preview(\n  file,\n  onProgress = null,\n  report_progress_every = 200,\n  sample_rows = 10,\n  max_unique = 500,\n) {\n  return new Promise((resolve, reject) => {\n    let no_rows = 0;\n    let set_dict = {};\n    let sample = [];\n    let exceded = [];\n    let columnCounts = {};\n\n    let ref = file.ref;\n    let fileSize = ref.size;\n\n    if (file.type !== 'file') {\n      ref = ref.split('?')[0];\n      ref = `${process.env.REACT_APP_API_URL}/proxy?url=${ref}`;\n    }\n\n    Papa.parse(ref, {\n      worker: true,\n      header: true,\n      download: file.type !== 'file',\n      step: function (row) {\n        if (no_rows < sample_rows) {\n          sample.push(row.data);\n        }\n\n        if (no_rows === 0) {\n          row.meta.fields.forEach(f => {\n            set_dict[f] = {};\n            columnCounts[f] = 0;\n          });\n        }\n\n        no_rows = no_rows + 1;\n\n        if (no_rows % report_progress_every === 0 && onProgress) {\n          onProgress({\n            rows_read: no_rows,\n            bytes_read: row.meta.cursor,\n            total_size: fileSize,\n          });\n        }\n\n        row.meta.fields.forEach(f => {\n          let val = row.data[f];\n\n          if (val === f) {\n            return;\n          }\n          if (val in set_dict[f]) {\n            set_dict[f][val] += 1;\n          } else {\n            if (columnCounts[f] < max_unique) {\n              set_dict[f][val] = 1;\n              columnCounts[f] += 1;\n            } else if (!exceded.includes(f)) {\n              exceded.push(f);\n            }\n          }\n        });\n      },\n      error: error => {\n        console.log('something bad happened ', error);\n      },\n      complete: () => {\n        let columns = [];\n        let entries = [];\n        const dataset_id = uuidv1();\n        Object.keys(set_dict).forEach(field => {\n          let column_id = uuidv1();\n\n          columns.push({\n            unique: Object.keys(set_dict[field]).length,\n            id: column_id,\n            name: field,\n            key: field,\n            dataset_id: dataset_id,\n            type: 'text',\n            exceded: exceded.includes(field),\n          });\n\n          Object.entries(set_dict[field]).forEach(([field, count]) =>\n            entries.push({ column_id, name: field, count }),\n          );\n        });\n\n        resolve({\n          dataset: {\n            id: dataset_id,\n            name: file.type === 'url' ? file.ref.split('?')[0] : file.ref.name,\n            file: file,\n            row_count: no_rows,\n            sample: sample,\n          },\n          columns: columns,\n          entries: entries,\n        });\n      },\n    });\n  });\n}\n\nexport const exportPythonCode = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  const recipe_name = slugify(project.name) + '.json';\n  const output_data_name = slugify(project.name) + 'csv';\n\n  const recipy = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    settings,\n  );\n  const python_code = python_template(recipe_name, output_data_name);\n\n  let zip = new JSZip();\n  let folder = zip.folder(project.name);\n  zip.folder(`${project.name}/put_your_datasets_in_here`);\n  zip.folder(`${project.name}/results`);\n  folder.file(recipe_name, JSON.stringify(recipy));\n  folder.file('process.py', python_code);\n  zip.generateAsync({ type: 'blob' }).then(content => {\n    saveAs(content, slugify(project.name) + 'zip');\n  });\n};\n\nexport const saveProject = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  entries,\n  settings,\n) => {\n  let projectJSON = {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n  };\n\n  const output_name = `${project.name}.json`;\n  var blob = new Blob([JSON.stringify(projectJSON)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\nexport const createJSONMapping = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  let projectJSON = {\n    name: project.name,\n    description: project.description,\n    id: project.id,\n  };\n\n  const make_col_mappings = d => {\n    const col_renames = {};\n    meta_columns.forEach(mc => {\n      const resolved_columns = mc.columns\n        .map(cID => columns.find(c => c.id === cID))\n        .filter(c => c.dataset_id === d.id);\n      resolved_columns.forEach(rc => {\n        col_renames[rc.name] = mc.name;\n      });\n    });\n    return col_renames;\n  };\n\n  let datasetsJSON = datasets.map(d => ({\n    type: d.file.type,\n    ref: d.file.ref,\n    rows: d.rows,\n    column_renames: make_col_mappings(d),\n  }));\n\n  const mappingsJSON = {};\n  meta_columns.forEach(mc => {\n    const applicableMappings = mappings.filter(m => m.column_id === mc.id);\n    mappingsJSON[mc.name] = {};\n    applicableMappings.forEach(mapping => {\n      mappingsJSON[mc.name][mapping.name] = mapping.entries;\n    });\n  });\n\n  const jsonOutput = {\n    project: projectJSON,\n    datasets: datasetsJSON,\n    mappings: mappingsJSON,\n    settings: settings ? settings : {},\n  };\n  return jsonOutput;\n};\n\nexport const saveMappingsJSON = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n) => {\n  const output_name = slugify(project.name) + '.json';\n  var jsonOutput = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n  );\n\n  var blob = new Blob([JSON.stringify(jsonOutput)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\n\nexport const saveMappingsCSV = (columns, mappings, output_name) => {\n  const csvMapping = columns.reduce((result, column) => {\n    const column_mappings = mappings.filter(m => m.column_id === column.id);\n    if (column_mappings.length > 0) {\n      column_mappings.forEach(mapping => {\n        mapping.entries.forEach(entry => {\n          result = result + [column.name, mapping.name, entry].join(',') + '\\n';\n        });\n      });\n    }\n    return result;\n  }, 'column,entry,mapped_entry\\n');\n  var blob = new Blob([csvMapping], { type: 'text/plain;charset=utf-8' });\n  saveAs(blob, `mappings_for_${output_name}.csv`);\n};\n\nexport const exportData = (project, outfile) => {\n  //   project.datasets.first.file\n};\n\nexport const applyAndSave = () => { };\nexport const applyMappingToFile = (columns, mappings, file) => { };\n","\nexport default function python_template(project_file,output_file){\n    var template = `\nimport pandas as pd \nimport json\nimport sys\n\nwith open('${project_file}', 'r') as f:\n    project = json.load(f)\n    datasets = project['datasets']\n\n    all_data = pd.DataFrame()\n\nfor dataset in datasets:\n    dataset_type = dataset['type']\n    dataset_name = dataset['ref']['path']\n    if(dataset_type=='file'):\n        file_path = 'put_your_datasets_in_here/{}'.format(dataset_name)\n        try:\n           print('Raeding {}'.format(dataset_name))\n           data = pd.read_csv(file_path)\n        except:\n           print(\"Place the file {} in the folder put_your_datasets_in_here\".format(file_path))\n           sys.exit()\n    elif(dataset_type['type'] == 'url'):\n        data = pd.read_csv(data['ref']['url'])\n    elif(dataset_Type['type'] == 'open_data'):\n        data = pd.read_csv(data['ref']['url'])\n        \n    print(\"Renaming columns\")\n    column_renames  = dataset['column_renames']\n    data = data.rename(columns=column_renames)\n\n    all_data = all_data.append(data, ignore_index=True)\n\nprint('Applying column mappings')\nfor column,mapping in project['mappings'].items():\n    map_dict = {}\n    for key, values in mapping.items():\n        for value in values:\n            map_dict[value] = key \n            \n    all_data[column] = all_data[column].map(lambda x: map_dict[x] if x in mapping else 'unknown')\n\nprint('Writing out results')\nall_data.to_csv('results/${output_file}')\nprint('Datasets have been smooshed')\n    `\n    return template\n}\n","import React from 'react'\n\nexport default function ProgressBar({ total, value, style }) {\n    return (\n        <div className='progress-bar' style={style}>\n            <div className='progress-bar-outer'>\n                <div className={'progress-bar-inner'} style={{ width: `${value * 100.0 / total}%` }}>\n                </div>\n            </div>\n            <p className='progress-bar-pc'>{value ? (value * 100 / total).toPrecision(3) : 0} %</p>\n        </div>\n    )\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport { parse_file_for_preview } from '../utils/file_parsing';\nimport ProgressBar from './ProgressBar'\n\nexport default function FileSnapshot({ file, onAddDataset }) {\n  const [columns, setColumns] = useState([]);\n  const [dataset, setDataset] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [includedCols, setIncludedCols] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [status, setStatus] = useState('loading');\n\n  const submit = () => {\n    const cols = columns.map(c => ({\n      ...c,\n      focusCol: includedCols.includes(c.id),\n    }));\n    const ents = entries.filter(e => includedCols.includes(e.column_id));\n\n    onAddDataset(dataset, cols, ents);\n\n    setStatus('saved');\n  };\n\n  const skip = () => {\n    setStatus('skipping');\n  };\n\n  const toggleSelect = column_id => {\n    if (includedCols.includes(column_id)) {\n      setIncludedCols(includedCols.filter(id => id !== column_id));\n    } else {\n      setIncludedCols([...includedCols, column_id]);\n    }\n  };\n\n  const displayEntries = useMemo(\n    () =>\n      columns.reduce((res, col) => {\n        const col_entries = entries.filter(e => e.column_id === col.id);\n        res[col.id] = {\n          entries: col_entries.slice(0, 5).map(e => e.name),\n          extra: col_entries.length - 5,\n        };\n\n        return res;\n      }, {}),\n    [entries, columns],\n  );\n\n  useEffect(() => {\n    parse_file_for_preview(file, progress => setProgress(progress)).then(\n      result => {\n        setStatus('selecting');\n        setDataset(result.dataset);\n        setColumns(result.columns);\n        setEntries(result.entries);\n      },\n    );\n  }, [file]);\n\n\n  return (\n    <div className=\"file-snapshot\">\n      <div className='file-snapshot-header'>\n        <h3>{file.type === 'url' ? file.ref : file.ref.name}</h3>\n        {status === 'loading' &&\n          <React.Fragment>\n            <p>Loading, parsed {progress.rows_read ? progress.rows_read.toLocaleString() : 0} rows</p>\n            <ProgressBar total={progress.total_size ? progress.total_size : 0} value={progress.bytes_read} style={{ width: '500px' }} />\n          </React.Fragment>\n        }\n        {status === 'selecting' &&\n          <p>\n            Has a total of {dataset.row_count} rows and {columns.length}{' '}\n            columns. Select the columns you want to work with\n          </p>}\n      </div>\n      {status === 'selecting' && (\n        <React.Fragment>\n          <ul className=\"column-summary-list \">\n            {columns.map(column => (\n              <li className='column-preview-card card' key={column.id}>\n                <div>\n                  <div class=\"summary_list_header\">\n                    <h3>\n                      {column.name} <span>{`${column.exceded ? '>' : ''} ${column.unique}`}</span>\n                    </h3>\n                    <input\n                      type=\"checkbox\"\n                      checked={includedCols.includes(column.id)}\n                      onChange={() => toggleSelect(column.id)}\n                    />\n                  </div>\n                  <p>\n                    {displayEntries[column.id].entries.join(', ') +\n                      ` and ${displayEntries[column.id].extra} more`}\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n\n          <div className='column-summary-buttons'>\n            <button onClick={submit}>Load</button>\n            <button onClick={skip}>Skip</button>\n          </div>\n        </React.Fragment>\n      )}\n\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Tabs({ options, selected, onSelected }) {\n  return (\n    <div className=\"tabs\">\n      {options.map(option => (\n        <p\n          className={`tab ${selected === option ? 'selected' : ''} `}\n          key={option}\n          onClick={() => onSelected(option)}>\n          {option}\n        </p>\n      ))}\n    </div>\n  );\n}","import React from 'react'\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function SearchBar({ value, onChange, prompt, style }) {\n\n  return (\n    <div className='search-bar-container' style={style}>\n      <FontAwesomeIcon className='search-icon' icon={faSearch} />\n      <input type='text'\n        className='search-bar'\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={prompt}\n        value={value}\n      />\n      <FontAwesomeIcon className='clear-icon' onClick={() => onChange('')} icon={faTimes} />\n    </div>\n  )\n}\n\n\nSearchBar.defaultProps = {\n  style: {}\n}\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport { faExternalLinkAlt, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function OpneDataSearcher({ onDataset }) {\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const domain = 'data.cityofnewyork.us';\n  const onSelect = dataset => {\n    onDataset({\n      type: 'opendata',\n      ref: `https://data.cityofnewyork.us/api/views/${dataset.resource.id}/rows.csv?accessType=DOWNLOAD`,\n    });\n  };\n\n  useEffect(() => {\n    const base = 'https://api.us.socrata.com/api/catalog/v1?';\n    fetch(\n      `${base}domains=${domain}&search_context=${domain}&limit=20&only=datasets&q=${searchTerm}`,\n    )\n      .then(res => res.json())\n      .then(res => {\n        setSearchResults(res.results);\n      })\n      .catch(err => console.log(err));\n  }, [searchTerm]);\n\n  return (\n    <div className=\"open-data-search\">\n      <SearchBar\n        style={{ marginBottom: '30px' }}\n        text={searchTerm}\n        onChange={setSearchTerm}\n      />\n      {searchResults.map(dataset => (\n        <p>\n          {dataset.resource.name}{' '}\n          <span className=\"open-data-result-controls\">\n            {' '}\n            <a href={dataset.permalink} target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n            </a>{' '}\n            <FontAwesomeIcon\n              onClick={() => onSelect(dataset)}\n              icon={faDownload}\n            />\n          </span>{' '}\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport FileSnapshot from './FileSnapshot';\nimport Tabs from './Tabs';\nimport OpenDataSearcher from './OpenDataSearcher';\n\nimport { faFile, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function FileLoader({ onAddDataset }) {\n  const [filesPreview, setFilesPreview] = useState(null);\n  const [error, setError] = useState(null);\n  const [url, setURL] = useState(null);\n\n  const [columnSelections, setColumnSelections] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('file');\n\n  const submitFromURL = () => {\n    setFilesPreview([{ type: 'url', ref: url }]);\n  };\n\n  const submitFromOpenData = dataset => {\n    setFilesPreview([dataset]);\n  };\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFilesPreview(files.map(f => ({ type: 'file', ref: f })));\n      setColumnSelections({ ...columnSelections, [files[0].name]: {} });\n      setError(null);\n    } else {\n      setError('Some files are not CSVs, We only support CSVs for now');\n    }\n  }, [columnSelections]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const renderURL = () => {\n    return (\n      <div className=\"url-tab\">\n        <FontAwesomeIcon icon={faDownload} />\n        <div>\n          <input\n            placeholder=\"dataseturl\"\n            value={url}\n            onChange={e => setURL(e.target.value)}\n          />\n          <button disabled={!url} onClick={submitFromURL}>\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderOpenDataPortal = () => {\n    return <OpenDataSearcher onDataset={submitFromOpenData} />;\n  };\n\n  const renderFile = () => {\n    return (\n      <div {...getRootProps()}>\n        <div className=\"file-tab\" style={{ cursor: 'p' }}>\n          <FontAwesomeIcon icon={faFile} />\n          <input\n            {...getInputProps({\n              accept: ['text/csv', 'application/vnd.ms-excel'],\n            })}\n          />\n          {isDragActive ? (\n            <p>Drop the files here ... </p>\n          ) : (\n              <p>Drag 'n' drop files here or click to load dataset</p>\n            )}\n        </div>\n        {error && <p>{error}</p>}\n      </div>\n    );\n  };\n\n  const tabContent = () => {\n    switch (selectedTab) {\n      case 'url':\n        return renderURL();\n      case 'open data portal':\n        return renderOpenDataPortal();\n      default:\n        return renderFile();\n    }\n  };\n\n  return (\n    <div classname=\"file-uploader\">\n      <Tabs\n        options={['file', 'url', 'open data portal']}\n        selected={selectedTab}\n        onSelected={tab => setSelectedTab(tab)}\n      />\n\n      {filesPreview ? (\n        <div>\n          {filesPreview.map(file => (\n            <FileSnapshot file={file} onAddDataset={onAddDataset} />\n          ))}\n        </div>\n      ) : (\n          <div className=\"content\">{tabContent()}</div>\n        )}\n    </div>\n  );\n}\n","import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport Dexie from 'dexie';\n\nconst uuidv1 = require('uuid/v1');\n\nexport const StateContext = createContext();\n\nconst db = new Dexie('state');\n\ndb.version(1).stores({\n  state: 'id',\n});\n\nconst initalState = {\n  datasets: [],\n  columns: [],\n  entries: [],\n  projects: [],\n  mappings: [],\n  embeddings: [],\n  metaColumns: [],\n  showUploadModal: false,\n  showApplyMappingsModal: false,\n  cache_loaded: false,\n  storage_stats: null,\n  persisting: false,\n};\n\n// Helper function\nconst add_or_replace = (candidate, collection, id_col = 'id') => {\n  if (collection.find(item => item[id_col] === candidate[id_col])) {\n    return collection.map(item =>\n      item[id_col] === candidate[id_col] ? candidate : item,\n    );\n  } else {\n    return [...collection, candidate];\n  }\n};\n\n// Main Reducer for the project\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'LOAD_CACHED_STATE':\n      return payload;\n\n    case 'ADD_DATASETS':\n      return { ...state, datasets: [...state.datasets, ...payload] };\n\n    case 'ADD_OR_REPLACE_DATASET':\n      return {\n        ...state,\n        datasets: add_or_replace(payload, state.datasets),\n      };\n    case 'ADD_OR_REPLACE_ENTRY':\n      return {\n        ...state,\n        entries: add_or_replace(payload, state.entries, 'name'),\n      };\n    case 'ADD_OR_REPLACE_MAPPING':\n      return {\n        ...state,\n        mappings: add_or_replace(payload, state.mappings),\n      };\n    case 'ADD_OR_REPLACE_METACOLUMN':\n      return {\n        ...state,\n        metaColumns: add_or_replace(payload, state.metaColumns),\n      };\n    case 'ADD_OR_REPLACE_PROJECT':\n      return {\n        ...state,\n        projects: add_or_replace(payload, state.projects),\n      };\n    case 'ADD_OR_REPLACE_COLUMN':\n      return {\n        ...state,\n        columns: add_or_replace(payload, state.columns),\n      };\n    case 'REMOVE DATASET':\n      return {\n        ...state,\n        datasets: state.datasets.filter(d => d.id !== payload),\n      };\n\n    case 'ADD_EMBEDINGS':\n      return {\n        ...state,\n        embeddings: payload,\n      };\n    case 'ADD_COLUMNS':\n      return { ...state, columns: [...state.columns, ...payload] };\n\n    case 'REMOVE_COLUMN':\n      return {\n        ...state,\n        columns: state.datasets.filter(c => c.id !== payload),\n      };\n\n    case 'ADD_ENTRIES':\n      return { ...state, entries: [...state.entries, ...payload] };\n\n    case 'REMOVE ENTRY':\n      return {\n        ...state,\n        entries: state.entries.filter(e => e.id !== payload),\n      };\n\n    case 'CREATE_META_COLUMN_FROM_COL_ID':\n      return {\n        ...state,\n        metaColumns: [\n          ...state.metaColumns,\n          {\n            id: payload.id,\n            name: state.columns.find(c => c.id === payload.col_id).name,\n            description: state.columns.find(c => c.id === payload.col_id)\n              .description,\n            project_id: payload.project_id,\n            columns: [payload.col_id],\n          },\n        ],\n      };\n\n    case 'REMOVE_MAPPINGS_FOR_METACOLUMN':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.column_id !== payload),\n      };\n\n    case 'REMOVE_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: state.metaColumns.filter(mc => !payload.includes(mc.id)),\n      };\n    case 'ADD_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: [...state.metaColumns, ...payload],\n      };\n\n    case 'REMOVE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.id !== payload),\n      };\n\n    case 'ADD_MAPPINGS':\n      return {\n        ...state,\n        mappings: [...state.mappings, ...payload],\n      };\n\n\n    case 'ADD_MAPPING':\n      return {\n        ...state,\n        mappings: [...state.mappings, payload],\n      };\n\n    case 'ADD_PROJECT':\n      return {\n        ...state,\n        projects: [...state.projects, { id: uuidv1(), ...payload }],\n      };\n\n    case 'REMOVE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.filter(p => p.id !== payload),\n      };\n\n    case 'UPDATE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.map(p =>\n          p.id === payload.id ? { ...p, ...payload } : p,\n        ),\n      };\n\n    case 'ADD ENTRY TO MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id\n            ? { ...m, entries: [...m.entries, payload.entry] }\n            : m,\n        ),\n      };\n    case 'UPDATE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id ? { ...m, ...payload.mapping } : m,\n        ),\n      };\n    case 'REMOVE_ENTRIES_FOR_COLUMN':\n      return {\n        ...state,\n        entries: state.entries.filter(entry => entry.columnID === payload),\n      };\n\n    case 'REMOVE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.filter(mc => mc.id !== payload),\n      };\n\n    case 'UPDATE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.map(mc =>\n          mc.id === payload.id ? { ...mc, ...payload.meta_column } : mc,\n        ),\n      };\n\n    case 'SET_PERSISTING':\n      return {\n        ...state,\n        persisting: payload,\n      };\n    case 'UPDATE_STORAGE_QUOTA':\n      return {\n        ...state,\n        storage_stats: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const {\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded\n  } = state;\n\n\n  // Effect used to persist the state values that we care about preserving\n  // to our cache \n  // TODO move this function to it's own hook section\n  useEffect(() => {\n    if (cache_loaded) {\n\n      db.state.put({\n        data: JSON.stringify({\n          datasets,\n          columns,\n          entries,\n          projects,\n          mappings,\n          metaColumns,\n          showUploadModal,\n          showApplyMappingsModal,\n        }), id: 1\n      });\n\n      if (navigator.storage && navigator.storage.estimate) {\n        navigator.storage.estimate().then(estimation => {\n          const { quota, usage } = estimation;\n          dispatch({\n            type: 'UPDATE_STORAGE_QUOTA',\n            payload: { quota, usage },\n          });\n        });\n      } else {\n        console.error('StorageManager not found');\n      }\n    }\n  }, [\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n    cache_loaded\n  ]);\n\n  // Use this to restore the state\n  useEffect(() => {\n    db.state.get(1).then(result => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: { ...initalState, ...cachedState, cache_loaded: true },\n        });\n      } else {\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: { ...initalState, cache_loaded: true },\n        });\n      }\n    });\n  }, []);\n\n\n  // Record if we are able to reliably persist the \n  // cached local state\n  useEffect(() => {\n    if (navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(persistResult => {\n        dispatch({\n          type: 'SET_PERSISTING',\n          payload: persistResult,\n        });\n      });\n    }\n  }, []);\n\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\n\nexport const useStateValue = () => useContext(StateContext);\n\nexport const useProject = projectID => {\n  const [state, dispatch] = useStateValue();\n  const project = state.projects.find(p => p.id === projectID);\n  const datasets = state.datasets.filter(d => d.project_id === projectID);\n  const meta_columns = state.metaColumns.filter(\n    mc => mc.project_id === projectID,\n  );\n  const meta_column_ids = meta_columns.map(mc => mc.id);\n\n  const colIDs = meta_columns.reduce((ids, mc) => [...ids, ...mc.columns], []);\n  const mappings = state.mappings.filter(m =>\n    meta_column_ids.includes(m.column_id),\n  );\n  const columns = state.columns.filter(c => colIDs.includes(c.id));\n  const column_ids = columns.map(c => c.id);\n  const entries = state.entries.filter(e => column_ids.includes(e.column_id));\n\n  const deleteProject = () => {\n    columns.forEach(c => {\n      dispatch({\n        type: 'DELETE_ENTRIES_FOR_COLUMN',\n        payload: c.id,\n      });\n      dispatch({\n        type: 'REMOVE_COLUMN',\n        payload: c.id,\n      });\n    });\n\n    mappings.forEach(m => {\n      dispatch({\n        type: 'REMOVE_MAPPING',\n        payload: m.id,\n      });\n    });\n\n    meta_columns.forEach(m => {\n      dispatch({\n        type: 'REMOVE_META_COLUMN',\n        payload: m.id,\n      });\n    });\n    datasets.forEach(d => {\n      dispatch({\n        type: 'REMOVE_DATASET',\n        payload: d.id,\n      });\n    });\n\n    dispatch({\n      type: 'REMOVE_PROJECT',\n      payload: project.id,\n    });\n  };\n\n  return {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    deleteProject,\n    entries,\n  };\n};\n\nexport const useColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const column = state.columns.find(c => c.id === columnID);\n  const entries = state.entries.filter(e => e.column_id === columnID);\n  const mappings = state.mappings.filter(m => m.column_id === columnID);\n  const entry_names = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entry_names.includes(embed.entry),\n  );\n  return { column, entries, mappings, embeddings, dispatch };\n};\n\nexport const useMetaColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const meta_column = state.metaColumns.find(c => c.id === columnID);\n  if (!meta_column) {\n    return {\n      meta_column: null,\n      entries: [],\n      mappings: [],\n      embeggins: [],\n      dispatch,\n    };\n  }\n  const entries = state.entries.filter(e =>\n    meta_column.columns.includes(e.column_id),\n  );\n\n  // Need to consolidate the entries down to as single space.\n  const entryNames = Array.from(new Set(entries.map(e => e.name)));\n  const mergedEntry = entryNames.map(name => {\n    const entry_collection = entries.filter(e => e.name === name);\n    const total = entry_collection.reduce((total, ec) => total + ec.count, 0);\n    return {\n      name,\n      count: total,\n    };\n  });\n\n  const mappings = state.mappings.filter(m => m.column_id === meta_column.id);\n  const entry_names = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entry_names.includes(embed.entry),\n  );\n  return { meta_column, entries: mergedEntry, mappings, embeddings, dispatch };\n};\n\nexport const useProjectStats = () => {\n  const [state,] = useStateValue();\n  const { projects, datasets, columns } = state;\n  const project_stats = projects.reduce((stats, project) => {\n    const project_datasets = datasets\n      .filter(d => d.project_id === project.id)\n      .map(d => d.id);\n    const project_columns = columns.filter(c =>\n      project_datasets.includes(c.id),\n    );\n    const project_meta_columns = columns.filter(\n      mc => mc.project_id === project.id,\n    );\n    return [\n      ...stats,\n      {\n        project: project,\n        stats: {\n          datasets: datasets.length,\n          columns: project_columns.length,\n          meta_columns: project_meta_columns.length,\n        },\n      },\n    ];\n  }, []);\n  return project_stats;\n};\n\nexport const useStorage = () => {\n  const [{ storage_stats, persisting },] = useStateValue();\n  if (storage_stats) {\n    return {\n      persisting,\n      quota: storage_stats.quota / 1e6,\n      usage: storage_stats.usage / 1e6,\n    };\n  } else {\n    return {};\n  }\n};\n\nexport const useDataset = datasetID => {\n  const [state,] = useStateValue();\n  const dataset = state.datasets.find(d => d.id === datasetID);\n  const columns = state.columns.filter(d => d.dataset_id === datasetID);\n  const columnIDs = columns.map(c => c.id);\n  const mappings = state.mappings.filter(m => columnIDs.includes(m.columnID));\n  return { dataset, columns, mappings };\n};\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport FileLoader from './FileLoader';\nimport { useStateValue } from '../contexts/app_context';\nconst uuidv1 = require('uuid/v1');\n\nexport default function UploadModal({ match, history }) {\n  const { projectID } = match.params;\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const addDatasetToStore = (newDataset, columns, entries) => {\n    const meta_columns = columns\n      .filter(c => c.focusCol)\n      .map(column => ({\n        columns: [column.id],\n        name: column.name,\n        description: '',\n        project_id: projectID,\n        id: uuidv1(),\n      }));\n\n    dispatch({\n      type: 'ADD_DATASETS',\n      payload: [{ ...newDataset, project_id: projectID }],\n    });\n\n    dispatch({\n      type: 'ADD_COLUMNS',\n      payload: columns,\n    });\n\n    dispatch({\n      type: 'ADD_ENTRIES',\n      payload: entries,\n    });\n\n    dispatch({\n      type: 'ADD_META_COLUMNS',\n      payload: meta_columns,\n    });\n\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '60%', width: '80%', transform: 'translate(10%,15%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <FileLoader onAddDataset={addDatasetToStore} onClose={onClose} />\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function ProjectModal({ match, history }) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n\n  const createProject = () => {\n    dispatch({\n      type: 'ADD_PROJECT',\n      payload: { name, description },\n    });\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '35%', width: '50%', transform: 'translate(40%,40%)' },\n\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"new-project-modal\">\n        <h1>New Project</h1>\n        <p>Project Name</p>\n        <input\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"name\"\n        />\n        <p>Description</p>\n        <textarea\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n          placeholder=\"description\"\n        />\n        <div className=\"buttons\">\n          <button onClick={createProject}>Create</button>\n          <button className=\"cancel-button\" onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","const get_embedings_from_server = entries => {\n  let unique_words = new Set();\n  entries.forEach(entry => {\n    entry.name.split(' ').forEach(word => {\n      unique_words.add(word);\n    });\n  });\n\n  return Promise.all(\n    Array.from(unique_words).map(entry =>\n      fetch(\n        `${\n        process.env.REACT_APP_API_URL\n        }/embedding/${entry.toLowerCase().replace(/[\\W_]+/g, '')}`,\n      )\n        .then(r => r.json())\n        .then(r => r[0]),\n    ),\n  );\n};\n\nconst vec_mag = vec => Math.sqrt(vec.reduce((mag, v) => mag + v * v, 0));\n\nconst norm_vec = vec => {\n  const mag = vec_mag(vec);\n  return vec.map(v => v / mag);\n};\n\nconst category_mean = (entries, negativeEntries, embeddings) => {\n  const entry_embeddings = entries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, 1]);\n\n  const negative_embeddings = negativeEntries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, -1]);\n\n  const all_entry_contributions = entry_embeddings.concat(negative_embeddings);\n\n  const total_vec = all_entry_contributions.reduce((total, embed) => {\n    const weight = embed[1];\n    const vec = embed[0].map(v => v * weight);\n\n    if (total.length === 0) {\n      total = vec;\n    } else {\n      total = vec.map((v, i) => v + total[i]);\n    }\n    return total;\n  }, []);\n\n  return norm_vec(total_vec);\n};\n\nconst vec_dist2 = (v1, v2) =>\n  v1.reduce((total, v, index) => total + (v - v2[index]) * (v - v2[index]), 0);\n\nexport const most_similar_to_category_mean = (\n  entries,\n  negativeEntries,\n  search_entries,\n  embeddings,\n) => {\n  const mean = category_mean(entries, negativeEntries, embeddings);\n\n  const distances = search_entries.map(entry => {\n    const embeding = embeddings.find(e => e.entry === entry.name);\n    if (embeding) {\n      const dist = vec_dist2(norm_vec(embeding.embed), mean);\n      return { suggestion: entry.name, dist: dist };\n    } else {\n      return { suggestion: entry.name, dist: 2000000 };\n    }\n  });\n  return distances\n    .filter(a => a.dist > 0)\n    .filter(a => !entries.includes(a.suggestion))\n    .filter(a => !negativeEntries.includes(a.suggestion))\n    .sort((a, b) => (a.dist > b.dist ? 1 : -1))\n    .slice(0, 8);\n};\n\nconst combined_word_embedings_for_entry = (\n  entry,\n  word_embedings,\n  norm = false,\n) =>\n  entry.name.split(' ').reduce((full_embed, word) => {\n    const word_embed = word_embedings\n      .filter(embed => embed)\n      .find(we => we.key === word.toLocaleLowerCase());\n\n    if (word_embed) {\n      let rep = word_embed.embedding;\n      if (norm) {\n        rep = norm_vec(rep);\n      }\n\n      if (full_embed.length === 0) {\n        full_embed = rep;\n      } else {\n        full_embed = full_embed.map((v, i) => v + rep[i]);\n      }\n    }\n    return full_embed;\n  }, []);\n\nexport const calc_embedings = entries =>\n  get_embedings_from_server(entries).then(word_embedings =>\n    entries.map(entry => ({\n      entry: entry.name,\n      embed: combined_word_embedings_for_entry(entry, word_embedings),\n    })),\n  );\n","import { calc_embedings } from '../utils/calc_embedings';\nconst uuidv1 = require('uuid/v1');\n\nexport function createMapping(selection, columnID, name, dispatch) {\n  const id = uuidv1();\n  dispatch({\n    type: 'ADD_MAPPING',\n    payload: {\n      name: name,\n      entries: selection,\n      negative_examples: [],\n      column_id: columnID,\n      id,\n    },\n  });\n  return id;\n}\n\nexport function renameMapping(mapping, newName, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      mapping: {\n        name: newName,\n      },\n      id: mapping.id,\n    },\n  });\n}\n\nexport function loadProject(projectDetails, dispatch) {\n  const {\n    project,\n    datasets,\n    entries,\n    columns,\n    mappings,\n    meta_columns,\n  } = projectDetails;\n\n  dispatch({\n    type: 'ADD_OR_REPLACE_PROJECT',\n    payload: project,\n  });\n\n  datasets.forEach(dataset => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_DATASET',\n      payload: dataset,\n    });\n  });\n\n  columns.forEach(column => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_COLUMN',\n      payload: column,\n    });\n  });\n\n  mappings.forEach(mapping => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_MAPPING',\n      payload: mapping,\n    });\n  });\n\n  meta_columns.forEach(mc => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_METACOLUMN',\n      payload: mc,\n    });\n  });\n\n  entries.forEach(entry => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_ENTRY',\n      payload: entry,\n    });\n  });\n}\n\nexport function removeEntryFromMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: mapping.entries.filter(e => e !== entry),\n      },\n    },\n  });\n}\n\nexport function deleteMapping(mapping, dispatch) {\n  dispatch({\n    type: 'REMOVE_MAPPING',\n    payload: mapping.id,\n  });\n}\n\nexport function clearMapping(mapping, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [],\n      },\n    },\n  });\n}\n\nexport function requestEmbedingsForEntries(entries, dispatch) {\n  calc_embedings(entries).then(embeddings => {\n    dispatch({\n      type: 'ADD_EMBEDINGS',\n      payload: embeddings,\n    });\n  });\n}\n\nexport function addNegativeExampleToMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        negative_examples: [...mapping.negative_examples, entry],\n      },\n    },\n  });\n}\nexport function addEntriesToMapping(mapping, entries, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [...mapping.entries, ...entries],\n      },\n    },\n  });\n}\n\nexport function updateMetaColumn(id, changes, dispatch) {\n  dispatch({\n    type: 'UPDATE_META_COLUMN',\n    payload: {\n      id,\n      meta_column: changes,\n    },\n  });\n}\n\nexport function unMergeMetaColumn(meta_column, dispatch) {\n  meta_column.columns.forEach(col_id => {\n    dispatch({\n      type: 'CREATE_META_COLUMN_FROM_COL_ID',\n      payload: {\n        col_id,\n        id: uuidv1(),\n        project_id: meta_column.project_id,\n      },\n    });\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: [meta_column.id],\n  });\n\n  dispatch({\n    type: 'REMOVE_MAPPINGS_FOR_METACOLUMN',\n    payload: meta_column.id,\n  });\n}\n\nexport function mergeMetaColumns(meta_columns, dispatch) {\n  const new_col = meta_columns[0];\n  const ids = meta_columns.map(mc => mc.id);\n\n  meta_columns.slice(1).forEach(mc => {\n    new_col.columns = [...new_col.columns, ...mc.columns];\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: ids,\n  });\n\n  dispatch({\n    type: 'ADD_META_COLUMNS',\n    payload: [new_col],\n  });\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { useStateValue } from '../contexts/app_context';\nimport { useDropzone } from 'react-dropzone';\nimport { faFile } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { loadProject } from '../contexts/actions';\n\nimport {\n  faColumns,\n  faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ProjectModal({ match, history }) {\n  const onClose = () => history.goBack();\n  const [, dispatch] = useStateValue();\n  const [error,] = useState(null);\n\n  const [project, setProject] = useState(null);\n\n  const onDrop = useCallback(files => {\n    const file = files[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = f => {\n      setProject(JSON.parse(reader.result));\n    };\n  }, []);\n\n  const loadIt = () => {\n    loadProject(project, dispatch);\n    history.goBack();\n  };\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  return (\n    <ReactModal\n      isOpen={true}\n      onRequestClose={onClose}\n      style={{\n        content: { height: '50%', width: '60%', transform: 'translate(25%,15%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}>\n      <div className=\"load-project-modal\">\n        <h1>Load Project</h1>\n        <div className=\"content\">\n          {project ? (\n            <div>\n              <h1>{project.project.name}</h1>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faDatabase}\n                    style={{ marginRight: '20px' }}\n                  />\n                  <h2>Datasets</h2>\n                </header>\n                <p>{project.project.description}</p>\n                {project.datasets.map(d => (\n                  <p>{d.name}</p>\n                ))}\n              </section>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faColumns}\n                    style={{ marginRight: '20px' }}\n                  />\n                  <h2>Coumns</h2>\n                </header>\n                {project.meta_columns.map(mc => (\n                  <p>{mc.name}</p>\n                ))}\n              </section>\n              <button onClick={loadIt}>Load</button>\n            </div>\n          ) : (\n              <div {...getRootProps()}>\n                <div className=\"file-tab\" style={{ cursor: 'p' }}>\n                  <FontAwesomeIcon icon={faFile} />\n                  <input\n                    {...getInputProps({\n                      accept: ['text/csv', 'application/vnd.ms-excel'],\n                    })}\n                  />\n                  {isDragActive ? (\n                    <p>Drop the files here ... </p>\n                  ) : (\n                      <p>\n                        Drag 'n' drop project file here or click to load project\n                  </p>\n                    )}\n                </div>\n                {error && <p>{error}</p>}\n              </div>\n            )}\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function GHPagesRedirect() {\n  const [redirect, setRedirect] = useState(null);\n  useEffect(() => {\n    // This is for dealing with the 404 redirect issue on gh pages\n    var target = sessionStorage.redirect;\n    delete sessionStorage.redirect;\n\n    if (target && target !== window.location.href) {\n      let to = target;\n      if (process.env.PUBLIC_URL) {\n        to =\n          '/' +\n          to\n            .split('/')\n            .slice(4)\n            .join('/');\n      }\n      setRedirect(to);\n    }\n  }, []);\n\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  } else {\n    return <React.Fragment />;\n  }\n}\n","import React, { useState } from 'react';\nimport streamSaver from 'streamsaver';\n\nexport default function ApplyMapping(props) {\n  const { file, columns } = props;\n\n  const [addColumns, setAddColumns] = useState(true);\n  const [status, setStatus] = useState('pending');\n\n  const startProcessing = () => {\n    setStatus('running');\n    const fileStream = streamSaver.createWriteStream('processed.txt', {\n      size: 22,\n    });\n    new Response('StreamSaver is awesome').body.pipeTo(fileStream).then(\n      () => {\n        console.log('SAVED');\n      },\n      () => {\n        console.log('ERROR');\n      },\n    );\n  };\n\n  return (\n    <div className=\"apply-mapping\">\n      {status === 'pending' && (\n        <React.Fragment>\n          <p id={file.name}>{file.name}</p>\n          <div className=\"options\">\n            <p>Applying mappings to {columns.length} columns</p>\n            Add Columns:{' '}\n            <input\n              type=\"checkbox\"\n              checked={addColumns}\n              onChange={e => setAddColumns(e.target.checked)}\n            />\n            Treat Unmapped as Unknown: <input type=\"checkbox\" />\n            <button onClick={startProcessing}>Apply Mapping</button>\n          </div>\n        </React.Fragment>\n      )}\n      {status === 'running' && <h2>Running</h2>}\n      {status === 'done' && <h2>Done</h2>}\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport ApplyMapping from './ApplyMapping'\nimport { useDataset } from '../contexts/app_context'\n\nimport { useDropzone } from 'react-dropzone';\n\nexport default function ApplyMappingsModal({ match, history }) {\n\n  const [files, setFiles] = useState(null);\n  const [error, setError] = useState(null);\n  const { datasetID } = match.params\n\n  const onClose = () => {\n    history.goBack()\n  }\n\n  const { columns, mappings } = useDataset(datasetID);\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFiles(files);\n    } else {\n      setError(\n        \"Smoosher currently only supports CSV's please just upload those!\",\n      );\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <ReactModal isOpen={true} onRequestClose={onClose}>\n      {error && <h1>{error}</h1>}\n\n      {files ? (\n        <div>\n          {files.map(file => (\n            <ApplyMapping\n              file={file}\n              columns={columns}\n              mappings={mappings}\n            />\n\n          ))}\n        </div>\n      ) : (\n          <React.Fragment>\n            <h1>Select files to apply mapping to</h1>\n            <div className=\"file-uploader\">\n              <div {...getRootProps()}>\n                <input\n                  {...getInputProps({\n                    accept: ['text/csv', 'application/vnd.ms-excel'],\n                  })}\n                />\n\n                {isDragActive ? (\n                  <p>Drop the files here ... </p>\n                ) : (\n                    <p>Drag 'n' drop files to apply mapping</p>\n                  )}\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useProject } from '../contexts/app_context';\nimport { exportPythonCode } from '../utils/file_parsing';\n\nexport default function CodeExportModal({ match, history }) {\n  const onClose = () => history.goBack();\n  // const [_, dispatch] = useStateValue();\n  const { projectID } = match.params;\n  const { project, datasets, meta_columns, columns, mappings } = useProject(\n    projectID,\n  );\n\n  const [changeNonMapped, setChangeNonMapped] = useState(false);\n  const [createNewColumns, setCreateNewColumns] = useState(false);\n  const [combineDatasets, setCombineDatasets] = useState(true);\n  const [valueForNonMapped, setValueForNonMapped] = useState('unknown');\n\n  const doExport = () => {\n    const settings = {\n      changeNonMapped,\n      createNewColumns,\n      combineDatasets,\n      valueForNonMapped,\n    };\n\n    exportPythonCode(\n      project,\n      datasets,\n      meta_columns,\n      columns,\n      mappings,\n      settings,\n    );\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: { height: '35%', transform: 'translate(0,40%)' },\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"code-export-modal\">\n        {project && (\n          <React.Fragment>\n            <div>\n              <h1>{project.name}</h1>\n              <p>Export Code</p>\n            </div>\n            <div className='code-export-options'>\n              <span>\n                Change non mapped entries?\n                <input\n                  type=\"checkbox\"\n                  value={changeNonMapped}\n                  onChange={e => setChangeNonMapped(e.target.checked)}\n                />\n              </span>\n              {changeNonMapped && (\n                <span>\n                  Value for non mapped entries?\n                  <input\n                    type=\"text\"\n                    value={valueForNonMapped}\n                    onChange={e => setValueForNonMapped(e.target.value)}\n                  />{' '}\n                </span>\n              )}\n              <span>\n                Create new columns?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={createNewColumns}\n                  onChange={e => setCreateNewColumns(e.target.checked)}\n                />{' '}\n              </span>\n              <span>\n                Combine datasets in to single file?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={combineDatasets}\n                  onChange={e => setCombineDatasets(e.target.checked)}\n                />{' '}\n              </span>\n            </div>\n\n            <div className={'export-instructions'}>\n              <p>\n                Click export to download a zip file with everything you need to\n                apply your mapping.\n              </p>\n              <p>The code will do the following:</p>\n              <ul>\n                <li>\n                  Load the files you worked on from the \"put_your_files_in_here\"\n                  filder\n                </li>\n                <li>\n                  Combine and rename columns from each dataset as you indicated\n                </li>\n                <li>Apply the new taxonomies you produced to those columns</li>\n                <li>Export the results to the \"results\" folder</li>\n              </ul>\n              <p>\n                The script that does all this is called \"process.py\" you can\n                tweak it to suit your needs\n              </p>\n            </div>\n            <div className=\"buttons\">\n              <button onClick={doExport}>Export</button>\n              <button onClick={onClose}>Cancel</button>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </ReactModal>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nexport default function TablePreview(props) {\n  const { data } = props;\n\n  const columns = Object.keys(data[0]).map(k => ({ key: k, name: k }));\n  const [rows, setRows] = useState(data);\n\n  const sortRows = (initalRows, sortColumn, sortDirection) => rows => {\n    const comp = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === 'DESC') {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    return sortDirection === 'NONE' ? initalRows : [...rows].sort(comp);\n  };\n\n  if (data.length === 0) {\n    return <h1> No data to show</h1>;\n  }\n\n  return (\n    <ReactDataGrid\n      columns={columns}\n      rowGetter={i => rows[i]}\n      rowsCount={data.length}\n      onGridSort={(sortColumn, sortDirection) =>\n        setRows(sortRows(data, sortColumn, sortDirection))\n      }\n    />\n  );\n}\n\nTablePreview.defaultProps = {\n  data: [],\n  columns: [],\n};\n","import React from 'react';\nimport TablePreview from '../components/TablePreview';\nimport { useStateValue } from '../contexts/app_context';\n\nexport default function DatasetPage({ match }) {\n  const datasetID = match.params.datasetID;\n\n  const [{ datasets, columns },] = useStateValue();\n  const dataset = datasets.find(d => d.id === datasetID);\n\n  const columnsForDataset = columns.filter(c => c.dataset_id === datasetID);\n  return dataset ? (\n    <React.Fragment>\n      <div className=\"datatable full_card\">\n        <TablePreview data={dataset.sample} columns={columnsForDataset} />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginTop: '20px',\n          }}>\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n      <h2>Could not find dataset</h2>\n    );\n}\n\n","import React from 'react';\n\nexport default function EntryCard({ entry, selected = false, onToggleSelect }) {\n  return (\n    <div\n      className={`entry-card card ${selected ? 'selected' : ''}`}\n      onClick={() => onToggleSelect(entry)}>\n      <h3>{entry.name}</h3>\n      <p>{entry.count} occurrences</p>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\nimport { faSortDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nexport default function OrderBySelector({ onChange }) {\n  const showDropDown = () => {\n    setShowDropdown(true)\n  }\n\n  const selectOption = (option) => {\n    setShowDropdown(false)\n    setSelected(option)\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  const [show, setShowDropdown] = useState(false)\n  const [selected, setSelected] = useState(\"Alphabetically\")\n\n  const options = [\"Alphabetically\", \"Occurances\"]\n\n  return (\n    <div className=\"order-by\">\n      <p>Order By: </p>\n      <ul>\n        <li onClick={showDropDown}>{selected} <FontAwesomeIcon icon={faSortDown} /> </li>\n        {options.filter(o => o !== selected && show).map(o => <li\n          onClick={() => selectOption(o)}\n        >{o}</li>)}\n      </ul>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function EntryPill({entry, onRemove}) {\n  return (\n    <span className=\"entry-pill\">\n      <span>{entry}</span>\n      <FontAwesomeIcon icon={faTimes} onClick={() => onRemove(entry)} />\n    </span>\n  );\n}","import React from 'react'\nimport EntryPill from './EntryPill'\n\nexport default function SelectedEntriesList({ selection, onRemoveSelection, onClearAll }) {\n    return (\n        <div className='selected-entry-list'>\n            {selection.length === 0 ?\n                <span>Click on entries to select them</span>\n                :\n                <span>Selections ({selection.length}):</span>\n            }\n            <ul >\n                {selection.reverse().map(entry => <li><EntryPill onRemove={onRemoveSelection} entry={entry} /> </li>)}\n            </ul>\n            {(selection.length > 0) &&\n                <button className='clear-all text-button' onClick={onClearAll}>Clear All</button>\n            }\n        </div>\n    )\n}\n\nSelectedEntriesList.defaultProps = {\n    selection: []\n}\n\n","import React, { useState } from 'react';\nimport EntryCard from './EntryCard';\nimport OrderBySelector from './OrderBySelector';\nimport { faGlassCheers } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SelectedEntriesList from './SelectedEntriesList'\n\nexport default function EntryTable({\n  entries,\n  style,\n  onToggleSelection,\n  onClearSelection,\n  selection,\n}) {\n  const [order, setOrder] = useState('Occurances');\n\n  const toggleSelection = entry => {\n    if (onToggleSelection) {\n      onToggleSelection(entry);\n    }\n  };\n\n  const orderKey = { Alphabetically: 'name', Occurances: 'count' }[order];\n\n  let orderedEntries = entries.sort((a, b) =>\n    a[orderKey] > b[orderKey] ? 1 : -1,\n  );\n\n  if (orderKey === 'count') {\n    orderedEntries.reverse();\n  }\n\n  return (\n    <div style={style} className=\"entry-table\">\n      <div className=\"entry-table-filters\">\n        <SelectedEntriesList selection={selection} onRemoveSelection={toggleSelection} onClearAll={onClearSelection} />\n        <OrderBySelector onChange={order => setOrder(order)} />\n\n      </div>\n      <div className=\"entry-table-entries\">\n        {orderedEntries.length > 0 ? (\n          orderedEntries.map(entry => (\n            <EntryCard\n              key={entry.name}\n              entry={entry}\n              selected={selection.includes(entry.name)}\n              onToggleSelect={toggleSelection}\n            />\n          ))\n        ) : (\n            <div className=\"all-done\">\n              <h1>You really smooshed that crap out of that column.</h1>\n              <h1>\n                {[...Array(5)].map(() => (\n                  <FontAwesomeIcon icon={faGlassCheers} />\n                ))}\n              </h1>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\nEntryTable.defaultProps = {\n  style: {},\n};\n","import React, {useState,useEffect} from 'react'\n\nimport {faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n\nexport default function EditableText({text, onUpdate}){\n  const [localText, setLocalText] = useState(text)\n  const [editing, setEditing] = useState(false)\n\n  useEffect(()=>{\n     setLocalText(text)\n  },[text])\n\n  return  editing ? \n      <input onChange={(e)=>setLocalText(e.target.value)} onBlur={()=> { setEditing(false); onUpdate(localText)  } } value={localText} /> \n    : \n    \n      <h3>\n          {localText} <FontAwesomeIcon onClick={()=>setEditing(true)} icon={faEdit} />\n      </h3>\n    \n    \n}\n","import React, { useState } from 'react';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport EditableText from './EditableText';\n\nexport default function MappingFocus({\n  mapping,\n  onRemoveEntryFromMapping,\n  onRenameMapping,\n  onClearMapping,\n  onDeleteMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  const [suggestionType, setSuggestionType] = useState('text');\n\n  const removeEntryFromMapping = entry => {\n    if (onRemoveEntryFromMapping) {\n      onRemoveEntryFromMapping(entry, mapping);\n    }\n  };\n\n  const addSuggestionToMapping = entry => {\n    if (onAddSuggestionToMapping) {\n      onAddSuggestionToMapping(entry.suggestion);\n    }\n  };\n\n  const updateMappingName = name => {\n    if (onRenameMapping) {\n      onRenameMapping(mapping, name);\n    }\n  };\n\n  const clearMapping = name => {\n    if (onClearMapping) {\n      onClearMapping(mapping);\n    }\n  };\n\n  const deleteMapping = name => {\n    if (onDeleteMapping) {\n      onDeleteMapping(mapping);\n    }\n  };\n\n  const addNegativeExampleToMapping = (entry) => {\n\n    if (onAddNegativeExampleToMapping) {\n      onAddNegativeExampleToMapping(entry.suggestion)\n    }\n  }\n\n  const suggestionsByType = suggestions[suggestionType];\n\n  return (\n    <div className=\"mapping-focus\" style={style}>\n      <EditableText text={mapping.name} onUpdate={updateMappingName} />\n      <div className=\"include-list\">\n        <h4>Includes</h4>\n        <ul>\n          {mapping.entries.map(entry => (\n            <li>\n              {entry}{' '}\n              <button\n                onClick={() => removeEntryFromMapping(entry)}\n                className={'small-button round-button'}>\n                <FontAwesomeIcon icon={faTimes} />{' '}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"keyword-match\">\n        <h4>\n          Suggestions by:{' '}\n          <span\n            style={\n              suggestionType === 'text'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('text')}>\n            text\n          </span>{' '}\n          /{' '}\n          <span\n            style={\n              suggestionType === 'meaning'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('meaning')}>\n            meaning\n          </span>\n        </h4>\n        <ul>\n          {suggestionsByType.map(entry => (\n            <li>\n              {entry.suggestion}{' '}\n              <div className=\"SuggestionActionButtons\">\n                <button\n                  className={'small-button round-button'}\n                  onClick={() => addSuggestionToMapping(entry)}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </button>\n                <button className={'small-button round-button'}\n                  onClick={() => addNegativeExampleToMapping(entry)}\n                >\n                  <FontAwesomeIcon\n                    icon={faTimes} />\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className={'ActionButtons'}>\n        <button onClick={clearMapping} className={'mid-button'}>\n          Clear Mapping\n        </button>\n        <button onClick={deleteMapping} className={'mid-button'}>\n          Delete Mapping\n        </button>\n      </div>\n    </div>\n  );\n}\n\nMappingFocus.defaultProps = {\n  style: {},\n  meaningSuggestions: [],\n  textSuggestions: [],\n};\n","import React from 'react';\n\nexport default function MappingsMenu({\n  mappings = [],\n  selected,\n  onMappingSelected,\n  style\n}) {\n\n  const mappingSelected = (mapping) => {\n    if (onMappingSelected) {\n      onMappingSelected(mapping)\n    }\n  }\n\n  return (\n    <div class=\"mappings-menu\" style={style}>\n      <h3>\n        Merged Groups <span class=\"Pill\">{mappings.length}</span>{' '}\n      </h3>\n      <ul>\n        {mappings.map(mapping => (\n          <li\n            className={\n              selected && mapping.name === selected.name ? 'selected' : ''\n            }\n            onClick={() => mappingSelected(mapping)}>\n            {mapping.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nMappingsMenu.defaultProps = {\n  mappings: [],\n  style: {},\n};\n","import React from 'react';\nimport MappingFocus from './MappingFocus';\nimport MappingsMenu from './MappingsMenu';\n\nexport default function MappingsArea({\n  mappings,\n  selection,\n  onMappingSelected,\n  onRenameMapping,\n  onRemoveEntryFromMapping,\n  onDeleteMapping,\n  onClearMapping,\n  onAddEntryToMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  return (\n    <div className=\"mappings-area\" style={style}>\n      <MappingsMenu\n        mappings={mappings}\n        selected={selection}\n        onMappingSelected={onMappingSelected}\n      />\n      {selection && (\n        <MappingFocus\n          mapping={selection}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onRenameMapping={onRenameMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          onAddEntryToMapping={onAddEntryToMapping}\n          onAddSuggestionToMapping={onAddSuggestionToMapping}\n          suggestions={suggestions}\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n        />\n      )}\n    </div>\n  );\n}\n\nMappingsArea.defaultProps = {\n  style: {},\n};\n","import * as lev from 'fast-levenshtein';\n\n\nconst cacheSimilarities = {};\n\nexport const suggestForMapping = (mapping, entries) => {\n  const res = [];\n  mapping.forEach(mapping_entry => {\n    entries.forEach(entry => {\n      const cacheKey = [mapping_entry, entry.name].join('_');\n\n      if (!mapping.includes(entry)) {\n        if (cacheSimilarities[cacheKey]) {\n          res.push({\n            suggestion: entry.name,\n            score: cacheSimilarities[cacheKey],\n          });\n        } else {\n          const dist = lev.get(mapping_entry, entry.name);\n          cacheSimilarities[cacheKey] = dist;\n          res.push({ suggestion: entry.name, score: dist });\n        }\n      }\n    });\n  });\n  return res.sort((a, b) => (a.score > b.score ? 1 : -1)).slice(0, 5);\n};\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport EntryTable from '../components/EntryTable';\nimport MappingsArea from '../components/MappingsArea';\nimport useFuse from 'react-use-fuse';\nimport { suggestForMapping } from '../utils/text_clustering';\nimport { most_similar_to_category_mean } from '../utils/calc_embedings';\n\nimport {\n  createMapping,\n  renameMapping,\n  addEntriesToMapping,\n  addNegativeExampleToMapping,\n  removeEntryFromMapping,\n  deleteMapping,\n  clearMapping,\n  requestEmbedingsForEntries,\n} from '../contexts/actions';\nimport { useStateValue, useMetaColumn } from '../contexts/app_context';\n\nexport default function ColumnPage({ match }) {\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [selectedMappingID, setSelectedMappingID] = useState(null);\n  const [entrySelection, setEntrySelection] = useState([]);\n  const { columnID } = match.params;\n\n  const { entries, mappings, embeddings, dispatch } = useMetaColumn(columnID);\n  const selectedMapping = mappings.find(m => m.id === selectedMappingID);\n\n  useEffect(() => {\n    if (entries) {\n      requestEmbedingsForEntries(entries, dispatch);\n    }\n  }, [JSON.stringify(entries)]);\n\n  const non_mapped_entries = entries.filter(\n    entry => !mappings.some(m => m.entries.includes(entry.name)),\n  );\n\n  const { result, search } = useFuse({\n    data: non_mapped_entries,\n    options: {\n      shouldSort: true,\n      findAllMatches: true,\n      keys: ['name'],\n      caseSensitive: false,\n    },\n  });\n\n  const filteredEntries = result;\n\n  const toggleEnrtySelection = entry => {\n    const entryName = typeof entry == 'string' ? entry : entry.name;\n\n    if (entrySelection.includes(entryName)) {\n      setEntrySelection(entrySelection.filter(s => s !== entryName));\n    } else {\n      setEntrySelection([...entrySelection, entryName]);\n    }\n  };\n\n  const onCreateMapping = () => {\n    const id = createMapping(\n      entrySelection,\n      columnID,\n      entrySelection[0],\n      dispatch,\n    );\n    setEntrySelection([]);\n    setSelectedMappingID(id);\n  };\n\n  const onRenameMapping = (mapping, name) => {\n    renameMapping(mapping, name, dispatch);\n  };\n\n  const onRemoveEntryFromMapping = (entry, mapping) => {\n    removeEntryFromMapping(mapping, entry, dispatch);\n  };\n\n  const onClearMapping = mapping => {\n    clearMapping(mapping, dispatch);\n  };\n\n  const onDeleteMapping = mapping => {\n    deleteMapping(mapping, dispatch);\n  };\n\n  const clearSelection = () => {\n    setEntrySelection([]);\n  };\n\n  const onAddEntriesToMapping = (\n    entriesToAdd,\n    shouldClearSelection = false,\n  ) => {\n    addEntriesToMapping(selectedMapping, entriesToAdd, dispatch);\n    if (shouldClearSelection) {\n      clearSelection();\n    }\n  };\n\n  const onAddNegativeExampleToMapping = entry => {\n    addNegativeExampleToMapping(selectedMapping, entry, dispatch);\n  };\n\n  //Remove any entries that are already in a mapping\n\n  const updateSearch = text => {\n    setSearchTerm(text);\n    search(text);\n  };\n\n  const suggestionsAvaliable = embeddings && selectedMapping;\n\n  const meaningSuggestions = suggestionsAvaliable\n    ? most_similar_to_category_mean(\n      selectedMapping.entries,\n      selectedMapping.negative_examples,\n      non_mapped_entries,\n      embeddings,\n    )\n    : [];\n\n  const textSuggestions = suggestionsAvaliable\n    ? suggestForMapping(selectedMapping.entries, non_mapped_entries)\n    : [];\n\n  const suggestions = { text: textSuggestions, meaning: meaningSuggestions };\n\n  const { cache_loaded } = useStateValue();\n\n  const stats = {\n    mappings: mappings.length,\n    total_rows: entries.reduce((total, e) => total + e.count, 0),\n    total_mapped_rows: mappings\n      .map(m =>\n        m.entries.reduce(\n          (total, entry) => total + entries.find(e => e.name === entry).count,\n          0,\n        ),\n      )\n      .reduce((total, map) => total + map, 0),\n    total_entries_in_mappings: mappings.reduce(\n      (total, m) => total + m.entries.length,\n      0,\n    ),\n  };\n\n  if (!cache_loaded) {\n    return (\n      <div className=\"column-page\">\n        <SearchBar\n          style={{ gridArea: 'header', width: '50%', justifySelf: 'center' }}\n          onChange={updateSearch}\n          onClear={() => updateSearch('')}\n          value={searchTerm}\n          prompt=\"Search for entries by typing here...\"\n        />\n        <EntryTable\n          entries={filteredEntries}\n          style={{\n            gridArea: 'table',\n            overflowY: 'hidden',\n            width: '100%',\n            height: '100%',\n          }}\n          onToggleSelection={toggleEnrtySelection}\n          selection={entrySelection}\n          onClearSelection={clearSelection}\n          {...entries}\n        />\n        <div className=\"stats-and-actions\">\n          <div className=\"stats\">\n            <p>\n              <span>{stats.total_entries_in_mappings}</span> /{' '}\n              <span>{entries.length}</span> entries |{' '}\n              <span>{stats.total_mapped_rows}</span> /{' '}\n              <span>{stats.total_rows}</span> rows\n            </p>\n          </div>\n          <div className=\"entry-action-buttons\">\n            <button\n              disabled={entrySelection.length === 0}\n              onClick={onCreateMapping}>\n              New Mapping {entrySelection.length}\n            </button>\n            <button\n              disabled={!(entrySelection.length > 0 && selectedMappingID)}\n              onClick={() => onAddEntriesToMapping(entrySelection, true)}>\n              Add to Mapping\n            </button>\n            <button\n              onClick={() =>\n                createMapping(non_mapped_entries, columnID, 'Other', dispatch)\n              }>\n              Map Remaining To Other\n            </button>\n          </div>\n        </div>\n        <MappingsArea\n          mappings={mappings}\n          selection={mappings.find(m => m.id === selectedMappingID)}\n          style={{ gridArea: 'mappings' }}\n          onMappingSelected={s => setSelectedMappingID(s.id)}\n          onRenameMapping={onRenameMapping}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          suggestions={suggestions}\n          onAddSuggestionToMapping={suggestion =>\n            onAddEntriesToMapping([suggestion])\n          }\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n          {...mappings}\n          syle={{ height: '300px' }}\n        />\n      </div>\n    );\n  } else {\n    return <h1>Loading</h1>;\n  }\n}\n","import React from 'react';\nimport {\n  faColumns,\n  faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectCard({ project, stats }) {\n  return (\n    <div className=\"project-card card\">\n      <h2 className=\"title\">{project.name}</h2>\n      <p className=\"description\">{project.description}</p>\n      <div className=\"project-card-stats\">\n        <span>\n          {stats.columns} <FontAwesomeIcon icon={faColumns} />\n        </span>\n        <span>\n          {stats.datasets} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n        <span>\n          {stats.meta_columns} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport const EmptyProjectCard = ({ prompt, icon }) => (\n  <div className=\"project-card card new-project-card\">\n    <h2 className=\"title\">{prompt}</h2>\n    <FontAwesomeIcon icon={icon} size={'3x'} />\n  </div>\n);\n","import React from 'react';\nimport ProjectCard, { EmptyProjectCard } from '../components/ProjectCard';\nimport { useProjectStats, useStorage } from '../contexts/app_context';\nimport { Link } from 'react-router-dom';\n\nimport { faPlus, faUpload } from '@fortawesome/free-solid-svg-icons';\n\nexport default function WelcomePage() {\n  const projects = useProjectStats();\n  const { quota, usage } = useStorage();\n\n  return (\n    <div className=\"welcome-page page\">\n      <header className=\"welcome-page-header\">\n        <h1 className=\"large-title-header\">smooshr</h1>\n        <p>Wrangle those messy datasets</p>\n        <p className=\"feedback\">\n          We need your help to make smooshr better! Try out our{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://docs.google.com/document/d/1ANrFqNZKCYR4LogOKPvYVHZAbp1iiK3gpknPlNZF6Lw/\">\n            tutorial\n          </a>{' '}\n          and leave your thoughts on our{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n            feedback form\n          </a>\n        </p>\n      </header>\n      {projects && (\n        <div className=\"projects-area\">\n          <div className=\"\">\n            <div className=\"region-header\">\n              <h2>local projects</h2>\n            </div>\n            <div className=\"region-list\">\n              {projects.map(p => (\n                <Link to={`/project/${p.project.id}`}>\n                  <ProjectCard project={p.project} stats={p.stats} />\n                </Link>\n              ))}\n              <Link to={'/new_project'}>\n                <EmptyProjectCard prompt={'New Project'} icon={faPlus} />\n              </Link>\n              <Link to={'/load_project'}>\n                <EmptyProjectCard prompt={'Load Project'} icon={faUpload} />\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"storage\">\n        <p>smooshr processes and stores all data locally on your machine.</p>\n        {quota && (\n          <p>\n            It is currently using {usage.toLocaleString()} Mb of{' '}\n            {quota.toLocaleString()} Mb.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditableText from './EditableText';\nimport { Link } from 'react-router-dom';\n\nexport default function ColumnCard({\n  name,\n  description,\n  fromColumns,\n  selected,\n  onClick,\n  onUpdate,\n  onUnmerge,\n  link,\n}) {\n  const total_unique = fromColumns.reduce((tot, c) => tot + c.unique, 0);\n  return (\n    <div\n      onClick={onClick}\n      className={`column-card card ${selected ? 'selected' : ''}`}>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}>\n        <EditableText text={name} onUpdate={onUpdate} />\n        <h2>{total_unique}</h2>\n      </div>\n      <p className=\"description\">{description}</p>\n\n      {fromColumns.map(c => (\n        <p>\n          {c.name} | {c.dataset.name}\n        </p>\n      ))}\n      <div className=\"column-action-buttons\">\n        {fromColumns.length > 1 && (\n          <button onClick={onUnmerge}>Split Column</button>\n        )}\n        <Link className=\"work-on-taxonomy-button\" to={link}>\n          <button>Work on taxonomy</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useStateValue, useProject } from '../contexts/app_context';\nimport { Link } from 'react-router-dom';\nimport ColumnCard from '../components/ColumnCard';\nimport TablePreview from '../components/TablePreview';\nimport {\n  mergeMetaColumns,\n  updateMetaColumn,\n  unMergeMetaColumn,\n} from '../contexts/actions';\nimport {\n  saveProject,\n} from '../utils/file_parsing';\n\nimport {\n  faColumns,\n  faDatabase,\n  faFistRaised,\n  faInfoCircle,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function ProjectPage(props) {\n  const { match, history } = props;\n  const { projectID } = match.params;\n  const {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n    deleteProject,\n  } = useProject(projectID);\n\n  const [selectedDatasetName, setSelectedDatasetName] = useState(\n    datasets && datasets.length > 0 ? datasets[0].name : null,\n  );\n\n  // Used to set the selected dataset to the first one on inital load\n  useEffect(() => {\n    if (datasets.length > 0 && !selectedDatasetName) {\n      setSelectedDatasetName(datasets[0].name);\n    }\n  }, [datasets, selectedDatasetName]);\n\n  const selectedDataset = datasets.find(d => d.name === selectedDatasetName);\n\n  const [, dispatch] = useStateValue();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n\n  const onSaveProject = () => {\n    saveProject(\n      project,\n      datasets,\n      meta_columns,\n      columns,\n      mappings,\n      entries,\n      {},\n    );\n  };\n\n  const changeMCName = (mc, name) => {\n    updateMetaColumn(mc.id, { name }, dispatch);\n  };\n  const deleteThisProject = () => {\n    deleteProject();\n    history.push('/');\n  };\n\n  const toggleSelectedColumn = id => {\n    if (selectedColumns.includes(id)) {\n      setSelectedColumns(selectedColumns.filter(cid => cid !== id));\n    } else {\n      setSelectedColumns([...selectedColumns, id]);\n    }\n  };\n\n  const seperateMetaDataColumn = id => {\n    unMergeMetaColumn(meta_columns.find(mc => mc.id === id), dispatch);\n  };\n\n  const dereferenceColumn = colID => {\n    const column = columns.find(c => c.id === colID);\n    return {\n      dataset: datasets.find(d => d.id === column.dataset_id),\n      name: column.name,\n      id: column.id,\n      unique: column.unique,\n    };\n  };\n\n  const mergeColumns = () => {\n    const toMerge = meta_columns.filter(mc => selectedColumns.includes(mc.id));\n    mergeMetaColumns(toMerge, dispatch);\n    setSelectedColumns([]);\n  };\n\n  return (\n    <div className=\"dataset-page page\">\n      {project ? (\n        <React.Fragment>\n          <p>{project.description}</p>\n\n          <div className=\"metadata region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faInfoCircle}\n                  style={{ marginRight: '20px' }}\n                />\n                Metadata\n              </h2>\n              <div className=\"metadata\"></div>\n            </div>\n          </div>\n\n          <div className=\"columns region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faColumns}\n                  style={{ marginRight: '20px' }}\n                />\n                Columns\n              </h2>\n              {selectedColumns.length > 0 ? (\n                <button\n                  onClick={\n                    mergeColumns\n                  }>{`Merge ${selectedColumns.length} columns`}</button>\n              ) : (\n                  ''\n                )}\n            </div>\n            <div className=\"region-list column-list\">\n              {meta_columns.map(mc => (\n                <ColumnCard\n                  name={mc.name}\n                  description={mc.description}\n                  fromColumns={mc.columns.map(dereferenceColumn)}\n                  selected={selectedColumns.includes(mc.id)}\n                  onClick={() => toggleSelectedColumn(mc.id)}\n                  onUpdate={newName => changeMCName(mc, newName)}\n                  onUnmerge={() => seperateMetaDataColumn(mc.id)}\n                  link={`/project/${project.id}/column/${mc.id}`}\n                />\n              ))}\n            </div>\n          </div>\n\n          <div className=\"datasets region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faDatabase}\n                  style={{ marginRight: '20px' }}\n                />\n                Datasets\n              </h2>\n            </div>\n            <div className=\"dataset-tabs\">\n              {datasets.map(dataset => (\n                <p\n                  className={\n                    selectedDatasetName === dataset.name\n                      ? 'selected-dataset dataset-tab'\n                      : 'dataset-tab'\n                  }\n                  onClick={() => setSelectedDatasetName(dataset.name)}>\n                  {dataset.name}\n                </p>\n              ))}\n              <p className=\"final-dataset dataset-tab\">Final Dataset Preview</p>\n              <div class=\"spacer\" />\n              <Link\n                to={`/project/${projectID}/add_datasets`}\n                className=\"add-dataset dataset-tab\">\n                <FontAwesomeIcon icon={faPlus} />\n                <span>Add Dataset</span>\n              </Link>\n            </div>\n\n            {datasets.length > 0 && selectedDataset && (\n              <TablePreview\n                data={selectedDataset.sample}\n                columns={selectedDataset.columns}\n              />\n            )}\n          </div>\n\n          <div className=\"actions region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faFistRaised}\n                  style={{ marginRight: '20px' }}\n                />\n                Actions\n              </h2>\n            </div>\n            <div className=\"region-list action-list\">\n              <button onClick={onSaveProject}>Export Project</button>\n              <Link to={`/project/${projectID}/export`}>\n                <button>Export Python code</button>\n              </Link>\n              <button onClick={deleteThisProject}>Delete Project</button>\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n          <h1>Project not found</h1>\n        )}\n    </div>\n  );\n}\n","import React from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer';\nimport UploadModal from './components/UploadModal';\nimport ProjectModal from './components/ProjectModal';\nimport LoadProjectModal from './components/LoadProjectModal';\nimport GHPagesRedirect from './components/GHPagesRedirect';\nimport ShowApplyMappingsModal from './components/ApplyMappingsModal';\nimport CodeExportModal from './components/CodeExportModal';\nimport DatasetPage from './pages/DatasetPage';\nimport ColumnPage from './pages/ColumnPage';\nimport WelcomePage from './pages/WelcomePage';\nimport ProjectPage from './pages/ProjectPage';\nimport 'typeface-lato';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.scss';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <GHPagesRedirect />\n      <div className=\"App\">\n        <div className=\"main\">\n          <Route\n            path=\"/project/:projectID/dataset/:datasetID\"\n            exact={true}\n            component={DatasetPage}\n          />\n          <Route\n            path=\"/project/:projectID/column/:columnID\"\n            exact={true}\n            component={ColumnPage}\n          />\n          <Route\n            path=\"/project/:projectID\"\n            exact={true}\n            component={ProjectPage}\n          />\n          <Route path=\"/\" exact={true} component={WelcomePage} />\n        </div>\n        <Footer />\n\n        <Route path=\"/\" component={Header} />\n\n        <Route path=\"/new_project\" component={ProjectModal} />\n        <Route path=\"/load_project\" component={LoadProjectModal} />\n\n        <Route path=\"/project/:projectID/export\" component={CodeExportModal} />\n        <Route\n          path=\"/project/:projectID/add_datasets\"\n          component={UploadModal}\n        />\n\n        <Route\n          path=\"/dataset/:datasetID/apply\"\n          component={ShowApplyMappingsModal}\n        />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './contexts/app_context'\n\nReactDOM.render(\n<StateProvider>\n  <App />\n</StateProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
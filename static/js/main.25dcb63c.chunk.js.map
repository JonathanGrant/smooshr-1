{"version":3,"sources":["logo.svg","utils/calc_embedings.js","contexts/actions.js","contexts/app_context.js","components/SideBar.js","components/TwoSigmaLogo.js","components/Footer.js","utils/file_parsing.js","utils/python_file.js","components/ProgressBar.js","components/FileSnapshot.js","components/Tabs.js","components/SearchBar.js","components/OpenDataSearcher.js","components/FileLoader.js","components/UploadModal.js","components/ProjectModal.js","components/LoadProjectModal.js","components/ApplyMapping.js","components/ApplyMappingsModal.js","components/CodeExportModal.js","utils/text_clustering.js","components/AutoClusterModal.js","components/TablePreview.js","pages/DatasetPage.js","components/EntryCard.js","components/OrderBySelector.js","components/EntryPill.js","components/SelectedEntriesList.js","components/EntryTable.js","components/EditableText.js","components/MappingFocus.js","components/MappingsMenu.js","components/MappingsArea.js","pages/ColumnPage.js","components/ProjectCard.js","pages/WelcomePage.js","components/ColumnCard.js","pages/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","norm_vec","vec","mag","Math","sqrt","reduce","v","vec_mag","map","most_similar_to_category_mean","entries","negativeEntries","search_entries","embeddings","mean","entry_embeddings","entry","find","emb","filter","a","embed","negative_embeddings","total_vec","concat","total","weight","length","i","category_mean","v1","v2","embeding","e","name","dist","index","suggestion","console","log","includes","sort","b","slice","combined_word_embedings_for_entry","word_embedings","norm","arguments","undefined","split","full_embed","word","word_embed","we","key","toLocaleLowerCase","rep","embedding","calc_embedings","unique_words","Set","forEach","add","Promise","all","Array","from","fetch","process","toLowerCase","replace","then","r","json","get_embedings_from_server","uuidv1","require","createMapping","selection","columnID","dispatch","id","type","payload","negative_examples","column_id","StateContext","createContext","db","Dexie","version","stores","state","initalState","datasets","columns","projects","mappings","metaColumns","showUploadModal","showApplyMappingsModal","cache_loaded","storage_stats","persisting","add_or_replace","candidate","collection","id_col","item","Object","toConsumableArray","reducer","action","_objectSpread","d","c","col_id","description","project_id","m","mc","mapping","meta_columns","meta_column","useStateValue","useContext","useProject","projectID","_useStateValue","_useStateValue2","slicedToArray","project","meta_column_ids","colIDs","ids","column_ids","deleteProject","useColumn","_useStateValue3","_useStateValue4","column","entry_names","useMetaColumn","_useStateValue5","_useStateValue6","embeggins","mergedEntry","ec","count","useProjectStats","_useStateValue7","_useStateValue8","stats","project_datasets","project_columns","project_meta_columns","useStorage","_useStateValue9","_useStateValue10","_useStateValue10$","quota","usage","useDataset","datasetID","_useStateValue11","_useStateValue12","dataset","dataset_id","columnIDs","SideBar","_ref","history","match","react_default","createElement","className","react_router_dom","style","display","alignItems","to","src","target","href","TwoSigmaLogo","width","height","viewBox","xmlns","fill","fill-rule","transform","Footer","react_fontawesome_index_es","icon","faTwitter","faMedium","faGithub","exportPythonCode","settings","createJSONMapping","output_file","recipe_name","slugify","output_data_name","recipy","python_code","zip","JSZip","folder","file","JSON","stringify","generateAsync","content","saveAs","saveProject","projectJSON","output_name","blob","Blob","make_col_mappings","col_renames","cID","rc","datasetsJSON","ref","rows","column_renames","mappingsJSON","applicableMappings","ProgressBar","value","toPrecision","FileSnapshot","onAddDataset","_useState","useState","_useState2","setColumns","_useState3","_useState4","setDataset","_useState5","_useState6","setEntries","_useState7","_useState8","includedCols","setIncludedCols","_useState9","_useState10","progress","setProgress","_useState11","_useState12","status","setStatus","displayEntries","useMemo","res","col","col_entries","extra","useEffect","onProgress","report_progress_every","sample_rows","max_unique","resolve","reject","no_rows","set_dict","sample","exceded","columnCounts","fileSize","size","Papa","parse","worker","header","download","step","row","push","data","meta","fields","f","rows_read","bytes_read","cursor","total_size","val","error","complete","keys","field","unique","_ref2","row_count","parse_file_for_preview","result","Fragment","toLocaleString","class","checked","onChange","join","onClick","cols","FileSnapshot_objectSpread","focusCol","ents","Tabs","options","selected","onSelected","option","SearchBar","prompt","faSearch","placeholder","faTimes","OpneDataSearcher","onDataset","searchTerm","setSearchTerm","searchResults","setSearchResults","domain","results","catch","err","marginBottom","text","resource","permalink","faExternalLinkAlt","onSelect","faDownload","FileLoader","props","filesPreview","setFilesPreview","setError","url","setURL","columnSelections","setColumnSelections","onClose","selectedTab","setSelectedTab","submitFromURL","submitFromOpenData","onDrop","useCallback","files","every","FileLoader_objectSpread","defineProperty","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","classname","tab","faFile","accept","disabled","tabContent","defaultProps","UploadModal","params","goBack","lib_default","overlay","backgroundColor","isOpen","onRequestClose","newDataset","UploadModal_objectSpread","ProjectModal","setName","setDescription","setProject","reader","FileReader","readAsText","onload","flexDirection","faDatabase","marginRight","faColumns","projectDetails","loadProject","ApplyMapping","addColumns","setAddColumns","fileStream","streamSaver","createWriteStream","Response","body","pipeTo","ApplyMappingsModal","setFiles","_useDataset","CodeExportModal","_useProject","changeNonMapped","createNewColumns","combineDatasets","valueForNonMapped","cacheSimilarities","suggestForMapping","mapping_entry","cacheKey","score","lev","calcEmbedingClusters","embedings","noClusters","coords","KMeans","text_clustering_objectSpread","cluster","clusters","AutoClusterModal","setClusters","setNoClusters","_useColumn","react_range_lib","max","min","values","renderTrack","children","assign","AutoClusterModal_objectSpread","renderThumb","_ref3","_","embeds","TablePreview","k","setRows","react_data_grid_default","rowGetter","rowsCount","onGridSort","sortColumn","sortDirection","initalRows","sortRows","DatasetPage","_useStateValue2$","columnsForDataset","justifyContent","marginTop","EntryCard","_ref$selected","onToggleSelect","OrderBySelector","show","setShowDropdown","setSelected","faSortDown","o","EntryPill","onRemove","SelectedEntriesList","onRemoveSelection","onClearAll","reverse","EntryTable","onToggleSelection","onClearSelection","order","setOrder","toggleSelection","orderKey","Alphabetically","Occurances","orderedEntries","faGlassCheers","EditableText","onUpdate","localText","setLocalText","editing","setEditing","onBlur","faEdit","MappingFocus","onRemoveEntryFromMapping","onRenameMapping","onClearMapping","onDeleteMapping","onAddSuggestionToMapping","onAddNegativeExampleToMapping","suggestions","suggestionType","setSuggestionType","suggestionsByType","removeEntryFromMapping","fontWeight","addSuggestionToMapping","faCheck","addNegativeExampleToMapping","MappingsMenu","_ref$mappings","onMappingSelected","mappingSelected","MappingsArea","onAddEntryToMapping","meaningSuggestions","textSuggestions","ColumnPage","selectedMappingID","setSelectedMappingID","entrySelection","setEntrySelection","_useMetaColumn","selectedMapping","requestEmbedingsForEntries","non_mapped_entries","some","_useFuse","useFuse","shouldSort","findAllMatches","caseSensitive","search","filteredEntries","term","reset","clearSelection","onAddEntriesToMapping","entriesToAdd","shouldClearSelection","addEntriesToMapping","updateSearch","suggestionsAvaliable","meaning","total_rows","total_mapped_rows","total_entries_in_mappings","gridArea","justifySelf","onClear","overflowY","entryName","s","newName","renameMapping","deleteMapping","clearMapping","syle","ProjectCard","EmptyProjectCard","WelcomePage","_useStorage","ProjectCard_EmptyProjectCard","faPlus","faUpload","ColumnCard","fromColumns","onUnmerge","link","total_unique","tot","ProjectPage","selectedDatasetName","setSelectedDatasetName","selectedDataset","objectDestructuringEmpty","selectedColumns","setSelectedColumns","seperateMetaDataColumn","unMergeMetaColumn","dereferenceColumn","colID","faInfoCircle","new_col","mergeMetaColumns","cid","changes","updateMetaColumn","changeMCName","faFistRaised","App","basename","react_router","path","exact","component","LoadProjectModal","ShowApplyMappingsModal","Boolean","window","location","hostname","ReactDOM","render","_useReducer","useReducer","_useReducer2","put","navigator","storage","estimate","estimation","persist","persistResult","get","cachedState","Provider","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25dcb63c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as tsne from '@tensorflow/tfjs-tsne';\nimport * as tf from '@tensorflow/tfjs-core';\n\nconst get_embedings_from_server = entries => {\n  let unique_words = new Set();\n  entries.forEach(entry => {\n    entry.name.split(' ').forEach(word => {\n      unique_words.add(word);\n    });\n  });\n\n  return Promise.all(\n    Array.from(unique_words).map(entry =>\n      fetch(\n        `${process.env.REACT_APP_API_URL}/embedding/${entry\n          .toLowerCase()\n          .replace(/[\\W_]+/g, '')}`,\n      )\n        .then(r => r.json())\n        .then(r => r[0]),\n    ),\n  );\n};\n\nconst vec_mag = vec => Math.sqrt(vec.reduce((mag, v) => mag + v * v, 0));\n\nconst norm_vec = vec => {\n  const mag = vec_mag(vec);\n  return vec.map(v => v / mag);\n};\n\nconst category_mean = (entries, negativeEntries, embeddings) => {\n  const entry_embeddings = entries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, 1]);\n\n  const negative_embeddings = negativeEntries\n    .map(entry => embeddings.find(emb => entry === emb.entry))\n    .filter(a => a)\n    .map(embed => [embed.embed, -1]);\n\n  const all_entry_contributions = entry_embeddings.concat(negative_embeddings);\n\n  const total_vec = all_entry_contributions.reduce((total, embed) => {\n    const weight = embed[1];\n    const vec = embed[0].map(v => v * weight);\n\n    if (total.length == 0) {\n      total = vec;\n    } else {\n      total = vec.map((v, i) => v + total[i]);\n    }\n    return total;\n  }, []);\n\n  return norm_vec(total_vec);\n};\n\nconst vec_dist2 = (v1, v2) =>\n  v1.reduce((total, v, index) => total + (v - v2[index]) * (v - v2[index]), 0);\n\nexport const most_similar_to_category_mean = (\n  entries,\n  negativeEntries,\n  search_entries,\n  embeddings,\n) => {\n  const mean = category_mean(entries, negativeEntries, embeddings);\n\n  const distances = search_entries.map(entry => {\n\n    const embeding = embeddings.find(e => e.entry == entry.name);\n    if (embeding) {\n      const dist = vec_dist2(norm_vec(embeding.embed), mean);\n      return { suggestion: entry.name, dist: dist };\n    }\n    else {\n      console.log('failed to find ', entry)\n      return { suggestion: entry.name, dist: 2000000 }\n    }\n  });\n  return distances\n    .filter(a => a.dist > 0)\n    .filter(a => !entries.includes(a.suggestion))\n    .filter(a => !negativeEntries.includes(a.suggestion))\n    .sort((a, b) => (a.dist > b.dist ? 1 : -1))\n    .slice(0, 8);\n};\n\nconst combined_word_embedings_for_entry = (\n  entry,\n  word_embedings,\n  norm = false,\n) =>\n  entry.name.split(' ').reduce((full_embed, word) => {\n    const word_embed = word_embedings\n      .filter(embed => embed)\n      .find(we => we.key == word.toLocaleLowerCase());\n\n    console.log('word emebed is ', word_embed);\n    if (word_embed) {\n      let rep = word_embed.embedding;\n      if (norm) {\n        rep = norm_vec(rep);\n      }\n\n      if (full_embed.length == 0) {\n        full_embed = rep;\n      } else {\n        full_embed = full_embed.map((v, i) => v + rep[i]);\n      }\n    }\n    return full_embed;\n  }, []);\n\nexport const calc_embedings = entries =>\n  get_embedings_from_server(entries).then(word_embedings =>\n    entries.map(entry => ({\n      entry: entry.name,\n      embed: combined_word_embedings_for_entry(entry, word_embedings),\n    })),\n  );\n\nexport const tsne_coords = words => {\n  const coords = words.map(w => w.rep).filter(w => w);\n  console.log('coords ', coords, coords.length, coords[0].length);\n  const tsneOpt = tsne.tsne(tf.tensor(coords));\n  return tsneOpt.compute().then(() => {\n    const coordinates = tsneOpt.coordinates();\n    coordinates.print();\n    return coordinates;\n  });\n};\n","import {calc_embedings} from '../utils/calc_embedings';\nconst uuidv1 = require('uuid/v1');\n\nexport function createMapping(selection, columnID, name, dispatch) {\n  const id = uuidv1();\n  dispatch({\n    type: 'ADD_MAPPING',\n    payload: {\n      name: name,\n      entries: selection,\n      negative_examples: [],\n      column_id: columnID,\n      id,\n    },\n  });\n  return id;\n}\n\nexport function renameMapping(mapping, newName, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      mapping: {\n        name: newName,\n      },\n      id: mapping.id,\n    },\n  });\n}\n\nexport function loadProject(projectDetails, dispatch) {\n  const {\n    project,\n    datasets,\n    entries,\n    columns,\n    mappings,\n    meta_columns,\n    settings,\n  } = projectDetails;\n\n  dispatch({\n    type: 'ADD_OR_REPLACE_PROJECT',\n    payload: project,\n  });\n\n  datasets.forEach(dataset => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_DATASET',\n      payload: dataset,\n    });\n  });\n\n  columns.forEach(column => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_COLUMN',\n      payload: column,\n    });\n  });\n\n  mappings.forEach(mapping => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_MAPPING',\n      payload: mapping,\n    });\n  });\n\n  meta_columns.forEach(mc => {\n    dispatch({\n      type: 'ADD_OR_REPLACE_METACOLUMN',\n      payload: mc,\n    });\n  });\n\n  entries.forEach(entry => {\n    console.log('entry ', entry);\n    dispatch({\n      type: 'ADD_OR_REPLACE_ENTRY',\n      payload: entry,\n    });\n  });\n}\n\nexport function removeEntryFromMapping(mapping, entry, dispatch) {\n  console.log('mapping ', mapping, ' entry ', entry);\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: mapping.entries.filter(e => e !== entry),\n      },\n    },\n  });\n}\n\nexport function deleteMapping(mapping, dispatch) {\n  dispatch({\n    type: 'REMOVE_MAPPING',\n    payload: mapping.id,\n  });\n}\n\nexport function clearMapping(mapping, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [],\n      },\n    },\n  });\n}\n\nexport function requestEmbedingsForEntries(entries, dispatch) {\n  calc_embedings(entries).then(embeddings => {\n    dispatch({\n      type: 'ADD_EMBEDINGS',\n      payload: embeddings,\n    });\n  });\n}\n\nexport function addNegativeExampleToMapping(mapping, entry, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        negative_examples: [...mapping.negative_examples, entry],\n      },\n    },\n  });\n}\nexport function addEntriesToMapping(mapping, entries, dispatch) {\n  dispatch({\n    type: 'UPDATE_MAPPING',\n    payload: {\n      id: mapping.id,\n      mapping: {\n        entries: [...mapping.entries, ...entries],\n      },\n    },\n  });\n}\n\nexport function updateMetaColumn(id, changes, dispatch) {\n  dispatch({\n    type: 'UPDATE_META_COLUMN',\n    payload: {\n      id,\n      meta_column: changes,\n    },\n  });\n}\n\nexport function unMergeMetaColumn(meta_column, dispatch) {\n  meta_column.columns.forEach(col_id => {\n    dispatch({\n      type: 'CREATE_META_COLUMN_FROM_COL_ID',\n      payload: {\n        col_id,\n        id: uuidv1(),\n        project_id: meta_column.project_id,\n      },\n    });\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: [meta_column.id],\n  });\n\n  dispatch({\n    type: 'REMOVE_MAPPINGS_FOR_METACOLUMN',\n    payload: meta_column.id,\n  });\n}\n\nexport function mergeMetaColumns(meta_columns, dispatch) {\n  const new_col = meta_columns[0];\n  const ids = meta_columns.map(mc => mc.id);\n\n  const toDelete = [];\n  meta_columns.slice(1).forEach(mc => {\n    new_col.columns = [...new_col.columns, ...mc.columns];\n  });\n\n  dispatch({\n    type: 'REMOVE_META_COLUMNS',\n    payload: ids,\n  });\n\n  dispatch({\n    type: 'ADD_META_COLUMNS',\n    payload: [new_col],\n  });\n}\n","import React, {createContext, useContext, useReducer, useEffect} from 'react';\nimport {deleteProject} from './actions';\nimport Dexie from 'dexie';\n\nconst uuidv1 = require('uuid/v1');\n\nexport const StateContext = createContext();\n\nconst db = new Dexie('state');\n\ndb.version(1).stores({\n  state: 'id',\n});\n\nconst initalState = {\n  datasets: [],\n  columns: [],\n  entries: [],\n  projects: [],\n  mappings: [],\n  embeddings: [],\n  metaColumns: [],\n  showUploadModal: false,\n  showApplyMappingsModal: false,\n  cache_loaded: false,\n  storage_stats: null,\n  persisting: false,\n};\n\nconst add_or_replace = (candidate, collection, id_col = 'id') => {\n  console.log('id col before default is ', id_col);\n  console.log('loading ', candidate, ' with id col ', id_col);\n  if (collection.find(item => item[id_col] === candidate[id_col])) {\n    return collection.map(item =>\n      item[id_col] === candidate[id_col] ? candidate : item,\n    );\n  } else {\n    return [...collection, candidate];\n  }\n};\n\nconst reducer = (state, action) => {\n  console.log('DISPATCHING ', action.type);\n  const {type, payload} = action;\n  switch (type) {\n    case 'LOAD_CACHED_STATE':\n      return payload;\n\n    case 'ADD_DATASETS':\n      return {...state, datasets: [...state.datasets, ...payload]};\n\n    case 'ADD_OR_REPLACE_DATASET':\n      return {\n        ...state,\n        datasets: add_or_replace(payload, state.datasets),\n      };\n    case 'ADD_OR_REPLACE_ENTRY':\n      return {\n        ...state,\n        entries: add_or_replace(payload, state.entries, 'name'),\n      };\n    case 'ADD_OR_REPLACE_MAPPING':\n      return {\n        ...state,\n        mappings: add_or_replace(payload, state.mappings),\n      };\n    case 'ADD_OR_REPLACE_METACOLUMN':\n      return {\n        ...state,\n        metaColumns: add_or_replace(payload, state.metaColumns),\n      };\n    case 'ADD_OR_REPLACE_PROJECT':\n      return {\n        ...state,\n        projects: add_or_replace(payload, state.projects),\n      };\n    case 'ADD_OR_REPLACE_COLUMN':\n      return {\n        ...state,\n        columns: add_or_replace(payload, state.columns),\n      };\n    case 'REMOVE DATASET':\n      return {\n        ...state,\n        datasets: state.datasets.filter(d => d.id !== payload),\n      };\n\n    case 'ADD_EMBEDINGS':\n      return {\n        ...state,\n        embeddings: payload,\n      };\n    case 'ADD_COLUMNS':\n      return {...state, columns: [...state.columns, ...payload]};\n\n    case 'REMOVE_COLUMN':\n      return {\n        ...state,\n        columns: state.datasets.filter(c => c.id !== payload),\n      };\n\n    case 'ADD_ENTRIES':\n      return {...state, entries: [...state.entries, ...payload]};\n\n    case 'REMOVE ENTRY':\n      return {\n        ...state,\n        entries: state.entries.filter(e => e.id !== payload),\n      };\n\n    case 'CREATE_META_COLUMN_FROM_COL_ID':\n      return {\n        ...state,\n        metaColumns: [\n          ...state.metaColumns,\n          {\n            id: payload.id,\n            name: state.columns.find(c => c.id === payload.col_id).name,\n            description: state.columns.find(c => c.id === payload.col_id)\n              .description,\n            project_id: payload.project_id,\n            columns: [payload.col_id],\n          },\n        ],\n      };\n\n    case 'REMOVE_MAPPINGS_FOR_METACOLUMN':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.column_id !== payload),\n      };\n\n    case 'REMOVE_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: state.metaColumns.filter(mc => !payload.includes(mc.id)),\n      };\n    case 'ADD_META_COLUMNS':\n      return {\n        ...state,\n        metaColumns: [...state.metaColumns, ...payload],\n      };\n\n    case 'ADD_MAPPINGS':\n      return {...state, mappings: [...state.mappings, ...payload]};\n\n    case 'REMOVE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.filter(m => m.id !== payload),\n      };\n\n    case 'ADD_MAPPINGS':\n      return {\n        ...state,\n        mappings: [...state.mappings, ...payload],\n      };\n    case 'ADD_MAPPING':\n      return {\n        ...state,\n        mappings: [...state.mappings, payload],\n      };\n\n    case 'ADD_PROJECT':\n      return {\n        ...state,\n        projects: [...state.projects, {id: uuidv1(), ...payload}],\n      };\n\n    case 'REMOVE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.filter(p => p.id !== payload),\n      };\n\n    case 'UPDATE_PROJECT':\n      return {\n        ...state,\n        projects: state.projects.map(p =>\n          p.id == payload.id ? {...p, ...payload} : p,\n        ),\n      };\n\n    case 'ADD ENTRY TO MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id\n            ? {...m, entries: [...m.entries, payload.entry]}\n            : m,\n        ),\n      };\n    case 'UPDATE_MAPPING':\n      return {\n        ...state,\n        mappings: state.mappings.map(m =>\n          m.id === payload.id ? {...m, ...payload.mapping} : m,\n        ),\n      };\n    case 'REMOVE_ENTRIES_FOR_COLUMN':\n      return {\n        ...state,\n        entries: state.entries.filter(entry => entry.columnID === payload),\n      };\n\n    case 'REMOVE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.filter(mc => mc.id !== payload),\n      };\n\n    case 'UPDATE_META_COLUMN':\n      return {\n        ...state,\n        meta_columns: state.metaColumns.map(mc =>\n          mc.id === payload.id ? {...mc, ...payload.meta_column} : mc,\n        ),\n      };\n\n    case 'SET_PERSISTING':\n      return {\n        ...state,\n        persisting: payload,\n      };\n    case 'UPDATE_STORAGE_QUOTA':\n      return {\n        ...state,\n        storage_stats: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const {\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n  } = state;\n\n  useEffect(() => {\n    if (state.cache_loaded) {\n      db.state.put({data: JSON.stringify(state), id: 1});\n      // localStorage.setItem('state', JSON.stringify(state));\n      if (navigator.storage && navigator.storage.estimate) {\n        navigator.storage.estimate().then(estimation => {\n          const {quota, usage} = estimation;\n          dispatch({\n            type: 'UPDATE_STORAGE_QUOTA',\n            payload: {quota, usage},\n          });\n        });\n      } else {\n        console.error('StorageManager not found');\n      }\n    }\n  }, [\n    datasets,\n    columns,\n    entries,\n    projects,\n    mappings,\n    metaColumns,\n    showUploadModal,\n    showApplyMappingsModal,\n  ]);\n\n  useEffect(() => {\n    if (navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(persistResult => {\n        dispatch({\n          type: 'SET_PERSISTING',\n          payload: persistResult,\n        });\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('State update ', state);\n  }, [state]);\n\n  useEffect(() => {\n    db.state.get(1).then(result => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        console.log('ATTEMPTING TO HYDRATE STATE', cachedState);\n\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: {...initalState, ...cachedState, cache_loaded: true},\n        });\n      } else {\n        dispatch({\n          type: 'LOAD_CACHED_STATE',\n          payload: {...initalState, cache_loaded: true},\n        });\n      }\n    });\n  }, []);\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n\nexport const useProject = projectID => {\n  const [state, dispatch] = useStateValue();\n  const project = state.projects.find(p => p.id === projectID);\n  const datasets = state.datasets.filter(d => d.project_id === projectID);\n  const meta_columns = state.metaColumns.filter(\n    mc => mc.project_id === projectID,\n  );\n  const meta_column_ids = meta_columns.map(mc => mc.id);\n\n  const colIDs = meta_columns.reduce((ids, mc) => [...ids, ...mc.columns], []);\n  const mappings = state.mappings.filter(m =>\n    meta_column_ids.includes(m.column_id),\n  );\n  const columns = state.columns.filter(c => colIDs.includes(c.id));\n  const column_ids = columns.map(c => c.id);\n  const entries = state.entries.filter(e => column_ids.includes(e.column_id));\n\n  const deleteProject = () => {\n    columns.forEach(c => {\n      dispatch({\n        type: 'DELETE_ENTRIES_FOR_COLUMN',\n        payload: c.id,\n      });\n      dispatch({\n        type: 'REMOVE_COLUMN',\n        payload: c.id,\n      });\n    });\n\n    mappings.forEach(m => {\n      dispatch({\n        type: 'REMOVE_MAPPING',\n        payload: m.id,\n      });\n    });\n\n    meta_columns.forEach(m => {\n      dispatch({\n        type: 'REMOVE_META_COLUMN',\n        payload: m.id,\n      });\n    });\n    datasets.forEach(d => {\n      dispatch({\n        type: 'REMOVE_DATASET',\n        payload: d.id,\n      });\n    });\n\n    dispatch({\n      type: 'REMOVE_PROJECT',\n      payload: project.id,\n    });\n  };\n\n  return {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    deleteProject,\n    entries,\n  };\n};\n\nexport const useColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const column = state.columns.find(c => c.id === columnID);\n  const entries = state.entries.filter(e => e.column_id == columnID);\n  const mappings = state.mappings.filter(m => m.column_id === columnID);\n  const entry_names = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entry_names.includes(embed.entry),\n  );\n  return {column, entries, mappings, embeddings, dispatch};\n};\n\nexport const useMetaColumn = columnID => {\n  const [state, dispatch] = useStateValue();\n  const meta_column = state.metaColumns.find(c => c.id === columnID);\n  if (!meta_column) {\n    return {\n      meta_column: null,\n      entries: [],\n      mappings: [],\n      embeggins: [],\n      dispatch,\n    };\n  }\n  const entries = state.entries.filter(e =>\n    meta_column.columns.includes(e.column_id),\n  );\n\n  // Need to consolidate the entries down to as single space.\n  const entryNames = Array.from(new Set(entries.map(e => e.name)));\n  const mergedEntry = entryNames.map(name => {\n    const entry_collection = entries.filter(e => e.name === name);\n    const total = entry_collection.reduce((total, ec) => total + ec.count, 0);\n    return {\n      name,\n      count: total,\n    };\n  });\n\n  const mappings = state.mappings.filter(m => m.column_id === meta_column.id);\n  const entry_names = entries.map(e => e.name);\n  const embeddings = state.embeddings.filter(embed =>\n    entry_names.includes(embed.entry),\n  );\n  return {meta_column, entries: mergedEntry, mappings, embeddings, dispatch};\n};\n\nexport const useProjectStats = () => {\n  const [state, _] = useStateValue();\n  const {projects, datasets, columns, meta_columns} = state;\n  const project_stats = projects.reduce((stats, project) => {\n    const project_datasets = datasets\n      .filter(d => d.project_id === project.id)\n      .map(d => d.id);\n    const project_columns = columns.filter(c =>\n      project_datasets.includes(c.id),\n    );\n    const project_meta_columns = columns.filter(\n      mc => mc.project_id == project.id,\n    );\n    return [\n      ...stats,\n      {\n        project: project,\n        stats: {\n          datasets: datasets.length,\n          columns: project_columns.length,\n          meta_columns: project_meta_columns.length,\n        },\n      },\n    ];\n  }, []);\n  return project_stats;\n};\n\nexport const useStorage = () => {\n  const [{storage_stats, persisting}, _] = useStateValue();\n  console.log('storage stats', storage_stats);\n  if (storage_stats) {\n    return {\n      persisting,\n      quota: storage_stats.quota / 1e6,\n      usage: storage_stats.usage / 1e6,\n    };\n  } else {\n    return {};\n  }\n};\n\nexport const useDataset = datasetID => {\n  const [state, dispatch] = useStateValue();\n  const dataset = state.datasets.find(d => d.id === datasetID);\n  const columns = state.columns.filter(d => d.dataset_id === datasetID);\n  const columnIDs = columns.map(c => c.id);\n  const mappings = state.mappings.filter(m => columnIDs.includes(m.columnID));\n  return {dataset, columns, mappings};\n};\n","import React from 'react';\nimport {Link, Route} from 'react-router-dom';\nimport {useProject, useColumn} from '../contexts/app_context';\nimport Breadcrumbs from './Breadcrumbs';\nimport {\n  faTwitter,\n  faMedium,\n  faGithub,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport {faChevronLeft} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function SideBar({history, match}) {\n  const goBack = () => {\n    history.goBack();\n  };\n  return (\n    <div className=\"sidenav\">\n      <div className=\"logos\">\n        <Link style={{display: 'flex', alignItems: 'center'}} to={'/'}>\n          <img src={`${process.env.PUBLIC_URL}/DataClinicLogo.png`} />{' '}\n          <span className=\"data-clinic\">Data Clinic</span>{' '}\n        </Link>\n        <span className=\"project-name\">smooshr (beta)</span>\n      </div>\n      <div className=\"spacer\" />\n      <div className=\"top-menu\">\n        <Link to=\"/\">Projects</Link>\n        <Link to=\"/about\">About</Link>\n        <a target=\"_blank\" href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n          Feedback\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TwoSigmaLogo() {\n  return (\n    <svg\n      width=\"116\"\n      height=\"21\"\n      viewBox=\"0 0 230 42\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      {' '}\n      <title>Two Sigma</title>\n      <defs>\n        <path id=\"a\" d=\"M19.436 21.668V1.025H0v20.643h19.435z\"></path>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          fill=\"#FFFFFF\"\n          d=\"M59.06 13.464h-7.137v-3.155h17.811v3.155H62.6V30.95h-3.54zm14.01-3.155h3.745l4.747 15.66h.06l4.483-15.66h3.301l4.454 15.66h.059l4.777-15.66h3.716L95.895 30.95H92.09l-4.335-15.127h-.059L83.361 30.95h-3.804zm41.214-.355c5.986 0 10.527 4.158 10.527 10.556 0 6.55-4.541 10.794-10.527 10.794-5.985 0-10.558-4.245-10.558-10.794 0-6.398 4.573-10.556 10.558-10.556m0 18.285c3.892 0 6.93-2.89 6.93-7.729 0-4.658-3.007-7.518-6.93-7.518-3.922 0-6.93 2.86-6.93 7.518 0 4.839 3.038 7.73 6.93 7.73m40.846-17.931h3.539V30.95h-3.54V19.41zm18.744-.355c2.832 0 5.222.885 7.313 2.33 0 0-2.026 2.374-2.128 2.311-1.56-1-3.21-1.574-5.096-1.574-4.247 0-7.048 3.068-7.048 7.433 0 4.746 2.624 7.785 7.048 7.785 1.534 0 3.067-.385 4.13-1.003v-4.897h-5.19v-2.623h8.462v9.347c-2.007 1.416-4.63 2.24-7.49 2.24-6.46 0-10.587-4.363-10.587-10.85 0-6.075 4.187-10.499 10.586-10.499m12.506.355h3.57l6.812 9.701 6.811-9.701h3.541V30.95h-3.421V15.558l-6.962 9.73-6.958-9.73V30.95h-3.392z\"></path>\n        <g transform=\"translate(210.418 9.283)\">\n          <path\n            d=\"M7.639 1.025h4.158l7.64 20.643H15.63l-1.561-4.454H5.368l-1.533 4.454H0L7.639 1.025zM6.34 14.354h6.725L9.734 4.74h-.06L6.34 14.354z\"\n            fill=\"#FFFFFF\"></path>\n        </g>\n        <path\n          d=\"M136.826 26.498c1.861 1.007 3.618 1.68 5.887 1.68 2.715 0 4.069-1.18 4.069-2.83 0-4.66-11.616-1.594-11.616-9.466 0-3.303 2.74-5.928 7.37-5.928 2.714 0 5.443.653 7.579 1.902l-2.314 2.361c-1.68-.72-3.11-1.137-5.146-1.137-2.389 0-3.806 1.21-3.806 2.744 0 4.63 11.62 1.473 11.62 9.494 0 3.393-2.567 5.985-7.756 5.985-3.035 0-6.33-1.076-8.273-2.419l2.386-2.386z\"\n          fill=\"#FFFFFF\"></path>\n        <path\n          fill=\"#009AA6\"\n          d=\"M20.625 0L0 20.63l20.625 20.628 20.63-20.628z\"></path>\n        <path\n          d=\"M9.748 26.478c-.16-6.605 7.789-5.746 7.789-9.13 0-1.1-.863-2.041-2.784-2.041-1.401 0-2.743.701-3.724 1.602l-1.46-1.463c1.259-1.18 3.223-2.14 5.284-2.14 3.304 0 4.986 1.842 4.986 4.003 0 4.986-7.728 4.104-7.728 8.27h7.607v1.98h-9.95l-.02-1.081zm15.937-.5c-1.521 0-2.423-.98-2.423-2.862 0-2.404 1.602-4.566 3.525-4.566 1.5 0 2.402.981 2.402 2.883 0 2.401-1.582 4.545-3.504 4.545zm9.713-9.25h-8.444v.003c-3.437.005-6.033 2.745-6.033 6.403 0 2.905 1.881 4.666 4.544 4.666 3.464 0 6.067-2.743 6.067-6.386 0-1.182-.313-2.173-.856-2.935h2.947l1.775-1.75z\"\n          fill=\"#FFF\"></path>\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport {\n  faTwitter,\n  faMedium,\n  faGithub,\n} from '@fortawesome/free-brands-svg-icons';\nimport TwoSigmaLogo from './TwoSigmaLogo';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <TwoSigmaLogo />\n      <p className=\"copyright\">\n        © 2019 Two Sigma Investments, LP. All rights reserved.\n      </p>\n      <p className=\"social\">\n        <a href=\"https://twitter.com/tsdataclinic?lang=en\" target=\"_blank\">\n          <FontAwesomeIcon icon={faTwitter} />\n        </a>\n        <a href=\"https://medium.com/dataclinic\" target=\"_blank\">\n          <FontAwesomeIcon icon={faMedium} />\n        </a>\n        <a href=\"https://github.com/tsdataclinic\" target=\"blank\">\n          <FontAwesomeIcon icon={faGithub} />\n        </a>\n      </p>\n    </footer>\n  );\n}\n","import Papa from 'papaparse';\nimport {saveAs} from 'file-saver';\nimport slugify from 'slugify';\nimport python_template from './python_file';\nimport JSZip from 'jszip';\n\nconst uuidv1 = require('uuid/v1');\n\n// Takes a file handle and returns the summary stats for that file\nexport function parse_file_for_preview(\n  file,\n  onProgress = null,\n  report_progress_every = 200,\n  sample_rows = 10,\n  max_unique = 500,\n) {\n  return new Promise((resolve, reject) => {\n    let no_rows = 0;\n    let set_dict = {};\n    let sample = [];\n    let exceded = [];\n    let columnCounts = {};\n\n    let ref = file.ref;\n    let fileSize = ref.size;\n\n    if (file.type !== 'file') {\n      ref = ref.split('?')[0];\n      ref = `${process.env.REACT_APP_API_URL}/proxy?url=${ref}`;\n    }\n\n    Papa.parse(ref, {\n      worker: true,\n      header: true,\n      download: file.type !== 'file',\n      step: function(row) {\n        if (no_rows < sample_rows) {\n          sample.push(row.data);\n        }\n\n        if (no_rows == 0) {\n          row.meta.fields.forEach(f => {\n            set_dict[f] = {};\n            columnCounts[f] = 0;\n          });\n        }\n\n        no_rows = no_rows + 1;\n\n        if (no_rows % report_progress_every == 0 && onProgress) {\n          onProgress({\n            rows_read: no_rows,\n            bytes_read: row.meta.cursor,\n            total_size: fileSize,\n          });\n        }\n\n        row.meta.fields.forEach(f => {\n          let val = row.data[f];\n\n          if (val == f) {\n            return;\n          }\n          if (val in set_dict[f]) {\n            set_dict[f][val] += 1;\n          } else {\n            if (columnCounts[f] < max_unique) {\n              set_dict[f][val] = 1;\n              columnCounts[f] += 1;\n            } else if (!exceded.includes(f)) {\n              exceded.push(f);\n            }\n          }\n        });\n      },\n      error: error => {\n        console.log('something bad happened');\n      },\n      complete: () => {\n        let columns = [];\n        let entries = [];\n        const dataset_id = uuidv1();\n        Object.keys(set_dict).forEach(field => {\n          let column_id = uuidv1();\n\n          columns.push({\n            unique: Object.keys(set_dict[field]).length,\n            id: column_id,\n            name: field,\n            key: field,\n            dataset_id: dataset_id,\n            type: 'text',\n            exceded: exceded.includes(field),\n          });\n\n          Object.entries(set_dict[field]).forEach(([field, count]) =>\n            entries.push({column_id, name: field, count}),\n          );\n        });\n\n        resolve({\n          dataset: {\n            id: dataset_id,\n            name: file.type === 'url' ? file.ref.split('?')[0] : file.ref.name,\n            file: file,\n            row_count: no_rows,\n            sample: sample,\n          },\n          columns: columns,\n          entries: entries,\n        });\n      },\n    });\n  });\n}\n\n{\n  /*export const saveMappingsJSON = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n) => {\n  console.log('datasets ', datasets);\n  datasets.forEach(d => {\n    console.log();\n  });\n};*/\n}\n\nexport const exportPythonCode = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  var mapping = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n  );\n  const recipe_name = slugify(project.name) + '.json';\n  const output_data_name = slugify(project.name) + 'csv';\n\n  const recipy = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    settings,\n  );\n  const python_code = python_template(recipe_name, output_data_name);\n\n  let zip = new JSZip();\n  let folder = zip.folder(project.name);\n  zip.folder(`${project.name}/put_your_datasets_in_here`);\n  zip.folder(`${project.name}/results`);\n  folder.file(recipe_name, JSON.stringify(recipy));\n  folder.file('process.py', python_code);\n  zip.generateAsync({type: 'blob'}).then(content => {\n    saveAs(content, slugify(project.name) + 'zip');\n  });\n};\n\nexport const saveProject = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  entries,\n  settings,\n) => {\n  let projectJSON = {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n  };\n\n  const output_name = `${project.name}.json`;\n  var blob = new Blob([JSON.stringify(projectJSON)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\nexport const createJSONMapping = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n  settings,\n) => {\n  let projectJSON = {\n    name: project.name,\n    description: project.description,\n    id: project.id,\n  };\n\n  const make_col_mappings = d => {\n    const col_renames = {};\n    meta_columns.forEach(mc => {\n      const resolved_columns = mc.columns\n        .map(cID => columns.find(c => c.id === cID))\n        .filter(c => c.dataset_id === d.id);\n      resolved_columns.forEach(rc => {\n        col_renames[rc.name] = mc.name;\n      });\n    });\n    return col_renames;\n  };\n\n  let datasetsJSON = datasets.map(d => ({\n    type: d.file.type,\n    ref: d.file.ref,\n    rows: d.rows,\n    column_renames: make_col_mappings(d),\n  }));\n\n  const output_name = slugify(project.name) + '.json';\n  const mappingsJSON = {};\n  meta_columns.forEach(mc => {\n    const applicableMappings = mappings.filter(m => m.column_id === mc.id);\n    mappingsJSON[mc.name] = {};\n    applicableMappings.forEach(mapping => {\n      mappingsJSON[mc.name][mapping.name] = mapping.entries;\n    });\n  });\n\n  const jsonOutput = {\n    project: projectJSON,\n    datasets: datasetsJSON,\n    mappings: mappingsJSON,\n    settings: settings ? settings : {},\n  };\n  return jsonOutput;\n};\n\nexport const saveMappingsJSON = (\n  project,\n  datasets,\n  meta_columns,\n  columns,\n  mappings,\n) => {\n  const output_name = slugify(project.name) + '.json';\n  var jsonOutput = createJSONMapping(\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n  );\n\n  var blob = new Blob([JSON.stringify(jsonOutput)], {\n    type: 'text/plain;charset=utf-8',\n  });\n\n  saveAs(blob, output_name);\n};\n\nexport const saveMappingsCSV = (columns, mappings, output_name) => {\n  const csvMapping = columns.reduce((result, column) => {\n    const column_mappings = mappings.filter(m => m.column_id == column.id);\n    if (column_mappings.length > 0) {\n      column_mappings.forEach(mapping => {\n        mapping.entries.forEach(entry => {\n          result = result + [column.name, mapping.name, entry].join(',') + '\\n';\n        });\n      });\n    }\n    return result;\n  }, 'column,entry,mapped_entry\\n');\n  var blob = new Blob([csvMapping], {type: 'text/plain;charset=utf-8'});\n  saveAs(blob, `mappings_for_${output_name}.csv`);\n};\n\nexport const exportData = (project, outfile) => {\n  //   project.datasets.first.file\n};\n\nexport const applyAndSave = () => {};\nexport const applyMappingToFile = (columns, mappings, file) => {};\n","\nexport default function python_template(project_file,output_file){\n    var template = `\nimport pandas as pd \nimport json\nimport sys\n\nwith open('${project_file}', 'r') as f:\n    project = json.load(f)\n    datasets = project['datasets']\n\n    all_data = pd.DataFrame()\n\nfor dataset in datasets:\n    dataset_type = dataset['type']\n    dataset_name = dataset['ref']['path']\n    if(dataset_type=='file'):\n        file_path = 'put_your_datasets_in_here/{}'.format(dataset_name)\n        try:\n           print('Raeding {}'.format(dataset_name))\n           data = pd.read_csv(file_path)\n        except:\n           print(\"Place the file {} in the folder put_your_datasets_in_here\".format(file_path))\n           sys.exit()\n    elif(dataset_type['type'] == 'url'):\n        data = pd.read_csv(data['ref']['url'])\n    elif(dataset_Type['type'] == 'open_data'):\n        data = pd.read_csv(data['ref']['url'])\n        \n    print(\"Renaming columns\")\n    column_renames  = dataset['column_renames']\n    data = data.rename(columns=column_renames)\n\n    all_data = all_data.append(data, ignore_index=True)\n\nprint('Applying column mappings')\nfor column,mapping in project['mappings'].items():\n    map_dict = {}\n    for key, values in mapping.items():\n        for value in values:\n            map_dict[value] = key \n            \n    all_data[column] = all_data[column].map(lambda x: map_dict[x] if x in mapping else 'unknown')\n\nprint('Writing out results')\nall_data.to_csv('results/${output_file}')\nprint('Datasets have been smooshed')\n    `\n    return template\n}\n","import React from 'react'\n\nexport default function ProgressBar({ total, value, style }) {\n    return (\n        <div className='progress-bar' style={style}>\n            <div className='progress-bar-outer'>\n                <div className={'progress-bar-inner'} style={{ width: `${value * 100.0 / total}%` }}>\n                </div>\n            </div>\n            <p className='progress-bar-pc'>{value ? (value * 100 / total).toPrecision(3) : 0} %</p>\n        </div>\n    )\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport { parse_file_for_preview } from '../utils/file_parsing';\nimport { useStateValue } from '../contexts/app_context';\nimport ProgressBar from './ProgressBar'\n\nexport default function FileSnapshot({ file, onAddDataset }) {\n  const [columns, setColumns] = useState([]);\n  const [dataset, setDataset] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [includedCols, setIncludedCols] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [status, setStatus] = useState('loading');\n\n  const [_, dispatch] = useStateValue();\n\n  const submit = () => {\n    const cols = columns.map(c => ({\n      ...c,\n      focusCol: includedCols.includes(c.id),\n    }));\n    const ents = entries.filter(e => includedCols.includes(e.column_id));\n\n    onAddDataset(dataset, cols, ents);\n\n    setStatus('saved');\n  };\n\n  const skip = () => {\n    setStatus('skipping');\n  };\n\n  const toggleSelect = column_id => {\n    if (includedCols.includes(column_id)) {\n      setIncludedCols(includedCols.filter(id => id !== column_id));\n    } else {\n      setIncludedCols([...includedCols, column_id]);\n    }\n  };\n\n  const displayEntries = useMemo(\n    () =>\n      columns.reduce((res, col) => {\n        const col_entries = entries.filter(e => e.column_id === col.id);\n        res[col.id] = {\n          entries: col_entries.slice(0, 5).map(e => e.name),\n          extra: col_entries.length - 5,\n        };\n\n        return res;\n      }, {}),\n    [entries, columns],\n  );\n\n  useEffect(() => {\n    parse_file_for_preview(file, progress => setProgress(progress)).then(\n      result => {\n        setStatus('selecting');\n        setDataset(result.dataset);\n        setColumns(result.columns);\n        setEntries(result.entries);\n      },\n    );\n  }, [file]);\n\n\n  return (\n    <div className=\"fileSnapshot\">\n      <div className='file-snapshot-header'>\n        <h3>{file.type === 'url' ? file.ref : file.ref.name}</h3>\n        {status == 'loading' &&\n          <React.Fragment>\n            <p>Loading, parsed {progress.rows_read ? progress.rows_read.toLocaleString() : 0} rows</p>\n            <ProgressBar total={progress.total_size ? progress.total_size : 0} value={progress.bytes_read} style={{ width: '500px' }} />\n          </React.Fragment>\n        }\n        {status == 'selecting' &&\n          <p>\n            Has a total of {dataset.row_count} rows and {columns.length}{' '}\n            columns. Select the columns you want to work with\n          </p>}\n      </div>\n      {status == 'selecting' && (\n        <React.Fragment>\n          <ul className=\"column-summary-list \">\n            {columns.map(column => (\n              <li className='column-preview-card card' key={column.id}>\n                <div>\n                  <div class=\"summary_list_header\">\n                    <h3>\n                      {column.name} <span>{`${column.exceded ? '>' : ''} ${column.unique}`}</span>\n                    </h3>\n                    <input\n                      type=\"checkbox\"\n                      checked={includedCols.includes(column.id)}\n                      onChange={() => toggleSelect(column.id)}\n                    />\n                  </div>\n                  <p>\n                    {displayEntries[column.id].entries.join(', ') +\n                      ` and ${displayEntries[column.id].extra} more`}\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n\n          <div className='column-summary-buttons'>\n            <button onClick={submit}>Load</button>\n            <button onClick={skip}>Skip</button>\n          </div>\n        </React.Fragment>\n      )}\n\n    </div>\n  );\n}\n","import React, {useState} from 'react';\n\nexport default function Tabs({options, selected, onSelected}) {\n  console.log('SELECTED ', selected)\n  return (\n    <div className=\"Tabs\">\n      {options.map(option => (\n        <p\n          className={`Tab ${selected === option ? 'selected' : ''} `}\n          key={option}\n          onClick={()=>onSelected(option)}>\n          {option}\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React, {useState} from 'react'\nimport { faSearch, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function SearchBar({value,onChange, prompt, style}){\n\n   return(\n   <div className='SearchBarContainer' style={style}>\n       <FontAwesomeIcon className='searchIcon' icon={faSearch} />\n       <input type='text' \n           className='SearchBar'\n           onChange={(e)=>onChange(e.target.value)}\n           placeholder={prompt}\n           value={value}\n       />\n       <FontAwesomeIcon className='clearIcon' onClick={()=>onChange('')} icon={faTimes} />\n    </div>\n   )\n}\n\n\nSearchBar.defaultProps= {\n  style:{}\n}\n","import React, {useState, useEffect} from 'react';\nimport SearchBar from './SearchBar';\nimport {faExternalLinkAlt, faDownload} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function OpneDataSearcher({onDataset}) {\n  const template =\n    'https://data.cityofnewyork.us/api/views/aiww-p3af/rows.csv?accessType=DOWNLOAD';\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const domain = 'data.cityofnewyork.us';\n  const onSelect = dataset => {\n    onDataset({\n      type: 'opendata',\n      ref: `https://data.cityofnewyork.us/api/views/${dataset.resource.id}/rows.csv?accessType=DOWNLOAD`,\n    });\n  };\n\n  useEffect(() => {\n    const base = 'http://api.us.socrata.com/api/catalog/v1?';\n    fetch(\n      `${base}domains=${domain}&search_context=${domain}&limit=20&only=datasets&q=${searchTerm}`)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.results);\n        setSearchResults(res.results);\n      })\n      .catch(err => console.log(err));\n  }, [searchTerm]);\n\n  return (\n    <div className=\"open-data-search\">\n      <SearchBar\n        style={{marginBottom: '30px'}}\n        text={searchTerm}\n        onChange={setSearchTerm}\n      />\n      {searchResults.map(dataset => (\n        <p>\n          {dataset.resource.name}{' '}\n          <span className=\"open-data-result-controls\">\n            {' '}\n            <a href={dataset.permalink} target=\"_blank\">\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n            </a>{' '}\n\n            <FontAwesomeIcon onClick={()=>onSelect(dataset)} icon={faDownload} />\n          </span>{' '}\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport FileSnapshot from './FileSnapshot';\nimport Tabs from './Tabs';\nimport OpenDataSearcher from './OpenDataSearcher';\n\nimport {faFile, faDownload} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function FileLoader(props) {\n  const [filesPreview, setFilesPreview] = useState(null);\n  const [error, setError] = useState(null);\n  const [url, setURL] = useState(null);\n\n  const [columnSelections, setColumnSelections] = useState([]);\n  const {onClose} = props;\n  const [selectedTab, setSelectedTab] = useState('file');\n\n  const submitFromURL = () => {\n    setFilesPreview([{type: 'url', ref: url}]);\n  };\n\n  const submitFromOpenData = dataset => {\n    setFilesPreview([dataset]);\n  };\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFilesPreview(files.map(f => ({type: 'file', ref: f})));\n      setColumnSelections({...columnSelections, [files[0].name]: {}});\n      setError(null);\n    } else {\n      setError('Some files are not CSVs, We only support CSVs for now');\n    }\n  });\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n  const renderURL = () => {\n    return (\n      <div className=\"url-tab\">\n        <FontAwesomeIcon icon={faDownload} />\n        <div>\n          <input\n            placeholder=\"dataseturl\"\n            value={url}\n            onChange={e => setURL(e.target.value)}\n          />\n          <button disabled={!url} onClick={submitFromURL}>\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderOpenDataPortal = () => {\n    return <OpenDataSearcher onDataset={submitFromOpenData} />;\n  };\n\n  const renderFile = () => {\n    return (\n      <div {...getRootProps()}>\n        <div className=\"file-tab\" style={{ cursor: 'p' }}>\n          <FontAwesomeIcon icon={faFile} />\n          <input\n            {...getInputProps({\n              accept: ['text/csv', 'application/vnd.ms-excel'],\n            })}\n          />\n          {isDragActive ? (\n            <p>Drop the files here ... </p>\n          ) : (\n            <p>Drag 'n' drop files here or click to load dataset</p>\n          )}\n        </div>\n        {error && <p>{error}</p>}\n      </div>\n    );\n  };\n\n  const tabContent = () => {\n    switch (selectedTab) {\n      case 'file':\n        return renderFile();\n      case 'url':\n        return renderURL();\n      case 'open data portal':\n        return renderOpenDataPortal();\n    }\n  };\n\n  return (\n    <div classname=\"file-uploader\">\n      <Tabs\n        options={['file', 'url', 'open data portal']}\n        selected={selectedTab}\n        onSelected={tab => setSelectedTab(tab)}\n      />\n\n      {filesPreview ? (\n        <div>\n          {filesPreview.map(file => (\n            <FileSnapshot file={file} onAddDataset={props.onAddDataset} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"content\">{tabContent()}</div>\n      )}\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport ReactModal from 'react-modal';\nimport FileLoader from './FileLoader';\nimport {useStateValue} from '../contexts/app_context';\nconst uuidv1 = require('uuid/v1');\n\nexport default function UploadModal({match, history}) {\n  const {projectID} = match.params;\n  const onClose = () => history.goBack();\n  const [_, dispatch] = useStateValue();\n\n  const [selectedTab, setSelectedTab] = useState('file');\n\n  const addDatasetToStore = (newDataset, columns, entries) => {\n    const meta_columns = columns\n      .filter(c => c.focusCol)\n      .map(column => ({\n        columns: [column.id],\n        name: column.name,\n        description: '',\n        project_id: projectID,\n        id: uuidv1(),\n      }));\n\n    dispatch({\n      type: 'ADD_DATASETS',\n      payload: [{...newDataset, project_id: projectID}],\n    });\n\n    dispatch({\n      type: 'ADD_COLUMNS',\n      payload: columns,\n    });\n\n    dispatch({\n      type: 'ADD_ENTRIES',\n      payload: entries,\n    });\n\n    dispatch({\n      type: 'ADD_META_COLUMNS',\n      payload: meta_columns,\n    });\n\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: {height: '60%', width: '80%', transform: 'translate(10%,15%)'},\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <FileLoader onAddDataset={addDatasetToStore} onClose={onClose} />\n    </ReactModal>\n  );\n}\n","import React, {useState} from 'react';\nimport ReactModal from 'react-modal';\nimport {useStateValue} from '../contexts/app_context';\n\nexport default function ProjectModal({match, history}) {\n  const onClose = () => history.goBack();\n  const [_, dispatch] = useStateValue();\n\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n\n  const createProject = () => {\n    dispatch({\n      type: 'ADD_PROJECT',\n      payload: {name, description},\n    });\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: {height: '35%', width: '50%', transform: 'translate(40%,40%)'},\n\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"new-project-modal\">\n        <h1>New Project</h1>\n        <p>Project Name</p>\n        <input\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"name\"\n        />\n        <p>Description</p>\n        <textarea\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n          placeholder=\"description\"\n        />\n        <div className=\"buttons\">\n          <button onClick={createProject}>Create</button>\n          <button className=\"cancel-button\" onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","import React, {useState, useCallback} from 'react';\nimport ReactModal from 'react-modal';\nimport {useStateValue} from '../contexts/app_context';\nimport {useDropzone} from 'react-dropzone';\nimport {faFile, faDownload} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {loadProject} from '../contexts/actions';\n\nimport {\n  faColumns,\n  faDatabase,\n  faInfoCircle,\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ProjectModal({match, history}) {\n  const onClose = () => history.goBack();\n  const [_, dispatch] = useStateValue();\n  const [error, setError] = useState(null);\n\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [project, setProject] = useState(null);\n\n  const onDrop = useCallback(files => {\n    const file = files[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = f => {\n      setProject(JSON.parse(reader.result));\n    };\n  });\n\n  const loadIt = () => {\n    loadProject(project, dispatch);\n    history.goBack();\n  };\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n  return (\n    <ReactModal\n      isOpen={true}\n      onRequestClose={onClose}\n      style={{\n        content: {height: '50%', width: '60%', transform: 'translate(25%,15%)'},\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}>\n      <div className=\"load-project-modal\">\n        <h1>Load Project</h1>\n        <div className=\"content\">\n          {project ? (\n            <div>\n              <h1>{project.project.name}</h1>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faDatabase}\n                    style={{marginRight: '20px'}}\n                  />\n                  <h2>Datasets</h2>\n                </header>\n                <p>{project.project.description}</p>\n                {project.datasets.map(d => (\n                  <p>{d.name}</p>\n                ))}\n              </section>\n              <section>\n                <header\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}>\n                  <FontAwesomeIcon\n                    icon={faColumns}\n                    style={{marginRight: '20px'}}\n                  />\n                  <h2>Coumns</h2>\n                </header>\n                {project.meta_columns.map(mc => (\n                  <p>{mc.name}</p>\n                ))}\n              </section>\n              <button onClick={loadIt}>Load</button>\n            </div>\n          ) : (\n            <div {...getRootProps()}>\n              <div className=\"file-tab\" style={{cursor: 'p'}}>\n                <FontAwesomeIcon icon={faFile} />\n                <input\n                  {...getInputProps({\n                    accept: ['text/csv', 'application/vnd.ms-excel'],\n                  })}\n                />\n                {isDragActive ? (\n                  <p>Drop the files here ... </p>\n                ) : (\n                  <p>\n                    Drag 'n' drop project file here or click to load project\n                  </p>\n                )}\n              </div>\n              {error && <p>{error}</p>}\n            </div>\n          )}\n        </div>\n      </div>\n    </ReactModal>\n  );\n}\n","import React, {useState} from 'react';\nimport streamSaver from 'streamsaver';\n\nexport default function ApplyMapping(props) {\n  const {file, columns, mappings} = props;\n\n  const [addColumns, setAddColumns] = useState(true);\n  const [unmappedToUnknown, setUnmappedToUnknown] = useState(false);\n  const [status, setStatus] = useState('pending');\n\n  const startProcessing = () => {\n    setStatus('running');\n    const fileStream = streamSaver.createWriteStream('processed.txt', {\n      size: 22,\n    });\n    new Response('StreamSaver is awesome').body.pipeTo(fileStream).then(\n      () => {\n        console.log('SAVED');\n      },\n      () => {\n        console.log('ERROR');\n      },\n    );\n  };\n\n  return (\n    <div className=\"ApplyMapping\">\n      {status === 'pending' && (\n        <React.Fragment>\n          <p id={file.name}>{file.name}</p>\n          <div className=\"options\">\n            <p>Applying mappings to {columns.length} columns</p>\n            Add Columns:{' '}\n            <input\n              type=\"checkbox\"\n              checked={addColumns}\n              onChange={e => setAddColumns(e.target.checked)}\n            />\n            Treat Unmapped as Unknown: <input type=\"checkbox\" />\n            <button onClick={startProcessing}>Apply Mapping</button>\n          </div>\n        </React.Fragment>\n      )}\n      {status === 'running' && <h2>Running</h2>}\n      {status === 'done' && <h2>Done</h2>}\n    </div>\n  );\n}\n","import React, {useState, useEffect, useCallback} from 'react';\nimport ReactModal from 'react-modal';\nimport ApplyMapping from './ApplyMapping'\nimport {useDataset} from '../contexts/app_context'\n\nimport {useDropzone} from 'react-dropzone';\n\nexport default function ApplyMappingsModal({match,history}) {\n\n  const [files, setFiles] = useState(null);\n  const [error, setError] = useState(null);\n  const {datasetID} = match.params\n\n  const onClose = ()=>{\n     console.log(\"PREVIOUS STATE\")\n     history.goBack()\n  }\n\n \n  const {dataset,columns,mappings} = useDataset(datasetID);\n\n  const onDrop = useCallback(files => {\n    if (files.every(file => file.name.split('.').includes('csv'))) {\n      setFiles(files);\n    } else {\n      setError(\n        \"Smoosher currently only supports CSV's please just upload those!\",\n      );\n    }\n  });\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n  return (\n    <ReactModal isOpen={true} onRequestClose={onClose}>\n      {error && <h1>{error}</h1>}\n\n      {files ? (\n        <div>\n          {files.map(file => (\n           <ApplyMapping \n               file={file} \n               columns={columns}\n               mappings={mappings}\n            />\n               \n          ))}\n        </div>\n      ) : (\n        <React.Fragment>\n          <h1>Select files to apply mapping to</h1>\n          <div className=\"fileUploader\">\n            <div {...getRootProps()}>\n              <input\n                {...getInputProps({\n                  accept: ['text/csv', 'application/vnd.ms-excel'],\n                })}\n              />\n\n              {isDragActive ? (\n                <p>Drop the files here ... </p>\n              ) : (\n                <p>Drag 'n' drop files to apply mapping</p>\n              )}\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </ReactModal>\n  );\n}\n","import React, {useState} from 'react';\nimport ReactModal from 'react-modal';\nimport {useProject, useStateValue} from '../contexts/app_context';\nimport {exportPythonCode} from '../utils/file_parsing';\n\nexport default function CodeExportModal({match, history}) {\n  const onClose = () => history.goBack();\n  const [_, dispatch] = useStateValue();\n  const {projectID} = match.params;\n  const {project, datasets, meta_columns, columns, mappings} = useProject(\n    projectID,\n  );\n\n  const [changeNonMapped, setChangeNonMapped] = useState(false);\n  const [createNewColumns, setCreateNewColumns] = useState(false);\n  const [combineDatasets, setCombineDatasets] = useState(true);\n  const [valueForNonMapped, setValueForNonMapped] = useState('unknown');\n\n  const doExport = () => {\n    const settings = {\n      changeNonMapped,\n      createNewColumns,\n      combineDatasets,\n      valueForNonMapped,\n    };\n\n    exportPythonCode(\n      project,\n      datasets,\n      meta_columns,\n      columns,\n      mappings,\n      settings,\n    );\n  };\n\n  return (\n    <ReactModal\n      style={{\n        content: {height: '35%', transform: 'translate(0,40%)'},\n        overlay: {\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        },\n      }}\n      isOpen={true}\n      onRequestClose={onClose}>\n      <div className=\"code-export-modal\">\n        {project && (\n          <React.Fragment>\n            <div>\n              <h1>{project.name}</h1>\n              <p>Export Code</p>\n            </div>\n            {/*<div className='code-export-options'>\n              <span>\n                Change non mapped entries?\n                <input\n                  type=\"checkbox\"\n                  value={changeNonMapped}\n                  onChange={e => setChangeNonMapped(e.target.checked)}\n                />\n              </span>\n              {changeNonMapped && (\n                <span>\n                  Value for non mapped entries?\n                  <input\n                    type=\"text\"\n                    value={valueForNonMapped}\n                    onChange={e => setValueForNonMapped(e.target.value)}\n                  />{' '}\n                </span>\n              )}\n              <span>\n                Create new columns?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={createNewColumns}\n                  onChange={e => setCreateNewColumns(e.target.checked)}\n                />{' '}\n              </span>\n              <span>\n                Combine datasets in to single file?{' '}\n                <input\n                  type=\"checkbox\"\n                  value={combineDatasets}\n                  onChange={e => setCombineDatasets(e.target.checked)}\n                />{' '}\n              </span>\n            </div>\n\n                {/*<div className={'explanation'}>\n              <span>\n                The script will create these new columns on these datasets\n              </span>\n              <span>Map the old entries to the following</span>\n              <span>Combine the datasets in to a single file</span>\n                  </div>*/}\n\n            <div className={'export_instructions'}>\n              <p>\n                Click export to download a zip file with everything you need to\n                apply your mapping.\n              </p>\n              <p>The code will do the following:</p>\n              <ul>\n                <li>\n                  Load the files you worked on from the \"put_your_files_in_here\"\n                  filder\n                </li>\n                <li>\n                  Combine and rename columns from each dataset as you indicated\n                </li>\n                <li>Apply the new taxonomies you produced to those columns</li>\n                <li>Export the results to the \"results\" folder</li>\n              </ul>\n              <p>\n                The script that does all this is called \"process.py\" you can\n                tweak it to suit your needs\n              </p>\n            </div>\n            <div className=\"buttons\">\n              <button onClick={doExport}>Export</button>\n              <button onClick={onClose}>Cancel</button>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </ReactModal>\n  );\n}\n","import * as lev from 'fast-levenshtein';\nimport {KMeans} from 'ml';\nimport {agnes} from 'ml-hclust';\n\nconst cacheSimilarities = {};\n\nexport const suggestForMapping = (mapping, entries) => {\n  const res = [];\n  mapping.forEach(mapping_entry => {\n    entries.forEach(entry => {\n      const cacheKey = [mapping_entry, entry.name].join('_');\n\n      if (!mapping.includes(entry)) {\n        if (cacheSimilarities[cacheKey]) {\n          res.push({\n            suggestion: entry.name,\n            score: cacheSimilarities[cacheKey],\n          });\n        } else {\n          const dist = lev.get(mapping_entry, entry.name);\n          cacheSimilarities[cacheKey] = dist;\n          res.push({suggestion: entry.name, score: dist});\n        }\n      }\n    });\n  });\n  return res.sort((a, b) => (a.score > b.score ? 1 : -1)).slice(0, 5);\n};\n\nexport const guessGroupingsLevenshteinKNN = (entries, no) => {\n  const validEntries = entries.filter(e => e !== 'undefined');\n  let ans = KMeans(validEntries.map((a, i) => [i]), no, {\n    distanceFunction: (a, b) => {\n      try {\n        let dist = lev.get(\n          validEntries[Math.floor(a[0])],\n          validEntries[Math.floor(b[0])],\n        );\n        return dist;\n      } catch {\n        debugger;\n        return 1000;\n      }\n    },\n  });\n\n  let assignments = validEntries.reduce((result, entry, index) => {\n    result[entry] = ans.clusters[index];\n    return result;\n  }, {});\n\n  let result = [...new Array(5)].map((a, i) => ({\n    name: `Mapping ${i}`,\n    entries: Object.entries(assignments)\n      .filter(a => a[1] == i)\n      .map(a => a[0]),\n  }));\n  console.log(result);\n  return result;\n};\n\nexport const calcEmbedingClusters = (embedings, noClusters) => {\n  const coords = embedings.map(e =>\n    e.embed.length === 300 ? e.embed : [...Array(300)].map(a => 0),\n  );\n  let result = KMeans(coords, noClusters);\n\n  result = embedings.map((e, i) => ({...e, cluster: result.clusters[i]}));\n  return result;\n};\n\nexport const guessGroupingsLevenshteinHClust = entries => {\n  const validEntries = entries.filter(e => e !== 'undefined');\n  let ans = agnes(validEntries.map((a, i) => [i]), {\n    distanceFunction: (a, b) => {\n      try {\n        let dist = lev.get(\n          validEntries[Math.floor(a[0])],\n          validEntries[Math.floor(b[0])],\n        );\n        return dist;\n      } catch {\n        debugger;\n        return 1000;\n      }\n    },\n  });\n\n  let assignments = validEntries.reduce((result, entry, index) => {\n    result[entry] = ans.clusters[index];\n    return result;\n  }, {});\n\n  let result = [...new Array(5)].map((a, i) => ({\n    name: `Mapping ${i}`,\n    entries: Object.entries(assignments)\n      .filter(a => a[1] == i)\n      .map(a => a[0]),\n  }));\n  console.log(result);\n  return result;\n};\n","import React, {useState, useEffect} from 'react';\nimport ReactModal from 'react-modal';\nimport {useStateValue, useColumn} from '../contexts/app_context';\nimport {calc_embedings} from '../utils/calc_embedings';\nimport {calcEmbedingClusters} from '../utils/text_clustering';\nimport {Range} from 'react-range';\n\nexport default function AutoClusterModal({match, history}) {\n  const {columnID} = match.params;\n  const onClose = () => history.goBack();\n  const [mappings, setMappings] = useState([]);\n  const [clusters, setClusters] = useState([]);\n\n  const [noClusters, setNoClusters] = useState(10);\n\n  const {column, entries} = useColumn(columnID);\n\n  const calcCategories = () => {\n    calc_embedings(entries).then(embeds => {\n      const clusters = calcEmbedingClusters(embeds, noClusters);\n      setClusters(clusters);\n    });\n  };\n\n  useEffect(() => {\n    if (entries && entries.length > 0) {\n    }\n  }, [entries]);\n\n  return (\n    <ReactModal isOpen={true} onRequestClose={onClose}>\n      <h1>Detect categories</h1>\n      <span>No clusters: {noClusters}</span>\n      <Range\n        style={{width: '200px'}}\n        max={20}\n        min={2}\n        step={1}\n        values={[noClusters]}\n        onChange={values => setNoClusters(values[0])}\n        renderTrack={({props, children}) => (\n          <div\n            {...props}\n            style={{\n              ...props.style,\n              height: '6px',\n              width: '100%',\n              backgroundColor: '#ccc',\n            }}>\n            {children}\n          </div>\n        )}\n        renderThumb={({props}) => (\n          <div\n            {...props}\n            style={{\n              ...props.style,\n              height: '42px',\n              width: '42px',\n              backgroundColor: '#999',\n            }}\n          />\n        )}\n      />\n      {clusters.length > 0 &&\n        [...Array(noClusters)].map((_, i) => (\n          <div key={i}>\n            <h3>Cluster {i+1}</h3>\n            <p>\n              {' '}\n              {clusters\n                .filter(c => c.cluster === i)\n                .map(c => c.entry)\n                .join(', ')}\n            </p>\n          </div>\n        ))}\n      <button onClick={calcCategories}>Calc categories</button>\n    </ReactModal>\n  );\n}\n","import React, {useState} from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nexport default function TablePreview(props) {\n  const {data} = props;\n\n  const columns = Object.keys(data[0]).map(k => ({key: k, name: k}));\n  const [rows, setRows] = useState(data);\n\n  const sortRows = (initalRows, sortColumn, sortDirection) => rows => {\n    const comp = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === 'DESC') {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    return sortDirection === 'NONE' ? initalRows : [...rows].sort(comp);\n  };\n\n  if (data.length == 0) {\n    return <h1> No data to show</h1>;\n  }\n\n  return (\n    <ReactDataGrid\n      columns={columns}\n      rowGetter={i => rows[i]}\n      rowsCount={data.length}\n      onGridSort={(sortColumn, sortDirection) =>\n        setRows(sortRows(data, sortColumn, sortDirection))\n      }\n    />\n  );\n}\n\nTablePreview.defaultProps = {\n  data: [],\n  columns: [],\n};\n","import React from 'react';\nimport TablePreview from '../components/TablePreview';\nimport EmbedingsViz from '../components/EmbedingsViz';\nimport ColumnInfo from '../components/ColumnInfo';\nimport {useStateValue} from '../contexts/app_context';\nimport SideList from '../components/SideList'\nimport {Link} from 'react-router-dom';\n\nexport default function DatasetPage({match}) {\n  const datasetID = match.params.datasetID;\n\n  const [{datasets, columns, mappings}, dispatch] = useStateValue();\n  const dataset = datasets.find(d => d.id == datasetID);\n\n  const columnsForDataset = columns.filter(c => c.dataset_id === datasetID);\n  return dataset ? (\n    <React.Fragment>\n      <div className=\"datatable full_card\">\n        <TablePreview data={dataset.sample} columns={columnsForDataset} />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginTop: '20px',\n          }}>\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n    <h2>Could not find dataset</h2>\n  );\n}\n\nexport function DatasetPageSidebar({match}){\n\n  const {projectID, datasetID, columnID} = match.params;\n  const [{datasets, columns}, dispatch] = useStateValue();\n  const columnsForDataset = columns.filter(c => c.dataset_id === datasetID)\n\n  return (\n    <SideList \n        title ={'Columns'}\n        entries = \n            {columnsForDataset.filter(c=>c.focusCol).map(column => (\n            <Link to={`/project/${projectID}/dataset/${datasetID}/column/${column.id}`}>\n                {column.name} ({column.unique})\n            </Link>\n          ))}\n        actionPrompt={'Back to project'}\n        actionLink = {`/project/${projectID}`}\n    /> \n  );\n}\n","import React from 'react';\n\nexport default function EntryCard({ entry, selected = false, onToggleSelect }) {\n  return (\n    <div\n      className={`EntryCard card ${selected ? 'selected' : ''}`}\n      onClick={() => onToggleSelect(entry)}>\n      <h3>{entry.name}</h3>\n      <p>{entry.count} occurrences</p>\n    </div>\n  );\n}\n","import React, {useState} from 'react'\nimport { faSortDown} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nexport default function OrderBySelector({onChange}){\n  const showDropDown = ()=>{\n    setShowDropdown(true)\n  }\n\n  const selectOption = (option)=>{\n     setShowDropdown(false)\n     setSelected(option)\n     if(onChange){\n       onChange(option)\n     }\n  }\n\n  const [show, setShowDropdown] = useState(false)\n  const [selected, setSelected] = useState(\"Alphabetically\")\n\n  const options = [\"Alphabetically\", \"Occurances\"]\n\n  return (\n   <div className=\"OrderBy\">\n       <p>Order By: </p>\n       <ul>\n           <li onClick={showDropDown}>{selected} <FontAwesomeIcon icon = {faSortDown} /> </li>\n           {options.filter(o=> o!= selected && show).map(o=> <li\n               onClick={() => selectOption(o)}\n           >{o}</li>)}\n       </ul>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function EntryPill({entry, onRemove}) {\n  return (\n    <span className=\"entry-pill\">\n      <span>{entry}</span>\n      <FontAwesomeIcon icon={faTimes} onClick={() => onRemove(entry)} />\n    </span>\n  );\n}","import React from 'react'\nimport EntryPill from './EntryPill'\n\nexport default function SelectedEntriesList({ selection, onRemoveSelection, onClearAll }) {\n    return (\n        <div className='selected-entry-list'>\n            {selection.length == 0 ?\n                <span>Click on entries to select them</span>\n                :\n                <span>Selections ({selection.length}):</span>\n            }\n            <ul >\n                {selection.reverse().map(entry => <li><EntryPill onRemove={onRemoveSelection} entry={entry} /> </li>)}\n            </ul>\n            {(selection.length > 0) &&\n                <a className='clear-all' onClick={onClearAll}>Clear All</a>\n            }\n        </div>\n    )\n}\n\nSelectedEntriesList.defaultProps = {\n    selection: []\n}\n\n","import React, { useState } from 'react';\nimport EntryCard from './EntryCard';\nimport OrderBySelector from './OrderBySelector';\nimport { faGlassCheers } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SelectedEntriesList from './SelectedEntriesList'\n\nexport default function EntryTable({\n  entries,\n  style,\n  onToggleSelection,\n  onClearSelection,\n  selection,\n}) {\n  const [order, setOrder] = useState('Alphabetically');\n\n  const toggleSelection = entry => {\n    if (onToggleSelection) {\n      onToggleSelection(entry);\n    }\n  };\n\n  const orderKey = { Alphabetically: 'name', Occurances: 'count' }[order];\n\n  let orderedEntries = entries.sort((a, b) =>\n    a[orderKey] > b[orderKey] ? 1 : -1,\n  );\n\n  if (orderKey === 'count') {\n    orderedEntries.reverse();\n  }\n\n  return (\n    <div style={style} className=\"EntryTable\">\n      <div className=\"EntryTableFilters\">\n        <SelectedEntriesList selection={selection} onRemoveSelection={toggleSelection} onClearAll={onClearSelection} />\n        <OrderBySelector onChange={order => setOrder(order)} />\n\n      </div>\n      <div className=\"EntriesTableEntries\">\n        {orderedEntries.length > 0 ? (\n          orderedEntries.map(entry => (\n            <EntryCard\n              key={entry.name}\n              entry={entry}\n              selected={selection.includes(entry.name)}\n              onToggleSelect={toggleSelection}\n            />\n          ))\n        ) : (\n            <div className=\"all-done\">\n              <h1>You really smooshed that crap out of that column.</h1>\n              <h1>\n                {[...Array(5)].map(() => (\n                  <FontAwesomeIcon icon={faGlassCheers} />\n                ))}\n              </h1>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\nEntryTable.defaultProps = {\n  style: {},\n};\n","import React, {useState,useEffect} from 'react'\n\nimport {faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n\nexport default function EditableText({text, onUpdate}){\n  const [localText, setLocalText] = useState(text)\n  const [editing, setEditing] = useState(false)\n\n  useEffect(()=>{\n     setLocalText(text)\n  },[text])\n\n  return  editing ? \n      <input onChange={(e)=>setLocalText(e.target.value)} onBlur={()=> { setEditing(false); onUpdate(localText)  } } value={localText} /> \n    : \n    \n      <h3>\n          {localText} <FontAwesomeIcon onClick={()=>setEditing(true)} icon={faEdit} />\n      </h3>\n    \n    \n}\n","import React, { useState } from 'react';\n\nimport { faEdit, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport EditableText from './EditableText';\n\nexport default function MappingFocus({\n  mapping,\n  onRemoveEntryFromMapping,\n  onRenameMapping,\n  onClearMapping,\n  onDeleteMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  const [suggestionType, setSuggestionType] = useState('text');\n\n  const removeEntryFromMapping = entry => {\n    if (onRemoveEntryFromMapping) {\n      onRemoveEntryFromMapping(entry, mapping);\n    }\n  };\n\n  const addSuggestionToMapping = entry => {\n    if (onAddSuggestionToMapping) {\n      onAddSuggestionToMapping(entry.suggestion);\n    }\n  };\n\n  const updateMappingName = name => {\n    if (onRenameMapping) {\n      onRenameMapping(mapping, name);\n    }\n  };\n\n  const clearMapping = name => {\n    if (onClearMapping) {\n      onClearMapping(mapping);\n    }\n  };\n\n  const deleteMapping = name => {\n    if (onDeleteMapping) {\n      onDeleteMapping(mapping);\n    }\n  };\n\n  const addNegativeExampleToMapping = (entry) => {\n\n    if (onAddNegativeExampleToMapping) {\n      onAddNegativeExampleToMapping(entry.suggestion)\n    }\n  }\n\n  const suggestionsByType = suggestions[suggestionType];\n\n  return (\n    <div className=\"MappingFocus\" style={style}>\n      <EditableText text={mapping.name} onUpdate={updateMappingName} />\n      <div className=\"IncludeList\">\n        <h4>Includes</h4>\n        <ul>\n          {mapping.entries.map(entry => (\n            <li>\n              {entry}{' '}\n              <button\n                onClick={() => removeEntryFromMapping(entry)}\n                className={'SmallButton RoundButton'}>\n                <FontAwesomeIcon icon={faTimes} />{' '}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"KeywordMatch\">\n        <h4>\n          Suggestions by:{' '}\n          <span\n            style={\n              suggestionType == 'text'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('text')}>\n            text\n          </span>{' '}\n          /{' '}\n          <span\n            style={\n              suggestionType == 'meaning'\n                ? { fontWeight: 'bold' }\n                : { fontWeight: 'lighter' }\n            }\n            onClick={() => setSuggestionType('meaning')}>\n            meaning\n          </span>\n        </h4>\n        <ul>\n          {suggestionsByType.map(entry => (\n            <li>\n              {entry.suggestion}{' '}\n              <div className=\"SuggestionActionButtons\">\n                <button\n                  className={'SmallButton RoundButton'}\n                  onClick={() => addSuggestionToMapping(entry)}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </button>\n                <button className={'SmallButton RoundButton'}\n                  onClick={() => addNegativeExampleToMapping(entry)}\n                >\n                  <FontAwesomeIcon\n                    icon={faTimes} />\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className={'ActionButtons'}>\n        <button onClick={clearMapping} className={'MidButton'}>\n          Clear Mapping\n        </button>\n        <button onClick={deleteMapping} className={'MidButton'}>\n          Delete Mapping\n        </button>\n      </div>\n    </div>\n  );\n}\n\nMappingFocus.defaultProps = {\n  style: {},\n  meaningSuggestions: [],\n  textSuggestions: [],\n};\n","import React from 'react';\n\nexport default function MappingsMenu({\n  mappings = [],\n  selected,\n  onMappingSelected,\n  style,\n  mapping\n}) {\n\n  const mappingSelected = (mapping)=>{\n    if(onMappingSelected){\n      onMappingSelected(mapping)\n    }\n  }\n \n  return (\n    <div class=\"MappingsMenu\" style={style}>\n      <h3>\n        Merged Groups <span class=\"Pill\">{mappings.length}</span>{' '}\n      </h3>\n      <ul>\n        {mappings.map(mapping => (\n          <li\n            className={\n              selected && mapping.name == selected.name ? 'selected' : ''\n            }\n            onClick={() => mappingSelected(mapping)}>\n            {mapping.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nMappingsMenu.defaultProps = {\n  mappings: [],\n  style: {},\n};\n","import React, {useState} from 'react';\nimport MappingFocus from './MappingFocus';\nimport MappingsMenu from './MappingsMenu';\n\nexport default function MappingsArea({\n  mappings,\n  selection,\n  onMappingSelected,\n  onRenameMapping,\n  onRemoveEntryFromMapping,\n  onDeleteMapping,\n  onClearMapping,\n  onAddEntryToMapping,\n  onAddSuggestionToMapping,\n  onAddNegativeExampleToMapping,\n  suggestions,\n  style,\n}) {\n  return (\n    <div className=\"MappingsArea\" style={style}>\n      <MappingsMenu\n        mappings={mappings}\n        selected={selection}\n        onMappingSelected={onMappingSelected}\n      />\n      {selection && (\n        <MappingFocus\n          mapping={selection}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onRenameMapping={onRenameMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          onAddEntryToMapping={onAddEntryToMapping}\n          onAddSuggestionToMapping={onAddSuggestionToMapping}\n          suggestions={suggestions}\n          onAddNegativeExampleToMapping = { onAddNegativeExampleToMapping}\n        />\n      )}\n    </div>\n  );\n}\n\nMappingsArea.defaultProps = {\n  style: {},\n};\n","import React, {useState, useEffect} from 'react';\nimport SearchBar from '../components/SearchBar';\nimport EntryTable from '../components/EntryTable';\nimport MappingsArea from '../components/MappingsArea';\nimport useFuse from 'react-use-fuse';\nimport {suggestForMapping} from '../utils/text_clustering';\nimport {most_similar_to_category_mean} from '../utils/calc_embedings';\n\nimport {\n  createMapping,\n  renameMapping,\n  addEntriesToMapping,\n  addNegativeExampleToMapping,\n  removeEntryFromMapping,\n  deleteMapping,\n  clearMapping,\n  requestEmbedingsForEntries,\n} from '../contexts/actions';\nimport {useStateValue, useMetaColumn} from '../contexts/app_context';\n\nexport default function ColumnPage({match}) {\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [selectedMappingID, setSelectedMappingID] = useState(null);\n  const [entrySelection, setEntrySelection] = useState([]);\n  const {columnID} = match.params;\n\n  const {entries, mappings, embeddings, dispatch} = useMetaColumn(columnID);\n  const selectedMapping = mappings.find(m => m.id == selectedMappingID);\n\n  useEffect(() => {\n    if (entries) {\n      requestEmbedingsForEntries(entries, dispatch);\n    }\n  }, [JSON.stringify(entries)]);\n\n  const non_mapped_entries = entries.filter(\n    entry => !mappings.some(m => m.entries.includes(entry.name)),\n  );\n\n  const {result, search, term, reset} = useFuse({\n    data: non_mapped_entries,\n    options: {\n      shouldSort: true,\n      findAllMatches: true,\n      keys: ['name'],\n      caseSensitive: false,\n    },\n  });\n\n  const filteredEntries = result;\n\n  const toggleEnrtySelection = entry => {\n    const entryName = typeof entry == 'string' ? entry : entry.name;\n\n    if (entrySelection.includes(entryName)) {\n      setEntrySelection(entrySelection.filter(s => s != entryName));\n    } else {\n      setEntrySelection([...entrySelection, entryName]);\n    }\n  };\n\n  const onCreateMapping = () => {\n    const id = createMapping(\n      entrySelection,\n      columnID,\n      entrySelection[0],\n      dispatch,\n    );\n    setEntrySelection([]);\n    setSelectedMappingID(id);\n  };\n\n  const onRenameMapping = (mapping, name) => {\n    renameMapping(mapping, name, dispatch);\n  };\n\n  const onRemoveEntryFromMapping = (entry, mapping) => {\n    removeEntryFromMapping(mapping, entry, dispatch);\n  };\n\n  const onClearMapping = mapping => {\n    clearMapping(mapping, dispatch);\n  };\n\n  const onDeleteMapping = mapping => {\n    deleteMapping(mapping, dispatch);\n  };\n\n  const clearSelection = () => {\n    setEntrySelection([]);\n  };\n\n  const onAddEntriesToMapping = (\n    entriesToAdd,\n    shouldClearSelection = false,\n  ) => {\n    addEntriesToMapping(selectedMapping, entriesToAdd, dispatch);\n    if (shouldClearSelection) {\n      clearSelection();\n    }\n  };\n\n  const onAddNegativeExampleToMapping = entry => {\n    addNegativeExampleToMapping(selectedMapping, entry, dispatch);\n  };\n\n  //Remove any entries that are already in a mapping\n\n  const updateSearch = text => {\n    setSearchTerm(text);\n    search(text);\n  };\n\n  const suggestionsAvaliable = embeddings && selectedMapping;\n\n  const meaningSuggestions = suggestionsAvaliable\n    ? most_similar_to_category_mean(\n        selectedMapping.entries,\n        selectedMapping.negative_examples,\n        non_mapped_entries,\n        embeddings,\n      )\n    : [];\n\n  const textSuggestions = suggestionsAvaliable\n    ? suggestForMapping(selectedMapping.entries, non_mapped_entries)\n    : [];\n\n  const suggestions = {text: textSuggestions, meaning: meaningSuggestions};\n\n  const {cache_loaded, _} = useStateValue();\n\n  const stats = {\n    mappings: mappings.length,\n    total_rows: entries.reduce((total, e) => total + e.count, 0),\n    total_mapped_rows: mappings\n      .map(m =>\n        m.entries.reduce(\n          (total, entry) => total + entries.find(e => e.name === entry).count,\n          0,\n        ),\n      )\n      .reduce((total, map) => total + map, 0),\n    total_entries_in_mappings: mappings.reduce(\n      (total, m) => total + m.entries.length,\n      0,\n    ),\n  };\n\n  if (!cache_loaded) {\n    return (\n      <div className=\"ColumnPage\">\n        <SearchBar\n          style={{gridArea: 'header', width: '50%', justifySelf: 'center'}}\n          onChange={updateSearch}\n          onClear={() => updateSearch('')}\n          value={searchTerm}\n          prompt=\"Search for entries by typing here...\"\n        />\n        <EntryTable\n          entries={filteredEntries}\n          style={{\n            gridArea: 'table',\n            overflowY: 'hidden',\n            width: '100%',\n            height: '100%',\n          }}\n          onToggleSelection={toggleEnrtySelection}\n          selection={entrySelection}\n          onClearSelection={clearSelection}\n          {...entries}\n        />\n        <div className=\"StatsAndActions\">\n          <div className=\"stats\">\n            <p>\n              <span>{stats.total_entries_in_mappings}</span> /{' '}\n              <span>{entries.length}</span> entries |{' '}\n              <span>{stats.total_mapped_rows}</span> /{' '}\n              <span>{stats.total_rows}</span> rows\n            </p>\n          </div>\n          <div className=\"entryActionButtons\">\n            <button\n              disabled={entrySelection.length == 0}\n              onClick={onCreateMapping}>\n              New Mapping {entrySelection.length}\n            </button>\n            <button\n              disabled={!(entrySelection.length > 0 && selectedMappingID)}\n              onClick={() => onAddEntriesToMapping(entrySelection, true)}>\n              Add to Mapping\n            </button>\n            <button\n              onClick={() =>\n                createMapping(non_mapped_entries, columnID, 'Other', dispatch)\n              }>\n              Map Remaining To Other\n            </button>\n          </div>\n        </div>\n        <MappingsArea\n          mappings={mappings}\n          selection={mappings.find(m => m.id === selectedMappingID)}\n          style={{gridArea: 'mappings'}}\n          onMappingSelected={s => setSelectedMappingID(s.id)}\n          onRenameMapping={onRenameMapping}\n          onRemoveEntryFromMapping={onRemoveEntryFromMapping}\n          onDeleteMapping={onDeleteMapping}\n          onClearMapping={onClearMapping}\n          suggestions={suggestions}\n          onAddSuggestionToMapping={suggestion =>\n            onAddEntriesToMapping([suggestion])\n          }\n          onAddNegativeExampleToMapping={onAddNegativeExampleToMapping}\n          {...mappings}\n          syle={{height: '300px'}}\n        />\n      </div>\n    );\n  } else {\n    return <h1>Loading</h1>;\n  }\n}\n","import React from 'react';\nimport {\n  faColumns,\n  faDatabase,\n  faAlignJustify,\n} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function ProjectCard({project, stats}) {\n  return (\n    <div className=\"project-card card\">\n      <h2 className=\"title\">{project.name}</h2>\n      <p className=\"description\">{project.description}</p>\n      <div className=\"project-card-stats\">\n        <span>\n          {stats.columns} <FontAwesomeIcon icon={faColumns} />\n        </span>\n        <span>\n          {stats.datasets} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n        <span>\n          {stats.meta_columns} <FontAwesomeIcon icon={faDatabase} />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport const EmptyProjectCard = ({prompt, icon}) => (\n  <div className=\"project-card card new-project-card\">\n    <h2 className=\"title\">{prompt}</h2>\n    <FontAwesomeIcon icon={icon} size={'3x'} />\n  </div>\n);\n","import React from 'react';\nimport ProjectCard, {EmptyProjectCard} from '../components/ProjectCard';\nimport {useProjectStats, useStorage} from '../contexts/app_context';\nimport {Link} from 'react-router-dom';\n\nimport {faPlus, faUpload} from '@fortawesome/free-solid-svg-icons';\n\nexport default function WelcomePage() {\n  const projects = useProjectStats();\n  const {persisting, quota, usage} = useStorage();\n\n  return (\n    <div className=\"welcome-page page\">\n      <header className=\"welcome-page-header\">\n        <h1 className=\"large-title-header\">smooshr</h1>\n        <p>Wrangle those messy datasets</p>\n        <p className=\"feedback\">\n          We need your help to make smooshr better! Try out our{' '}\n          <a\n            target=\"_blank\"\n            href=\"https://docs.google.com/document/d/1ANrFqNZKCYR4LogOKPvYVHZAbp1iiK3gpknPlNZF6Lw/\">\n            tutorial\n          </a>{' '}\n          and leave your thoughts on our{' '}\n          <a target=\"_blank\" href=\"https://airtable.com/shrMCZrvP7467LNG7\">\n            feedback form\n          </a>\n        </p>\n      </header>\n      {projects && (\n        <div className=\"projects-area\">\n          <div className=\"\">\n            <div className=\"region-header\">\n              <h2>local projects</h2>\n            </div>\n            <div className=\"region-list\">\n              {projects.map(p => (\n                <Link to={`/project/${p.project.id}`}>\n                  <ProjectCard project={p.project} stats={p.stats} />\n                </Link>\n              ))}\n              <Link to={'/new_project'}>\n                <EmptyProjectCard prompt={'New Project'} icon={faPlus} />\n              </Link>\n              <Link to={'/load_project'}>\n                <EmptyProjectCard prompt={'Load Project'} icon={faUpload} />\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"Storage\">\n        <p>smooshr processes and stores all data locally on your machine.</p>\n        {quota && (\n          <p>\n            It is currently using {usage.toLocaleString()} Mb of{' '}\n            {quota.toLocaleString()} Mb.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport EditableText from './EditableText';\nimport {Link} from 'react-router-dom';\n\nexport default function ColumnCard({\n  name,\n  description,\n  id,\n  fromColumns,\n  selected,\n  onClick,\n  onUpdate,\n  onUnmerge,\n  link,\n}) {\n  const total_unique = fromColumns.reduce((tot, c) => tot + c.unique, 0);\n  return (\n    <div\n      onClick={onClick}\n      className={`column-card card ${selected ? 'selected' : ''}`}>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}>\n        <EditableText text={name} onUpdate={onUpdate} />\n        <h2>{total_unique}</h2>\n      </div>\n      <p className=\"description\">{description}</p>\n\n      {fromColumns.map(c => (\n        <p>\n          {c.name} | {c.dataset.name}\n        </p>\n      ))}\n      <div className=\"column-action-buttons\">\n        {fromColumns.length > 1 && (\n          <button onClick={onUnmerge}>Split Column</button>\n        )}\n        <Link className=\"work-on-taxonomy-button\" to={link}>\n          <button>Work on taxonomy</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport {useStateValue, useProject} from '../contexts/app_context';\nimport {Link} from 'react-router-dom';\nimport ColumnCard from '../components/ColumnCard';\nimport TablePreview from '../components/TablePreview';\nimport {\n  mergeMetaColumns,\n  updateMetaColumn,\n  unMergeMetaColumn,\n  deleteProject,\n} from '../contexts/actions';\nimport {\n  saveMappingsCSV,\n  saveMappingsJSON,\n  saveProject,\n  applyAndSave,\n  exportPythonCode,\n} from '../utils/file_parsing';\nimport OpenDataSearcher from '../components/OpenDataSearcher';\n\nimport {\n  faColumns,\n  faDatabase,\n  faFistRaised,\n  faInfoCircle,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nexport default function ProjectPage(props) {\n  const {match, history} = props;\n  const {projectID} = match.params;\n  const {\n    project,\n    datasets,\n    meta_columns,\n    columns,\n    mappings,\n    entries,\n    deleteProject,\n  } = useProject(projectID);\n\n  const [selectedDatasetName, setSelectedDatasetName] = useState(\n    datasets && datasets.length > 0 ? datasets[0].name : null,\n  );\n\n  // Used to set the selected dataset to the first one on inital load\n  useEffect(() => {\n    if (datasets.length > 0 && !selectedDatasetName) {\n      setSelectedDatasetName(datasets[0].name);\n    }\n  }, [datasets, selectedDatasetName]);\n\n  const selectedDataset = datasets.find(d => d.name === selectedDatasetName);\n\n  const [{}, dispatch] = useStateValue();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n\n  const exportMappingsCSV = () => {\n    saveMappingsCSV(project, datasets, meta_columns, columns, mappings);\n  };\n\n  const exportMappingsJSON = () => {\n    saveMappingsJSON(project, datasets, meta_columns, columns, mappings);\n  };\n\n  const onSaveProject = () => {\n    saveProject(\n      project,\n      datasets,\n      meta_columns,\n      columns,\n      mappings,\n      entries,\n      {},\n    );\n  };\n\n  const exportPythonCode = () => {\n    exportPythonCode();\n  };\n\n  const exportData = () => {\n    applyAndSave(project, datasets, meta_columns, columns, mappings);\n  };\n\n  const changeMCName = (mc, name) => {\n    updateMetaColumn(mc.id, {name}, dispatch);\n  };\n  const deleteThisProject = () => {\n    deleteProject();\n    history.push('/');\n  };\n\n  const toggleSelectedColumn = id => {\n    if (selectedColumns.includes(id)) {\n      setSelectedColumns(selectedColumns.filter(cid => cid !== id));\n    } else {\n      setSelectedColumns([...selectedColumns, id]);\n    }\n  };\n\n  const seperateMetaDataColumn = id => {\n    unMergeMetaColumn(meta_columns.find(mc => mc.id == id), dispatch);\n  };\n\n  const dereferenceColumn = colID => {\n    const column = columns.find(c => c.id === colID);\n    return {\n      dataset: datasets.find(d => d.id === column.dataset_id),\n      name: column.name,\n      id: column.id,\n      unique: column.unique,\n    };\n  };\n\n  const mergeColumns = () => {\n    const toMerge = meta_columns.filter(mc => selectedColumns.includes(mc.id));\n    mergeMetaColumns(toMerge, dispatch);\n    setSelectedColumns([]);\n  };\n\n  return (\n    <div className=\"dataset-page page\">\n      {project ? (\n        <React.Fragment>\n          <p>{project.description}</p>\n\n          <div className=\"metadata region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faInfoCircle}\n                  style={{marginRight: '20px'}}\n                />\n                Metadata\n              </h2>\n              <div className=\"metadata\"></div>\n            </div>\n          </div>\n\n          <div className=\"columns region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faColumns}\n                  style={{marginRight: '20px'}}\n                />\n                Columns\n              </h2>\n              {selectedColumns.length > 0 ? (\n                <button\n                  onClick={\n                    mergeColumns\n                  }>{`Merge ${selectedColumns.length} columns`}</button>\n              ) : (\n                ''\n              )}\n            </div>\n            <div className=\"region-list column-list\">\n              {meta_columns.map(mc => (\n                <ColumnCard\n                  name={mc.name}\n                  description={mc.description}\n                  fromColumns={mc.columns.map(dereferenceColumn)}\n                  selected={selectedColumns.includes(mc.id)}\n                  onClick={() => toggleSelectedColumn(mc.id)}\n                  onUpdate={newName => changeMCName(mc, newName)}\n                  onUnmerge={() => seperateMetaDataColumn(mc.id)}\n                  link={`/project/${project.id}/column/${mc.id}`}\n                />\n              ))}\n            </div>\n          </div>\n\n          <div className=\"datasets region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faDatabase}\n                  style={{marginRight: '20px'}}\n                />\n                Datasets\n              </h2>\n            </div>\n            <div className=\"dataset-tabs\">\n              {datasets.map(dataset => (\n                <p\n                  className={\n                    selectedDatasetName == dataset.name\n                      ? 'selected-dataset dataset-tab'\n                      : 'dataset-tab'\n                  }\n                  onClick={() => setSelectedDatasetName(dataset.name)}>\n                  {dataset.name}\n                </p>\n              ))}\n              <p className=\"final-dataset dataset-tab\">Final Dataset Preview</p>\n              <div class=\"spacer\" />\n              <Link\n                to={`/project/${projectID}/add_datasets`}\n                className=\"add-dataset dataset-tab\">\n                <FontAwesomeIcon icon={faPlus} />\n                <span>Add Dataset</span>\n              </Link>\n            </div>\n\n            {datasets.length > 0 && selectedDataset && (\n              <TablePreview\n                data={selectedDataset.sample}\n                columns={selectedDataset.columns}\n              />\n            )}\n          </div>\n\n          <div className=\"actions region\">\n            <div className=\"region-header\">\n              <h2>\n                <FontAwesomeIcon\n                  icon={faFistRaised}\n                  style={{marginRight: '20px'}}\n                />\n                Actions\n              </h2>\n            </div>\n            <div className=\"region-list action-list\">\n              {/*<button onClick={exportMappingsCSV}>Export Mappings (csv)</button>*/}\n              <button onClick={onSaveProject}>Export Project</button>\n              <Link to={`/project/${projectID}/export`}>\n                <button>Export Python code</button>\n              </Link>\n              {/*<button onClick={exportData}>Export Data</button> */}\n              <button onClick={deleteThisProject}>Delete Project</button>\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n        <h1>Project not found</h1>\n      )}\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport SideBar from './components/SideBar';\nimport Footer from './components/Footer';\nimport UploadModal from './components/UploadModal';\nimport ProjectModal from './components/ProjectModal';\nimport LoadProjectModal from './components/LoadProjectModal';\nimport ShowApplyMappingsModal from './components/ApplyMappingsModal';\nimport CodeExportModal from './components/CodeExportModal';\nimport AutoClusterModal from './components/AutoClusterModal';\nimport DatasetPage, {DatasetPageSidebar} from './pages/DatasetPage';\nimport ColumnPage from './pages/ColumnPage';\nimport WelcomePage from './pages/WelcomePage';\nimport ProjectPage, {ProjectPageSidebar} from './pages/ProjectPage';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport 'typeface-lato';\n\nimport {useStateValue} from './contexts/app_context';\nimport {BrowserRouter as Router, Link, Route} from 'react-router-dom';\n\nimport './App.scss';\n\nfunction App() {\n  const [{projects}, dispatch] = useStateValue();\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <div className=\"main\">\n          <Route\n            path=\"/project/:projectID/dataset/:datasetID\"\n            exact={true}\n            component={DatasetPage}\n          />\n          <Route\n            path=\"/project/:projectID/column/:columnID\"\n            exact={true}\n            component={ColumnPage}\n          />\n          <Route\n            path=\"/project/:projectID\"\n            exact={true}\n            component={ProjectPage}\n          />\n          <Route path=\"/\" exact={true} component={WelcomePage} />\n        </div>\n        <Footer />\n\n        <Route path=\"/\" component={SideBar} />\n\n        <Route path=\"/new_project\" component={ProjectModal} />\n        <Route path=\"/load_project\" component={LoadProjectModal} />\n\n        <Route path=\"/project/:projectID/export\" component={CodeExportModal} />\n        <Route\n          path=\"/project/:projectID/add_datasets\"\n          component={UploadModal}\n        />\n\n        <Route\n          path=\"/dataset/:datasetID/apply\"\n          component={ShowApplyMappingsModal}\n        />\n\n        <Route\n          path=\"/project/:projectID/dataset/:datasetID/column/:columnID/guess_categories\"\n          component={AutoClusterModal}\n        />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './contexts/app_context'\n\nReactDOM.render(\n<StateProvider>\n  <App />\n</StateProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}